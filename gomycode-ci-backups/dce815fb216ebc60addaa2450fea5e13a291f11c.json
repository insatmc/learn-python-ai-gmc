{
  "Lessons": [
    {
      "ModuleId": 37,
      "Module": {
        "SubTrackId": 10,
        "SubTrack": {
          "Level": 1,
          "TrackId": 4,
          "Track": null,
          "Name": "Ready",
          "Modules": [
            {
              "SubTrackId": 10,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [
                {
                  "ModuleId": 38,
                  "Name": "AI fundamentals",
                  "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "Slides": [
                    {
                      "LessonId": 91,
                      "Name": "Goals of AI",
                      "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 415
                    },
                    {
                      "LessonId": 91,
                      "Name": "AI Agent",
                      "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 416
                    },
                    {
                      "LessonId": 91,
                      "Name": "Goal-based agents",
                      "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 417
                    },
                    {
                      "LessonId": 91,
                      "Name": "Modeling",
                      "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 418
                    },
                    {
                      "LessonId": 91,
                      "Name": "Solving problem by searching",
                      "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 419
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 91
                },
                {
                  "ModuleId": 38,
                  "Name": "ML fundamentals",
                  "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "Slides": [
                    {
                      "LessonId": 92,
                      "Name": "Features Engineering",
                      "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 420
                    },
                    {
                      "LessonId": 92,
                      "Name": "K-means",
                      "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 421
                    },
                    {
                      "LessonId": 92,
                      "Name": "KNN",
                      "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 422
                    },
                    {
                      "LessonId": 92,
                      "Name": "Learning Decision Trees",
                      "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 423
                    },
                    {
                      "LessonId": 92,
                      "Name": "Regression",
                      "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "IsRead": null,
                      "Id": 424
                    },
                    {
                      "LessonId": 92,
                      "Name": "Support Vector Machine",
                      "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "IsRead": null,
                      "Id": 425
                    },
                    {
                      "LessonId": 92,
                      "Name": "Neural Networks",
                      "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 24,
                      "IsRead": null,
                      "Id": 426
                    },
                    {
                      "LessonId": 92,
                      "Name": "Mini Project",
                      "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 27,
                      "IsRead": null,
                      "Id": 427
                    },
                    {
                      "LessonId": 92,
                      "Name": "Supervised Learning",
                      "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 461
                    },
                    {
                      "LessonId": 92,
                      "Name": "Naive Bayes Classifier",
                      "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 21,
                      "IsRead": null,
                      "Id": 502
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 92
                }
              ],
              "Id": 38
            },
            {
              "SubTrackId": 10,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [
                {
                  "ModuleId": 39,
                  "Name": "Extras",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "Slides": [
                    {
                      "LessonId": 93,
                      "Name": "NLP",
                      "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 428
                    },
                    {
                      "LessonId": 93,
                      "Name": "Objects Detection",
                      "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 429
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 93
                }
              ],
              "Id": 39
            }
          ],
          "MigrationVersion": 25,
          "ProductTemplateId": 18,
          "Locked": false,
          "Progress": 0.0,
          "Id": 10
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 37,
            "Name": "Numpy",
            "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "Slides": [
              {
                "LessonId": 90,
                "Name": "Arrays",
                "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 412
              },
              {
                "LessonId": 90,
                "Name": "Math",
                "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 413
              },
              {
                "LessonId": 90,
                "Name": "Indexing",
                "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 414
              },
              {
                "LessonId": 90,
                "Name": "Mini-Project",
                "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 612
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 90
          },
          {
            "ModuleId": 37,
            "Name": "Matplotlib",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "Slides": [
              {
                "LessonId": 111,
                "Name": "First Plot",
                "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 503
              },
              {
                "LessonId": 111,
                "Name": "Bar Charts",
                "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 504
              },
              {
                "LessonId": 111,
                "Name": "Scatter Plot",
                "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 505
              },
              {
                "LessonId": 111,
                "Name": "Combine Plots",
                "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 506
              },
              {
                "LessonId": 111,
                "Name": "Histogram",
                "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 821
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 111
          },
          {
            "ModuleId": 37,
            "Name": "Pandas",
            "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "Slides": [
              {
                "LessonId": 112,
                "Name": "Object Creation",
                "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 507
              },
              {
                "LessonId": 112,
                "Name": "Viewing data",
                "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 508
              },
              {
                "LessonId": 112,
                "Name": "Pivot Table",
                "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 509
              },
              {
                "LessonId": 112,
                "Name": "Case Study",
                "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 822
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 112
          }
        ],
        "Id": 37
      },
      "Name": "Python",
      "Content": "",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "Slides": [
        {
          "LessonId": 89,
          "Name": "Hello Python",
          "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
          "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 404
        },
        {
          "LessonId": 89,
          "Name": "Variables",
          "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 405
        },
        {
          "LessonId": 89,
          "Name": "Conditions",
          "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 406
        },
        {
          "LessonId": 89,
          "Name": "Looping",
          "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
          "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
          "OrderIndicator": 9,
          "IsRead": null,
          "Id": 407
        },
        {
          "LessonId": 89,
          "Name": "Lists",
          "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 12,
          "IsRead": null,
          "Id": 408
        },
        {
          "LessonId": 89,
          "Name": "Dicts",
          "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
          "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
          "OrderIndicator": 15,
          "IsRead": null,
          "Id": 409
        },
        {
          "LessonId": 89,
          "Name": "Function and Classes",
          "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
          "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
          "OrderIndicator": 18,
          "IsRead": null,
          "Id": 410
        },
        {
          "LessonId": 89,
          "Name": "Mini Project",
          "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
          "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
          "OrderIndicator": 21,
          "IsRead": null,
          "Id": 411
        }
      ],
      "Quizzes": [
        {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        }
      ],
      "Progress": 0.0,
      "Id": 89
    },
    {
      "ModuleId": 37,
      "Module": {
        "SubTrackId": 10,
        "SubTrack": {
          "Level": 1,
          "TrackId": 4,
          "Track": null,
          "Name": "Ready",
          "Modules": [
            {
              "SubTrackId": 10,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [
                {
                  "ModuleId": 38,
                  "Name": "AI fundamentals",
                  "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "Slides": [
                    {
                      "LessonId": 91,
                      "Name": "Goals of AI",
                      "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 415
                    },
                    {
                      "LessonId": 91,
                      "Name": "AI Agent",
                      "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 416
                    },
                    {
                      "LessonId": 91,
                      "Name": "Goal-based agents",
                      "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 417
                    },
                    {
                      "LessonId": 91,
                      "Name": "Modeling",
                      "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 418
                    },
                    {
                      "LessonId": 91,
                      "Name": "Solving problem by searching",
                      "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 419
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 91
                },
                {
                  "ModuleId": 38,
                  "Name": "ML fundamentals",
                  "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "Slides": [
                    {
                      "LessonId": 92,
                      "Name": "Features Engineering",
                      "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 420
                    },
                    {
                      "LessonId": 92,
                      "Name": "K-means",
                      "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 421
                    },
                    {
                      "LessonId": 92,
                      "Name": "KNN",
                      "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 422
                    },
                    {
                      "LessonId": 92,
                      "Name": "Learning Decision Trees",
                      "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 423
                    },
                    {
                      "LessonId": 92,
                      "Name": "Regression",
                      "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "IsRead": null,
                      "Id": 424
                    },
                    {
                      "LessonId": 92,
                      "Name": "Support Vector Machine",
                      "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "IsRead": null,
                      "Id": 425
                    },
                    {
                      "LessonId": 92,
                      "Name": "Neural Networks",
                      "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 24,
                      "IsRead": null,
                      "Id": 426
                    },
                    {
                      "LessonId": 92,
                      "Name": "Mini Project",
                      "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 27,
                      "IsRead": null,
                      "Id": 427
                    },
                    {
                      "LessonId": 92,
                      "Name": "Supervised Learning",
                      "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 461
                    },
                    {
                      "LessonId": 92,
                      "Name": "Naive Bayes Classifier",
                      "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 21,
                      "IsRead": null,
                      "Id": 502
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 92
                }
              ],
              "Id": 38
            },
            {
              "SubTrackId": 10,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [
                {
                  "ModuleId": 39,
                  "Name": "Extras",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "Slides": [
                    {
                      "LessonId": 93,
                      "Name": "NLP",
                      "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 428
                    },
                    {
                      "LessonId": 93,
                      "Name": "Objects Detection",
                      "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 429
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 93
                }
              ],
              "Id": 39
            }
          ],
          "MigrationVersion": 25,
          "ProductTemplateId": 18,
          "Locked": false,
          "Progress": 0.0,
          "Id": 10
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 37,
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [
              {
                "Name": "Python Quiz",
                "OrderIndicator": 0,
                "LessonId": 89,
                "Questions": [
                  {
                    "Content": "Which function to display the content of a variable?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "print()",
                        "IsCorrect": true,
                        "QuestionId": 40,
                        "Answers": null,
                        "Id": 159
                      },
                      {
                        "Content": "display()",
                        "IsCorrect": false,
                        "QuestionId": 40,
                        "Answers": null,
                        "Id": 160
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 40
                  },
                  {
                    "Content": "Which of the following is the exponent operator?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "^",
                        "IsCorrect": false,
                        "QuestionId": 41,
                        "Answers": null,
                        "Id": 161
                      },
                      {
                        "Content": "*",
                        "IsCorrect": false,
                        "QuestionId": 41,
                        "Answers": null,
                        "Id": 162
                      },
                      {
                        "Content": "**",
                        "IsCorrect": true,
                        "QuestionId": 41,
                        "Answers": null,
                        "Id": 163
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 41
                  },
                  {
                    "Content": "What correctly imports the datetime library?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "import datatime",
                        "IsCorrect": true,
                        "QuestionId": 42,
                        "Answers": null,
                        "Id": 164
                      },
                      {
                        "Content": "include datatime",
                        "IsCorrect": false,
                        "QuestionId": 42,
                        "Answers": null,
                        "Id": 165
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 42
                  },
                  {
                    "Content": "What correctly imports the fileinput library?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "import fileinput",
                        "IsCorrect": true,
                        "QuestionId": 43,
                        "Answers": null,
                        "Id": 166
                      },
                      {
                        "Content": "include fileinput",
                        "IsCorrect": false,
                        "QuestionId": 43,
                        "Answers": null,
                        "Id": 167
                      },
                      {
                        "Content": "require fileinput",
                        "IsCorrect": false,
                        "QuestionId": 43,
                        "Answers": null,
                        "Id": 168
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 43
                  },
                  {
                    "Content": "Which is the correct way to write a for loop?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "for i=0; i < 10; i++",
                        "IsCorrect": false,
                        "QuestionId": 44,
                        "Answers": null,
                        "Id": 169
                      },
                      {
                        "Content": "for i from 0 to 10",
                        "IsCorrect": false,
                        "QuestionId": 44,
                        "Answers": null,
                        "Id": 170
                      },
                      {
                        "Content": "for in in range(0,10)",
                        "IsCorrect": true,
                        "QuestionId": 44,
                        "Answers": null,
                        "Id": 171
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 44
                  },
                  {
                    "Content": "What are functions?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "Code that can only be used once in the application",
                        "IsCorrect": false,
                        "QuestionId": 45,
                        "Answers": null,
                        "Id": 172
                      },
                      {
                        "Content": "Reusable pieces of code that can be called on throughout an application",
                        "IsCorrect": true,
                        "QuestionId": 45,
                        "Answers": null,
                        "Id": 173
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 45
                  },
                  {
                    "Content": "What is the right way to read from 2x2 matrix?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "matrix(x,y)",
                        "IsCorrect": false,
                        "QuestionId": 46,
                        "Answers": null,
                        "Id": 174
                      },
                      {
                        "Content": "matrix[x,y]",
                        "IsCorrect": false,
                        "QuestionId": 46,
                        "Answers": null,
                        "Id": 175
                      },
                      {
                        "Content": "matrix[x][y]",
                        "IsCorrect": true,
                        "QuestionId": 46,
                        "Answers": null,
                        "Id": 176
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 46
                  }
                ],
                "QuizResults": null,
                "IsDone": false,
                "Id": 7
              }
            ],
            "Progress": 0.0,
            "Id": 89
          },
          {
            "ModuleId": 37,
            "Name": "Matplotlib",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "Slides": [
              {
                "LessonId": 111,
                "Name": "First Plot",
                "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 503
              },
              {
                "LessonId": 111,
                "Name": "Bar Charts",
                "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 504
              },
              {
                "LessonId": 111,
                "Name": "Scatter Plot",
                "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 505
              },
              {
                "LessonId": 111,
                "Name": "Combine Plots",
                "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 506
              },
              {
                "LessonId": 111,
                "Name": "Histogram",
                "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 821
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 111
          },
          {
            "ModuleId": 37,
            "Name": "Pandas",
            "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "Slides": [
              {
                "LessonId": 112,
                "Name": "Object Creation",
                "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 507
              },
              {
                "LessonId": 112,
                "Name": "Viewing data",
                "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 508
              },
              {
                "LessonId": 112,
                "Name": "Pivot Table",
                "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 509
              },
              {
                "LessonId": 112,
                "Name": "Case Study",
                "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 822
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 112
          }
        ],
        "Id": 37
      },
      "Name": "Numpy",
      "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "Slides": [
        {
          "LessonId": 90,
          "Name": "Arrays",
          "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
          "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 412
        },
        {
          "LessonId": 90,
          "Name": "Math",
          "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
          "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 413
        },
        {
          "LessonId": 90,
          "Name": "Indexing",
          "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
          "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 414
        },
        {
          "LessonId": 90,
          "Name": "Mini-Project",
          "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
          "SandboxUrl": "",
          "OrderIndicator": 9,
          "IsRead": null,
          "Id": 612
        }
      ],
      "Quizzes": null,
      "Progress": 0.0,
      "Id": 90
    },
    {
      "ModuleId": 38,
      "Module": {
        "SubTrackId": 10,
        "SubTrack": {
          "Level": 1,
          "TrackId": 4,
          "Track": null,
          "Name": "Ready",
          "Modules": [
            {
              "SubTrackId": 10,
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Python",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "Slides": [
                    {
                      "LessonId": 89,
                      "Name": "Hello Python",
                      "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 404
                    },
                    {
                      "LessonId": 89,
                      "Name": "Variables",
                      "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 405
                    },
                    {
                      "LessonId": 89,
                      "Name": "Conditions",
                      "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 406
                    },
                    {
                      "LessonId": 89,
                      "Name": "Looping",
                      "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 407
                    },
                    {
                      "LessonId": 89,
                      "Name": "Lists",
                      "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 408
                    },
                    {
                      "LessonId": 89,
                      "Name": "Dicts",
                      "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                      "OrderIndicator": 15,
                      "IsRead": null,
                      "Id": 409
                    },
                    {
                      "LessonId": 89,
                      "Name": "Function and Classes",
                      "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                      "OrderIndicator": 18,
                      "IsRead": null,
                      "Id": 410
                    },
                    {
                      "LessonId": 89,
                      "Name": "Mini Project",
                      "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                      "OrderIndicator": 21,
                      "IsRead": null,
                      "Id": 411
                    }
                  ],
                  "Quizzes": [
                    {
                      "Name": "Python Quiz",
                      "OrderIndicator": 0,
                      "LessonId": 89,
                      "Questions": [
                        {
                          "Content": "Which function to display the content of a variable?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "print()",
                              "IsCorrect": true,
                              "QuestionId": 40,
                              "Answers": null,
                              "Id": 159
                            },
                            {
                              "Content": "display()",
                              "IsCorrect": false,
                              "QuestionId": 40,
                              "Answers": null,
                              "Id": 160
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 40
                        },
                        {
                          "Content": "Which of the following is the exponent operator?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "^",
                              "IsCorrect": false,
                              "QuestionId": 41,
                              "Answers": null,
                              "Id": 161
                            },
                            {
                              "Content": "*",
                              "IsCorrect": false,
                              "QuestionId": 41,
                              "Answers": null,
                              "Id": 162
                            },
                            {
                              "Content": "**",
                              "IsCorrect": true,
                              "QuestionId": 41,
                              "Answers": null,
                              "Id": 163
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 41
                        },
                        {
                          "Content": "What correctly imports the datetime library?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "import datatime",
                              "IsCorrect": true,
                              "QuestionId": 42,
                              "Answers": null,
                              "Id": 164
                            },
                            {
                              "Content": "include datatime",
                              "IsCorrect": false,
                              "QuestionId": 42,
                              "Answers": null,
                              "Id": 165
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 42
                        },
                        {
                          "Content": "What correctly imports the fileinput library?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "import fileinput",
                              "IsCorrect": true,
                              "QuestionId": 43,
                              "Answers": null,
                              "Id": 166
                            },
                            {
                              "Content": "include fileinput",
                              "IsCorrect": false,
                              "QuestionId": 43,
                              "Answers": null,
                              "Id": 167
                            },
                            {
                              "Content": "require fileinput",
                              "IsCorrect": false,
                              "QuestionId": 43,
                              "Answers": null,
                              "Id": 168
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 43
                        },
                        {
                          "Content": "Which is the correct way to write a for loop?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "for i=0; i < 10; i++",
                              "IsCorrect": false,
                              "QuestionId": 44,
                              "Answers": null,
                              "Id": 169
                            },
                            {
                              "Content": "for i from 0 to 10",
                              "IsCorrect": false,
                              "QuestionId": 44,
                              "Answers": null,
                              "Id": 170
                            },
                            {
                              "Content": "for in in range(0,10)",
                              "IsCorrect": true,
                              "QuestionId": 44,
                              "Answers": null,
                              "Id": 171
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 44
                        },
                        {
                          "Content": "What are functions?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "Code that can only be used once in the application",
                              "IsCorrect": false,
                              "QuestionId": 45,
                              "Answers": null,
                              "Id": 172
                            },
                            {
                              "Content": "Reusable pieces of code that can be called on throughout an application",
                              "IsCorrect": true,
                              "QuestionId": 45,
                              "Answers": null,
                              "Id": 173
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 45
                        },
                        {
                          "Content": "What is the right way to read from 2x2 matrix?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "matrix(x,y)",
                              "IsCorrect": false,
                              "QuestionId": 46,
                              "Answers": null,
                              "Id": 174
                            },
                            {
                              "Content": "matrix[x,y]",
                              "IsCorrect": false,
                              "QuestionId": 46,
                              "Answers": null,
                              "Id": 175
                            },
                            {
                              "Content": "matrix[x][y]",
                              "IsCorrect": true,
                              "QuestionId": 46,
                              "Answers": null,
                              "Id": 176
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 46
                        }
                      ],
                      "QuizResults": null,
                      "IsDone": false,
                      "Id": 7
                    }
                  ],
                  "Progress": 0.0,
                  "Id": 89
                },
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            {
              "SubTrackId": 10,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [
                {
                  "ModuleId": 39,
                  "Name": "Extras",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "Slides": [
                    {
                      "LessonId": 93,
                      "Name": "NLP",
                      "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 428
                    },
                    {
                      "LessonId": 93,
                      "Name": "Objects Detection",
                      "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 429
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 93
                }
              ],
              "Id": 39
            }
          ],
          "MigrationVersion": 25,
          "ProductTemplateId": 18,
          "Locked": false,
          "Progress": 0.0,
          "Id": 10
        },
        "Name": "Power Up",
        "Color": "#2ecc71",
        "OrderIndicator": 3,
        "Lessons": [
          {
            "ModuleId": 38,
            "Name": "ML fundamentals",
            "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "Slides": [
              {
                "LessonId": 92,
                "Name": "Features Engineering",
                "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 420
              },
              {
                "LessonId": 92,
                "Name": "K-means",
                "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 421
              },
              {
                "LessonId": 92,
                "Name": "KNN",
                "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 422
              },
              {
                "LessonId": 92,
                "Name": "Learning Decision Trees",
                "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 423
              },
              {
                "LessonId": 92,
                "Name": "Regression",
                "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 424
              },
              {
                "LessonId": 92,
                "Name": "Support Vector Machine",
                "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 425
              },
              {
                "LessonId": 92,
                "Name": "Neural Networks",
                "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 24,
                "IsRead": null,
                "Id": 426
              },
              {
                "LessonId": 92,
                "Name": "Mini Project",
                "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 27,
                "IsRead": null,
                "Id": 427
              },
              {
                "LessonId": 92,
                "Name": "Supervised Learning",
                "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 461
              },
              {
                "LessonId": 92,
                "Name": "Naive Bayes Classifier",
                "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 502
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 92
          }
        ],
        "Id": 38
      },
      "Name": "AI fundamentals",
      "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
      "SandboxUrl": "",
      "OrderIndicator": 12,
      "Slides": [
        {
          "LessonId": 91,
          "Name": "Goals of AI",
          "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 415
        },
        {
          "LessonId": 91,
          "Name": "AI Agent",
          "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 416
        },
        {
          "LessonId": 91,
          "Name": "Goal-based agents",
          "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 417
        },
        {
          "LessonId": 91,
          "Name": "Modeling",
          "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 9,
          "IsRead": null,
          "Id": 418
        },
        {
          "LessonId": 91,
          "Name": "Solving problem by searching",
          "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 12,
          "IsRead": null,
          "Id": 419
        }
      ],
      "Quizzes": null,
      "Progress": 0.0,
      "Id": 91
    },
    {
      "ModuleId": 38,
      "Module": {
        "SubTrackId": 10,
        "SubTrack": {
          "Level": 1,
          "TrackId": 4,
          "Track": null,
          "Name": "Ready",
          "Modules": [
            {
              "SubTrackId": 10,
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Python",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "Slides": [
                    {
                      "LessonId": 89,
                      "Name": "Hello Python",
                      "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 404
                    },
                    {
                      "LessonId": 89,
                      "Name": "Variables",
                      "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 405
                    },
                    {
                      "LessonId": 89,
                      "Name": "Conditions",
                      "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 406
                    },
                    {
                      "LessonId": 89,
                      "Name": "Looping",
                      "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 407
                    },
                    {
                      "LessonId": 89,
                      "Name": "Lists",
                      "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 408
                    },
                    {
                      "LessonId": 89,
                      "Name": "Dicts",
                      "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                      "OrderIndicator": 15,
                      "IsRead": null,
                      "Id": 409
                    },
                    {
                      "LessonId": 89,
                      "Name": "Function and Classes",
                      "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                      "OrderIndicator": 18,
                      "IsRead": null,
                      "Id": 410
                    },
                    {
                      "LessonId": 89,
                      "Name": "Mini Project",
                      "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                      "OrderIndicator": 21,
                      "IsRead": null,
                      "Id": 411
                    }
                  ],
                  "Quizzes": [
                    {
                      "Name": "Python Quiz",
                      "OrderIndicator": 0,
                      "LessonId": 89,
                      "Questions": [
                        {
                          "Content": "Which function to display the content of a variable?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "print()",
                              "IsCorrect": true,
                              "QuestionId": 40,
                              "Answers": null,
                              "Id": 159
                            },
                            {
                              "Content": "display()",
                              "IsCorrect": false,
                              "QuestionId": 40,
                              "Answers": null,
                              "Id": 160
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 40
                        },
                        {
                          "Content": "Which of the following is the exponent operator?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "^",
                              "IsCorrect": false,
                              "QuestionId": 41,
                              "Answers": null,
                              "Id": 161
                            },
                            {
                              "Content": "*",
                              "IsCorrect": false,
                              "QuestionId": 41,
                              "Answers": null,
                              "Id": 162
                            },
                            {
                              "Content": "**",
                              "IsCorrect": true,
                              "QuestionId": 41,
                              "Answers": null,
                              "Id": 163
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 41
                        },
                        {
                          "Content": "What correctly imports the datetime library?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "import datatime",
                              "IsCorrect": true,
                              "QuestionId": 42,
                              "Answers": null,
                              "Id": 164
                            },
                            {
                              "Content": "include datatime",
                              "IsCorrect": false,
                              "QuestionId": 42,
                              "Answers": null,
                              "Id": 165
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 42
                        },
                        {
                          "Content": "What correctly imports the fileinput library?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "import fileinput",
                              "IsCorrect": true,
                              "QuestionId": 43,
                              "Answers": null,
                              "Id": 166
                            },
                            {
                              "Content": "include fileinput",
                              "IsCorrect": false,
                              "QuestionId": 43,
                              "Answers": null,
                              "Id": 167
                            },
                            {
                              "Content": "require fileinput",
                              "IsCorrect": false,
                              "QuestionId": 43,
                              "Answers": null,
                              "Id": 168
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 43
                        },
                        {
                          "Content": "Which is the correct way to write a for loop?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "for i=0; i < 10; i++",
                              "IsCorrect": false,
                              "QuestionId": 44,
                              "Answers": null,
                              "Id": 169
                            },
                            {
                              "Content": "for i from 0 to 10",
                              "IsCorrect": false,
                              "QuestionId": 44,
                              "Answers": null,
                              "Id": 170
                            },
                            {
                              "Content": "for in in range(0,10)",
                              "IsCorrect": true,
                              "QuestionId": 44,
                              "Answers": null,
                              "Id": 171
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 44
                        },
                        {
                          "Content": "What are functions?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "Code that can only be used once in the application",
                              "IsCorrect": false,
                              "QuestionId": 45,
                              "Answers": null,
                              "Id": 172
                            },
                            {
                              "Content": "Reusable pieces of code that can be called on throughout an application",
                              "IsCorrect": true,
                              "QuestionId": 45,
                              "Answers": null,
                              "Id": 173
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 45
                        },
                        {
                          "Content": "What is the right way to read from 2x2 matrix?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "matrix(x,y)",
                              "IsCorrect": false,
                              "QuestionId": 46,
                              "Answers": null,
                              "Id": 174
                            },
                            {
                              "Content": "matrix[x,y]",
                              "IsCorrect": false,
                              "QuestionId": 46,
                              "Answers": null,
                              "Id": 175
                            },
                            {
                              "Content": "matrix[x][y]",
                              "IsCorrect": true,
                              "QuestionId": 46,
                              "Answers": null,
                              "Id": 176
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 46
                        }
                      ],
                      "QuizResults": null,
                      "IsDone": false,
                      "Id": 7
                    }
                  ],
                  "Progress": 0.0,
                  "Id": 89
                },
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            {
              "SubTrackId": 10,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [
                {
                  "ModuleId": 39,
                  "Name": "Extras",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "Slides": [
                    {
                      "LessonId": 93,
                      "Name": "NLP",
                      "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 428
                    },
                    {
                      "LessonId": 93,
                      "Name": "Objects Detection",
                      "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 429
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 93
                }
              ],
              "Id": 39
            }
          ],
          "MigrationVersion": 25,
          "ProductTemplateId": 18,
          "Locked": false,
          "Progress": 0.0,
          "Id": 10
        },
        "Name": "Power Up",
        "Color": "#2ecc71",
        "OrderIndicator": 3,
        "Lessons": [
          {
            "ModuleId": 38,
            "Name": "AI fundamentals",
            "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "Slides": [
              {
                "LessonId": 91,
                "Name": "Goals of AI",
                "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 415
              },
              {
                "LessonId": 91,
                "Name": "AI Agent",
                "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 416
              },
              {
                "LessonId": 91,
                "Name": "Goal-based agents",
                "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 417
              },
              {
                "LessonId": 91,
                "Name": "Modeling",
                "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 418
              },
              {
                "LessonId": 91,
                "Name": "Solving problem by searching",
                "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 419
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 91
          }
        ],
        "Id": 38
      },
      "Name": "ML fundamentals",
      "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
      "SandboxUrl": "",
      "OrderIndicator": 15,
      "Slides": [
        {
          "LessonId": 92,
          "Name": "Features Engineering",
          "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 420
        },
        {
          "LessonId": 92,
          "Name": "K-means",
          "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 421
        },
        {
          "LessonId": 92,
          "Name": "KNN",
          "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 9,
          "IsRead": null,
          "Id": 422
        },
        {
          "LessonId": 92,
          "Name": "Learning Decision Trees",
          "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
          "SandboxUrl": "",
          "OrderIndicator": 12,
          "IsRead": null,
          "Id": 423
        },
        {
          "LessonId": 92,
          "Name": "Regression",
          "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 15,
          "IsRead": null,
          "Id": 424
        },
        {
          "LessonId": 92,
          "Name": "Support Vector Machine",
          "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 18,
          "IsRead": null,
          "Id": 425
        },
        {
          "LessonId": 92,
          "Name": "Neural Networks",
          "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 24,
          "IsRead": null,
          "Id": 426
        },
        {
          "LessonId": 92,
          "Name": "Mini Project",
          "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 27,
          "IsRead": null,
          "Id": 427
        },
        {
          "LessonId": 92,
          "Name": "Supervised Learning",
          "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 461
        },
        {
          "LessonId": 92,
          "Name": "Naive Bayes Classifier",
          "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 21,
          "IsRead": null,
          "Id": 502
        }
      ],
      "Quizzes": null,
      "Progress": 0.0,
      "Id": 92
    },
    {
      "ModuleId": 39,
      "Module": {
        "SubTrackId": 10,
        "SubTrack": {
          "Level": 1,
          "TrackId": 4,
          "Track": null,
          "Name": "Ready",
          "Modules": [
            {
              "SubTrackId": 10,
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Python",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "Slides": [
                    {
                      "LessonId": 89,
                      "Name": "Hello Python",
                      "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 404
                    },
                    {
                      "LessonId": 89,
                      "Name": "Variables",
                      "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 405
                    },
                    {
                      "LessonId": 89,
                      "Name": "Conditions",
                      "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 406
                    },
                    {
                      "LessonId": 89,
                      "Name": "Looping",
                      "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 407
                    },
                    {
                      "LessonId": 89,
                      "Name": "Lists",
                      "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 408
                    },
                    {
                      "LessonId": 89,
                      "Name": "Dicts",
                      "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                      "OrderIndicator": 15,
                      "IsRead": null,
                      "Id": 409
                    },
                    {
                      "LessonId": 89,
                      "Name": "Function and Classes",
                      "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                      "OrderIndicator": 18,
                      "IsRead": null,
                      "Id": 410
                    },
                    {
                      "LessonId": 89,
                      "Name": "Mini Project",
                      "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                      "OrderIndicator": 21,
                      "IsRead": null,
                      "Id": 411
                    }
                  ],
                  "Quizzes": [
                    {
                      "Name": "Python Quiz",
                      "OrderIndicator": 0,
                      "LessonId": 89,
                      "Questions": [
                        {
                          "Content": "Which function to display the content of a variable?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "print()",
                              "IsCorrect": true,
                              "QuestionId": 40,
                              "Answers": null,
                              "Id": 159
                            },
                            {
                              "Content": "display()",
                              "IsCorrect": false,
                              "QuestionId": 40,
                              "Answers": null,
                              "Id": 160
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 40
                        },
                        {
                          "Content": "Which of the following is the exponent operator?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "^",
                              "IsCorrect": false,
                              "QuestionId": 41,
                              "Answers": null,
                              "Id": 161
                            },
                            {
                              "Content": "*",
                              "IsCorrect": false,
                              "QuestionId": 41,
                              "Answers": null,
                              "Id": 162
                            },
                            {
                              "Content": "**",
                              "IsCorrect": true,
                              "QuestionId": 41,
                              "Answers": null,
                              "Id": 163
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 41
                        },
                        {
                          "Content": "What correctly imports the datetime library?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "import datatime",
                              "IsCorrect": true,
                              "QuestionId": 42,
                              "Answers": null,
                              "Id": 164
                            },
                            {
                              "Content": "include datatime",
                              "IsCorrect": false,
                              "QuestionId": 42,
                              "Answers": null,
                              "Id": 165
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 42
                        },
                        {
                          "Content": "What correctly imports the fileinput library?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "import fileinput",
                              "IsCorrect": true,
                              "QuestionId": 43,
                              "Answers": null,
                              "Id": 166
                            },
                            {
                              "Content": "include fileinput",
                              "IsCorrect": false,
                              "QuestionId": 43,
                              "Answers": null,
                              "Id": 167
                            },
                            {
                              "Content": "require fileinput",
                              "IsCorrect": false,
                              "QuestionId": 43,
                              "Answers": null,
                              "Id": 168
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 43
                        },
                        {
                          "Content": "Which is the correct way to write a for loop?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "for i=0; i < 10; i++",
                              "IsCorrect": false,
                              "QuestionId": 44,
                              "Answers": null,
                              "Id": 169
                            },
                            {
                              "Content": "for i from 0 to 10",
                              "IsCorrect": false,
                              "QuestionId": 44,
                              "Answers": null,
                              "Id": 170
                            },
                            {
                              "Content": "for in in range(0,10)",
                              "IsCorrect": true,
                              "QuestionId": 44,
                              "Answers": null,
                              "Id": 171
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 44
                        },
                        {
                          "Content": "What are functions?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "Code that can only be used once in the application",
                              "IsCorrect": false,
                              "QuestionId": 45,
                              "Answers": null,
                              "Id": 172
                            },
                            {
                              "Content": "Reusable pieces of code that can be called on throughout an application",
                              "IsCorrect": true,
                              "QuestionId": 45,
                              "Answers": null,
                              "Id": 173
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 45
                        },
                        {
                          "Content": "What is the right way to read from 2x2 matrix?",
                          "QuizId": 7,
                          "Choices": [
                            {
                              "Content": "matrix(x,y)",
                              "IsCorrect": false,
                              "QuestionId": 46,
                              "Answers": null,
                              "Id": 174
                            },
                            {
                              "Content": "matrix[x,y]",
                              "IsCorrect": false,
                              "QuestionId": 46,
                              "Answers": null,
                              "Id": 175
                            },
                            {
                              "Content": "matrix[x][y]",
                              "IsCorrect": true,
                              "QuestionId": 46,
                              "Answers": null,
                              "Id": 176
                            }
                          ],
                          "IsAnswered": false,
                          "IsCorrect": false,
                          "Id": 46
                        }
                      ],
                      "QuizResults": null,
                      "IsDone": false,
                      "Id": 7
                    }
                  ],
                  "Progress": 0.0,
                  "Id": 89
                },
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            {
              "SubTrackId": 10,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [
                {
                  "ModuleId": 38,
                  "Name": "AI fundamentals",
                  "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "Slides": [
                    {
                      "LessonId": 91,
                      "Name": "Goals of AI",
                      "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 415
                    },
                    {
                      "LessonId": 91,
                      "Name": "AI Agent",
                      "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 416
                    },
                    {
                      "LessonId": 91,
                      "Name": "Goal-based agents",
                      "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 417
                    },
                    {
                      "LessonId": 91,
                      "Name": "Modeling",
                      "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 418
                    },
                    {
                      "LessonId": 91,
                      "Name": "Solving problem by searching",
                      "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 419
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 91
                },
                {
                  "ModuleId": 38,
                  "Name": "ML fundamentals",
                  "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "Slides": [
                    {
                      "LessonId": 92,
                      "Name": "Features Engineering",
                      "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 420
                    },
                    {
                      "LessonId": 92,
                      "Name": "K-means",
                      "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 421
                    },
                    {
                      "LessonId": 92,
                      "Name": "KNN",
                      "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 422
                    },
                    {
                      "LessonId": 92,
                      "Name": "Learning Decision Trees",
                      "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 423
                    },
                    {
                      "LessonId": 92,
                      "Name": "Regression",
                      "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "IsRead": null,
                      "Id": 424
                    },
                    {
                      "LessonId": 92,
                      "Name": "Support Vector Machine",
                      "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "IsRead": null,
                      "Id": 425
                    },
                    {
                      "LessonId": 92,
                      "Name": "Neural Networks",
                      "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 24,
                      "IsRead": null,
                      "Id": 426
                    },
                    {
                      "LessonId": 92,
                      "Name": "Mini Project",
                      "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 27,
                      "IsRead": null,
                      "Id": 427
                    },
                    {
                      "LessonId": 92,
                      "Name": "Supervised Learning",
                      "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 461
                    },
                    {
                      "LessonId": 92,
                      "Name": "Naive Bayes Classifier",
                      "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 21,
                      "IsRead": null,
                      "Id": 502
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 92
                }
              ],
              "Id": 38
            }
          ],
          "MigrationVersion": 25,
          "ProductTemplateId": 18,
          "Locked": false,
          "Progress": 0.0,
          "Id": 10
        },
        "Name": "Launch",
        "Color": "#3498db",
        "OrderIndicator": 6,
        "Lessons": [],
        "Id": 39
      },
      "Name": "Extras",
      "Content": "",
      "SandboxUrl": "",
      "OrderIndicator": 18,
      "Slides": [
        {
          "LessonId": 93,
          "Name": "NLP",
          "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 428
        },
        {
          "LessonId": 93,
          "Name": "Objects Detection",
          "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 429
        }
      ],
      "Quizzes": null,
      "Progress": 0.0,
      "Id": 93
    },
    {
      "ModuleId": 37,
      "Module": {
        "SubTrackId": 10,
        "SubTrack": {
          "Level": 1,
          "TrackId": 4,
          "Track": null,
          "Name": "Ready",
          "Modules": [
            {
              "SubTrackId": 10,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [
                {
                  "ModuleId": 38,
                  "Name": "AI fundamentals",
                  "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "Slides": [
                    {
                      "LessonId": 91,
                      "Name": "Goals of AI",
                      "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 415
                    },
                    {
                      "LessonId": 91,
                      "Name": "AI Agent",
                      "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 416
                    },
                    {
                      "LessonId": 91,
                      "Name": "Goal-based agents",
                      "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 417
                    },
                    {
                      "LessonId": 91,
                      "Name": "Modeling",
                      "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 418
                    },
                    {
                      "LessonId": 91,
                      "Name": "Solving problem by searching",
                      "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 419
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 91
                },
                {
                  "ModuleId": 38,
                  "Name": "ML fundamentals",
                  "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "Slides": [
                    {
                      "LessonId": 92,
                      "Name": "Features Engineering",
                      "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 420
                    },
                    {
                      "LessonId": 92,
                      "Name": "K-means",
                      "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 421
                    },
                    {
                      "LessonId": 92,
                      "Name": "KNN",
                      "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 422
                    },
                    {
                      "LessonId": 92,
                      "Name": "Learning Decision Trees",
                      "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 423
                    },
                    {
                      "LessonId": 92,
                      "Name": "Regression",
                      "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "IsRead": null,
                      "Id": 424
                    },
                    {
                      "LessonId": 92,
                      "Name": "Support Vector Machine",
                      "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "IsRead": null,
                      "Id": 425
                    },
                    {
                      "LessonId": 92,
                      "Name": "Neural Networks",
                      "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 24,
                      "IsRead": null,
                      "Id": 426
                    },
                    {
                      "LessonId": 92,
                      "Name": "Mini Project",
                      "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 27,
                      "IsRead": null,
                      "Id": 427
                    },
                    {
                      "LessonId": 92,
                      "Name": "Supervised Learning",
                      "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 461
                    },
                    {
                      "LessonId": 92,
                      "Name": "Naive Bayes Classifier",
                      "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 21,
                      "IsRead": null,
                      "Id": 502
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 92
                }
              ],
              "Id": 38
            },
            {
              "SubTrackId": 10,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [
                {
                  "ModuleId": 39,
                  "Name": "Extras",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "Slides": [
                    {
                      "LessonId": 93,
                      "Name": "NLP",
                      "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 428
                    },
                    {
                      "LessonId": 93,
                      "Name": "Objects Detection",
                      "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 429
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 93
                }
              ],
              "Id": 39
            }
          ],
          "MigrationVersion": 25,
          "ProductTemplateId": 18,
          "Locked": false,
          "Progress": 0.0,
          "Id": 10
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 37,
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [
              {
                "Name": "Python Quiz",
                "OrderIndicator": 0,
                "LessonId": 89,
                "Questions": [
                  {
                    "Content": "Which function to display the content of a variable?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "print()",
                        "IsCorrect": true,
                        "QuestionId": 40,
                        "Answers": null,
                        "Id": 159
                      },
                      {
                        "Content": "display()",
                        "IsCorrect": false,
                        "QuestionId": 40,
                        "Answers": null,
                        "Id": 160
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 40
                  },
                  {
                    "Content": "Which of the following is the exponent operator?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "^",
                        "IsCorrect": false,
                        "QuestionId": 41,
                        "Answers": null,
                        "Id": 161
                      },
                      {
                        "Content": "*",
                        "IsCorrect": false,
                        "QuestionId": 41,
                        "Answers": null,
                        "Id": 162
                      },
                      {
                        "Content": "**",
                        "IsCorrect": true,
                        "QuestionId": 41,
                        "Answers": null,
                        "Id": 163
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 41
                  },
                  {
                    "Content": "What correctly imports the datetime library?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "import datatime",
                        "IsCorrect": true,
                        "QuestionId": 42,
                        "Answers": null,
                        "Id": 164
                      },
                      {
                        "Content": "include datatime",
                        "IsCorrect": false,
                        "QuestionId": 42,
                        "Answers": null,
                        "Id": 165
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 42
                  },
                  {
                    "Content": "What correctly imports the fileinput library?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "import fileinput",
                        "IsCorrect": true,
                        "QuestionId": 43,
                        "Answers": null,
                        "Id": 166
                      },
                      {
                        "Content": "include fileinput",
                        "IsCorrect": false,
                        "QuestionId": 43,
                        "Answers": null,
                        "Id": 167
                      },
                      {
                        "Content": "require fileinput",
                        "IsCorrect": false,
                        "QuestionId": 43,
                        "Answers": null,
                        "Id": 168
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 43
                  },
                  {
                    "Content": "Which is the correct way to write a for loop?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "for i=0; i < 10; i++",
                        "IsCorrect": false,
                        "QuestionId": 44,
                        "Answers": null,
                        "Id": 169
                      },
                      {
                        "Content": "for i from 0 to 10",
                        "IsCorrect": false,
                        "QuestionId": 44,
                        "Answers": null,
                        "Id": 170
                      },
                      {
                        "Content": "for in in range(0,10)",
                        "IsCorrect": true,
                        "QuestionId": 44,
                        "Answers": null,
                        "Id": 171
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 44
                  },
                  {
                    "Content": "What are functions?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "Code that can only be used once in the application",
                        "IsCorrect": false,
                        "QuestionId": 45,
                        "Answers": null,
                        "Id": 172
                      },
                      {
                        "Content": "Reusable pieces of code that can be called on throughout an application",
                        "IsCorrect": true,
                        "QuestionId": 45,
                        "Answers": null,
                        "Id": 173
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 45
                  },
                  {
                    "Content": "What is the right way to read from 2x2 matrix?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "matrix(x,y)",
                        "IsCorrect": false,
                        "QuestionId": 46,
                        "Answers": null,
                        "Id": 174
                      },
                      {
                        "Content": "matrix[x,y]",
                        "IsCorrect": false,
                        "QuestionId": 46,
                        "Answers": null,
                        "Id": 175
                      },
                      {
                        "Content": "matrix[x][y]",
                        "IsCorrect": true,
                        "QuestionId": 46,
                        "Answers": null,
                        "Id": 176
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 46
                  }
                ],
                "QuizResults": null,
                "IsDone": false,
                "Id": 7
              }
            ],
            "Progress": 0.0,
            "Id": 89
          },
          {
            "ModuleId": 37,
            "Name": "Numpy",
            "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "Slides": [
              {
                "LessonId": 90,
                "Name": "Arrays",
                "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 412
              },
              {
                "LessonId": 90,
                "Name": "Math",
                "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 413
              },
              {
                "LessonId": 90,
                "Name": "Indexing",
                "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 414
              },
              {
                "LessonId": 90,
                "Name": "Mini-Project",
                "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 612
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 90
          },
          {
            "ModuleId": 37,
            "Name": "Pandas",
            "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "Slides": [
              {
                "LessonId": 112,
                "Name": "Object Creation",
                "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 507
              },
              {
                "LessonId": 112,
                "Name": "Viewing data",
                "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 508
              },
              {
                "LessonId": 112,
                "Name": "Pivot Table",
                "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 509
              },
              {
                "LessonId": 112,
                "Name": "Case Study",
                "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 822
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 112
          }
        ],
        "Id": 37
      },
      "Name": "Matplotlib",
      "Content": "",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "Slides": [
        {
          "LessonId": 111,
          "Name": "First Plot",
          "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 503
        },
        {
          "LessonId": 111,
          "Name": "Bar Charts",
          "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 504
        },
        {
          "LessonId": 111,
          "Name": "Scatter Plot",
          "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 505
        },
        {
          "LessonId": 111,
          "Name": "Combine Plots",
          "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 12,
          "IsRead": null,
          "Id": 506
        },
        {
          "LessonId": 111,
          "Name": "Histogram",
          "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 9,
          "IsRead": null,
          "Id": 821
        }
      ],
      "Quizzes": null,
      "Progress": 0.0,
      "Id": 111
    },
    {
      "ModuleId": 37,
      "Module": {
        "SubTrackId": 10,
        "SubTrack": {
          "Level": 1,
          "TrackId": 4,
          "Track": null,
          "Name": "Ready",
          "Modules": [
            {
              "SubTrackId": 10,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [
                {
                  "ModuleId": 38,
                  "Name": "AI fundamentals",
                  "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "Slides": [
                    {
                      "LessonId": 91,
                      "Name": "Goals of AI",
                      "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 415
                    },
                    {
                      "LessonId": 91,
                      "Name": "AI Agent",
                      "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 416
                    },
                    {
                      "LessonId": 91,
                      "Name": "Goal-based agents",
                      "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 417
                    },
                    {
                      "LessonId": 91,
                      "Name": "Modeling",
                      "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 418
                    },
                    {
                      "LessonId": 91,
                      "Name": "Solving problem by searching",
                      "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 419
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 91
                },
                {
                  "ModuleId": 38,
                  "Name": "ML fundamentals",
                  "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "Slides": [
                    {
                      "LessonId": 92,
                      "Name": "Features Engineering",
                      "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 420
                    },
                    {
                      "LessonId": 92,
                      "Name": "K-means",
                      "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 421
                    },
                    {
                      "LessonId": 92,
                      "Name": "KNN",
                      "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 422
                    },
                    {
                      "LessonId": 92,
                      "Name": "Learning Decision Trees",
                      "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 423
                    },
                    {
                      "LessonId": 92,
                      "Name": "Regression",
                      "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "IsRead": null,
                      "Id": 424
                    },
                    {
                      "LessonId": 92,
                      "Name": "Support Vector Machine",
                      "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "IsRead": null,
                      "Id": 425
                    },
                    {
                      "LessonId": 92,
                      "Name": "Neural Networks",
                      "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 24,
                      "IsRead": null,
                      "Id": 426
                    },
                    {
                      "LessonId": 92,
                      "Name": "Mini Project",
                      "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 27,
                      "IsRead": null,
                      "Id": 427
                    },
                    {
                      "LessonId": 92,
                      "Name": "Supervised Learning",
                      "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 461
                    },
                    {
                      "LessonId": 92,
                      "Name": "Naive Bayes Classifier",
                      "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 21,
                      "IsRead": null,
                      "Id": 502
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 92
                }
              ],
              "Id": 38
            },
            {
              "SubTrackId": 10,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [
                {
                  "ModuleId": 39,
                  "Name": "Extras",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "Slides": [
                    {
                      "LessonId": 93,
                      "Name": "NLP",
                      "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 428
                    },
                    {
                      "LessonId": 93,
                      "Name": "Objects Detection",
                      "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 429
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 93
                }
              ],
              "Id": 39
            }
          ],
          "MigrationVersion": 25,
          "ProductTemplateId": 18,
          "Locked": false,
          "Progress": 0.0,
          "Id": 10
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 37,
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [
              {
                "Name": "Python Quiz",
                "OrderIndicator": 0,
                "LessonId": 89,
                "Questions": [
                  {
                    "Content": "Which function to display the content of a variable?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "print()",
                        "IsCorrect": true,
                        "QuestionId": 40,
                        "Answers": null,
                        "Id": 159
                      },
                      {
                        "Content": "display()",
                        "IsCorrect": false,
                        "QuestionId": 40,
                        "Answers": null,
                        "Id": 160
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 40
                  },
                  {
                    "Content": "Which of the following is the exponent operator?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "^",
                        "IsCorrect": false,
                        "QuestionId": 41,
                        "Answers": null,
                        "Id": 161
                      },
                      {
                        "Content": "*",
                        "IsCorrect": false,
                        "QuestionId": 41,
                        "Answers": null,
                        "Id": 162
                      },
                      {
                        "Content": "**",
                        "IsCorrect": true,
                        "QuestionId": 41,
                        "Answers": null,
                        "Id": 163
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 41
                  },
                  {
                    "Content": "What correctly imports the datetime library?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "import datatime",
                        "IsCorrect": true,
                        "QuestionId": 42,
                        "Answers": null,
                        "Id": 164
                      },
                      {
                        "Content": "include datatime",
                        "IsCorrect": false,
                        "QuestionId": 42,
                        "Answers": null,
                        "Id": 165
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 42
                  },
                  {
                    "Content": "What correctly imports the fileinput library?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "import fileinput",
                        "IsCorrect": true,
                        "QuestionId": 43,
                        "Answers": null,
                        "Id": 166
                      },
                      {
                        "Content": "include fileinput",
                        "IsCorrect": false,
                        "QuestionId": 43,
                        "Answers": null,
                        "Id": 167
                      },
                      {
                        "Content": "require fileinput",
                        "IsCorrect": false,
                        "QuestionId": 43,
                        "Answers": null,
                        "Id": 168
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 43
                  },
                  {
                    "Content": "Which is the correct way to write a for loop?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "for i=0; i < 10; i++",
                        "IsCorrect": false,
                        "QuestionId": 44,
                        "Answers": null,
                        "Id": 169
                      },
                      {
                        "Content": "for i from 0 to 10",
                        "IsCorrect": false,
                        "QuestionId": 44,
                        "Answers": null,
                        "Id": 170
                      },
                      {
                        "Content": "for in in range(0,10)",
                        "IsCorrect": true,
                        "QuestionId": 44,
                        "Answers": null,
                        "Id": 171
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 44
                  },
                  {
                    "Content": "What are functions?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "Code that can only be used once in the application",
                        "IsCorrect": false,
                        "QuestionId": 45,
                        "Answers": null,
                        "Id": 172
                      },
                      {
                        "Content": "Reusable pieces of code that can be called on throughout an application",
                        "IsCorrect": true,
                        "QuestionId": 45,
                        "Answers": null,
                        "Id": 173
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 45
                  },
                  {
                    "Content": "What is the right way to read from 2x2 matrix?",
                    "QuizId": 7,
                    "Choices": [
                      {
                        "Content": "matrix(x,y)",
                        "IsCorrect": false,
                        "QuestionId": 46,
                        "Answers": null,
                        "Id": 174
                      },
                      {
                        "Content": "matrix[x,y]",
                        "IsCorrect": false,
                        "QuestionId": 46,
                        "Answers": null,
                        "Id": 175
                      },
                      {
                        "Content": "matrix[x][y]",
                        "IsCorrect": true,
                        "QuestionId": 46,
                        "Answers": null,
                        "Id": 176
                      }
                    ],
                    "IsAnswered": false,
                    "IsCorrect": false,
                    "Id": 46
                  }
                ],
                "QuizResults": null,
                "IsDone": false,
                "Id": 7
              }
            ],
            "Progress": 0.0,
            "Id": 89
          },
          {
            "ModuleId": 37,
            "Name": "Numpy",
            "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "Slides": [
              {
                "LessonId": 90,
                "Name": "Arrays",
                "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 412
              },
              {
                "LessonId": 90,
                "Name": "Math",
                "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 413
              },
              {
                "LessonId": 90,
                "Name": "Indexing",
                "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 414
              },
              {
                "LessonId": 90,
                "Name": "Mini-Project",
                "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 612
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 90
          },
          {
            "ModuleId": 37,
            "Name": "Matplotlib",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "Slides": [
              {
                "LessonId": 111,
                "Name": "First Plot",
                "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 503
              },
              {
                "LessonId": 111,
                "Name": "Bar Charts",
                "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 504
              },
              {
                "LessonId": 111,
                "Name": "Scatter Plot",
                "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 505
              },
              {
                "LessonId": 111,
                "Name": "Combine Plots",
                "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 506
              },
              {
                "LessonId": 111,
                "Name": "Histogram",
                "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 821
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 111
          }
        ],
        "Id": 37
      },
      "Name": "Pandas",
      "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 9,
      "Slides": [
        {
          "LessonId": 112,
          "Name": "Object Creation",
          "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 507
        },
        {
          "LessonId": 112,
          "Name": "Viewing data",
          "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 508
        },
        {
          "LessonId": 112,
          "Name": "Pivot Table",
          "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 509
        },
        {
          "LessonId": 112,
          "Name": "Case Study",
          "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 9,
          "IsRead": null,
          "Id": 822
        }
      ],
      "Quizzes": null,
      "Progress": 0.0,
      "Id": 112
    }
  ],
  "Slides": [
    {
      "LessonId": 89,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Python",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 89,
            "Name": "Variables",
            "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 405
          },
          {
            "LessonId": 89,
            "Name": "Conditions",
            "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 406
          },
          {
            "LessonId": 89,
            "Name": "Looping",
            "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 407
          },
          {
            "LessonId": 89,
            "Name": "Lists",
            "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 408
          },
          {
            "LessonId": 89,
            "Name": "Dicts",
            "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 409
          },
          {
            "LessonId": 89,
            "Name": "Function and Classes",
            "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 410
          },
          {
            "LessonId": 89,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 411
          }
        ],
        "Quizzes": [
          {
            "Name": "Python Quiz",
            "OrderIndicator": 0,
            "LessonId": 89,
            "Questions": [
              {
                "Content": "Which function to display the content of a variable?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "print()",
                    "IsCorrect": true,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 159
                  },
                  {
                    "Content": "display()",
                    "IsCorrect": false,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 160
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 40
              },
              {
                "Content": "Which of the following is the exponent operator?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "^",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 161
                  },
                  {
                    "Content": "*",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 162
                  },
                  {
                    "Content": "**",
                    "IsCorrect": true,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 163
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 41
              },
              {
                "Content": "What correctly imports the datetime library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import datatime",
                    "IsCorrect": true,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 164
                  },
                  {
                    "Content": "include datatime",
                    "IsCorrect": false,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 165
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 42
              },
              {
                "Content": "What correctly imports the fileinput library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import fileinput",
                    "IsCorrect": true,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 166
                  },
                  {
                    "Content": "include fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 167
                  },
                  {
                    "Content": "require fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 168
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 43
              },
              {
                "Content": "Which is the correct way to write a for loop?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "for i=0; i < 10; i++",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 169
                  },
                  {
                    "Content": "for i from 0 to 10",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 170
                  },
                  {
                    "Content": "for in in range(0,10)",
                    "IsCorrect": true,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 171
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 44
              },
              {
                "Content": "What are functions?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "Code that can only be used once in the application",
                    "IsCorrect": false,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 172
                  },
                  {
                    "Content": "Reusable pieces of code that can be called on throughout an application",
                    "IsCorrect": true,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 173
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 45
              },
              {
                "Content": "What is the right way to read from 2x2 matrix?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "matrix(x,y)",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 174
                  },
                  {
                    "Content": "matrix[x,y]",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 175
                  },
                  {
                    "Content": "matrix[x][y]",
                    "IsCorrect": true,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 176
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 46
              }
            ],
            "QuizResults": null,
            "IsDone": false,
            "Id": 7
          }
        ],
        "Progress": 0.0,
        "Id": 89
      },
      "Name": "Hello Python",
      "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
      "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 404
    },
    {
      "LessonId": 89,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Python",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 89,
            "Name": "Hello Python",
            "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 404
          },
          {
            "LessonId": 89,
            "Name": "Conditions",
            "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 406
          },
          {
            "LessonId": 89,
            "Name": "Looping",
            "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 407
          },
          {
            "LessonId": 89,
            "Name": "Lists",
            "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 408
          },
          {
            "LessonId": 89,
            "Name": "Dicts",
            "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 409
          },
          {
            "LessonId": 89,
            "Name": "Function and Classes",
            "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 410
          },
          {
            "LessonId": 89,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 411
          }
        ],
        "Quizzes": [
          {
            "Name": "Python Quiz",
            "OrderIndicator": 0,
            "LessonId": 89,
            "Questions": [
              {
                "Content": "Which function to display the content of a variable?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "print()",
                    "IsCorrect": true,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 159
                  },
                  {
                    "Content": "display()",
                    "IsCorrect": false,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 160
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 40
              },
              {
                "Content": "Which of the following is the exponent operator?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "^",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 161
                  },
                  {
                    "Content": "*",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 162
                  },
                  {
                    "Content": "**",
                    "IsCorrect": true,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 163
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 41
              },
              {
                "Content": "What correctly imports the datetime library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import datatime",
                    "IsCorrect": true,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 164
                  },
                  {
                    "Content": "include datatime",
                    "IsCorrect": false,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 165
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 42
              },
              {
                "Content": "What correctly imports the fileinput library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import fileinput",
                    "IsCorrect": true,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 166
                  },
                  {
                    "Content": "include fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 167
                  },
                  {
                    "Content": "require fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 168
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 43
              },
              {
                "Content": "Which is the correct way to write a for loop?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "for i=0; i < 10; i++",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 169
                  },
                  {
                    "Content": "for i from 0 to 10",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 170
                  },
                  {
                    "Content": "for in in range(0,10)",
                    "IsCorrect": true,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 171
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 44
              },
              {
                "Content": "What are functions?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "Code that can only be used once in the application",
                    "IsCorrect": false,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 172
                  },
                  {
                    "Content": "Reusable pieces of code that can be called on throughout an application",
                    "IsCorrect": true,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 173
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 45
              },
              {
                "Content": "What is the right way to read from 2x2 matrix?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "matrix(x,y)",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 174
                  },
                  {
                    "Content": "matrix[x,y]",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 175
                  },
                  {
                    "Content": "matrix[x][y]",
                    "IsCorrect": true,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 176
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 46
              }
            ],
            "QuizResults": null,
            "IsDone": false,
            "Id": 7
          }
        ],
        "Progress": 0.0,
        "Id": 89
      },
      "Name": "Variables",
      "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 405
    },
    {
      "LessonId": 89,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Python",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 89,
            "Name": "Hello Python",
            "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 404
          },
          {
            "LessonId": 89,
            "Name": "Variables",
            "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 405
          },
          {
            "LessonId": 89,
            "Name": "Looping",
            "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 407
          },
          {
            "LessonId": 89,
            "Name": "Lists",
            "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 408
          },
          {
            "LessonId": 89,
            "Name": "Dicts",
            "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 409
          },
          {
            "LessonId": 89,
            "Name": "Function and Classes",
            "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 410
          },
          {
            "LessonId": 89,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 411
          }
        ],
        "Quizzes": [
          {
            "Name": "Python Quiz",
            "OrderIndicator": 0,
            "LessonId": 89,
            "Questions": [
              {
                "Content": "Which function to display the content of a variable?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "print()",
                    "IsCorrect": true,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 159
                  },
                  {
                    "Content": "display()",
                    "IsCorrect": false,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 160
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 40
              },
              {
                "Content": "Which of the following is the exponent operator?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "^",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 161
                  },
                  {
                    "Content": "*",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 162
                  },
                  {
                    "Content": "**",
                    "IsCorrect": true,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 163
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 41
              },
              {
                "Content": "What correctly imports the datetime library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import datatime",
                    "IsCorrect": true,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 164
                  },
                  {
                    "Content": "include datatime",
                    "IsCorrect": false,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 165
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 42
              },
              {
                "Content": "What correctly imports the fileinput library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import fileinput",
                    "IsCorrect": true,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 166
                  },
                  {
                    "Content": "include fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 167
                  },
                  {
                    "Content": "require fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 168
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 43
              },
              {
                "Content": "Which is the correct way to write a for loop?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "for i=0; i < 10; i++",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 169
                  },
                  {
                    "Content": "for i from 0 to 10",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 170
                  },
                  {
                    "Content": "for in in range(0,10)",
                    "IsCorrect": true,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 171
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 44
              },
              {
                "Content": "What are functions?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "Code that can only be used once in the application",
                    "IsCorrect": false,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 172
                  },
                  {
                    "Content": "Reusable pieces of code that can be called on throughout an application",
                    "IsCorrect": true,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 173
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 45
              },
              {
                "Content": "What is the right way to read from 2x2 matrix?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "matrix(x,y)",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 174
                  },
                  {
                    "Content": "matrix[x,y]",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 175
                  },
                  {
                    "Content": "matrix[x][y]",
                    "IsCorrect": true,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 176
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 46
              }
            ],
            "QuizResults": null,
            "IsDone": false,
            "Id": 7
          }
        ],
        "Progress": 0.0,
        "Id": 89
      },
      "Name": "Conditions",
      "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 406
    },
    {
      "LessonId": 89,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Python",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 89,
            "Name": "Hello Python",
            "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 404
          },
          {
            "LessonId": 89,
            "Name": "Variables",
            "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 405
          },
          {
            "LessonId": 89,
            "Name": "Conditions",
            "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 406
          },
          {
            "LessonId": 89,
            "Name": "Lists",
            "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 408
          },
          {
            "LessonId": 89,
            "Name": "Dicts",
            "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 409
          },
          {
            "LessonId": 89,
            "Name": "Function and Classes",
            "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 410
          },
          {
            "LessonId": 89,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 411
          }
        ],
        "Quizzes": [
          {
            "Name": "Python Quiz",
            "OrderIndicator": 0,
            "LessonId": 89,
            "Questions": [
              {
                "Content": "Which function to display the content of a variable?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "print()",
                    "IsCorrect": true,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 159
                  },
                  {
                    "Content": "display()",
                    "IsCorrect": false,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 160
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 40
              },
              {
                "Content": "Which of the following is the exponent operator?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "^",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 161
                  },
                  {
                    "Content": "*",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 162
                  },
                  {
                    "Content": "**",
                    "IsCorrect": true,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 163
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 41
              },
              {
                "Content": "What correctly imports the datetime library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import datatime",
                    "IsCorrect": true,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 164
                  },
                  {
                    "Content": "include datatime",
                    "IsCorrect": false,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 165
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 42
              },
              {
                "Content": "What correctly imports the fileinput library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import fileinput",
                    "IsCorrect": true,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 166
                  },
                  {
                    "Content": "include fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 167
                  },
                  {
                    "Content": "require fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 168
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 43
              },
              {
                "Content": "Which is the correct way to write a for loop?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "for i=0; i < 10; i++",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 169
                  },
                  {
                    "Content": "for i from 0 to 10",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 170
                  },
                  {
                    "Content": "for in in range(0,10)",
                    "IsCorrect": true,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 171
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 44
              },
              {
                "Content": "What are functions?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "Code that can only be used once in the application",
                    "IsCorrect": false,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 172
                  },
                  {
                    "Content": "Reusable pieces of code that can be called on throughout an application",
                    "IsCorrect": true,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 173
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 45
              },
              {
                "Content": "What is the right way to read from 2x2 matrix?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "matrix(x,y)",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 174
                  },
                  {
                    "Content": "matrix[x,y]",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 175
                  },
                  {
                    "Content": "matrix[x][y]",
                    "IsCorrect": true,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 176
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 46
              }
            ],
            "QuizResults": null,
            "IsDone": false,
            "Id": 7
          }
        ],
        "Progress": 0.0,
        "Id": 89
      },
      "Name": "Looping",
      "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
      "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
      "OrderIndicator": 9,
      "IsRead": null,
      "Id": 407
    },
    {
      "LessonId": 89,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Python",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 89,
            "Name": "Hello Python",
            "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 404
          },
          {
            "LessonId": 89,
            "Name": "Variables",
            "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 405
          },
          {
            "LessonId": 89,
            "Name": "Conditions",
            "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 406
          },
          {
            "LessonId": 89,
            "Name": "Looping",
            "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 407
          },
          {
            "LessonId": 89,
            "Name": "Dicts",
            "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 409
          },
          {
            "LessonId": 89,
            "Name": "Function and Classes",
            "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 410
          },
          {
            "LessonId": 89,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 411
          }
        ],
        "Quizzes": [
          {
            "Name": "Python Quiz",
            "OrderIndicator": 0,
            "LessonId": 89,
            "Questions": [
              {
                "Content": "Which function to display the content of a variable?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "print()",
                    "IsCorrect": true,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 159
                  },
                  {
                    "Content": "display()",
                    "IsCorrect": false,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 160
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 40
              },
              {
                "Content": "Which of the following is the exponent operator?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "^",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 161
                  },
                  {
                    "Content": "*",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 162
                  },
                  {
                    "Content": "**",
                    "IsCorrect": true,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 163
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 41
              },
              {
                "Content": "What correctly imports the datetime library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import datatime",
                    "IsCorrect": true,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 164
                  },
                  {
                    "Content": "include datatime",
                    "IsCorrect": false,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 165
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 42
              },
              {
                "Content": "What correctly imports the fileinput library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import fileinput",
                    "IsCorrect": true,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 166
                  },
                  {
                    "Content": "include fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 167
                  },
                  {
                    "Content": "require fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 168
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 43
              },
              {
                "Content": "Which is the correct way to write a for loop?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "for i=0; i < 10; i++",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 169
                  },
                  {
                    "Content": "for i from 0 to 10",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 170
                  },
                  {
                    "Content": "for in in range(0,10)",
                    "IsCorrect": true,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 171
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 44
              },
              {
                "Content": "What are functions?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "Code that can only be used once in the application",
                    "IsCorrect": false,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 172
                  },
                  {
                    "Content": "Reusable pieces of code that can be called on throughout an application",
                    "IsCorrect": true,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 173
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 45
              },
              {
                "Content": "What is the right way to read from 2x2 matrix?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "matrix(x,y)",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 174
                  },
                  {
                    "Content": "matrix[x,y]",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 175
                  },
                  {
                    "Content": "matrix[x][y]",
                    "IsCorrect": true,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 176
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 46
              }
            ],
            "QuizResults": null,
            "IsDone": false,
            "Id": 7
          }
        ],
        "Progress": 0.0,
        "Id": 89
      },
      "Name": "Lists",
      "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 12,
      "IsRead": null,
      "Id": 408
    },
    {
      "LessonId": 89,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Python",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 89,
            "Name": "Hello Python",
            "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 404
          },
          {
            "LessonId": 89,
            "Name": "Variables",
            "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 405
          },
          {
            "LessonId": 89,
            "Name": "Conditions",
            "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 406
          },
          {
            "LessonId": 89,
            "Name": "Looping",
            "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 407
          },
          {
            "LessonId": 89,
            "Name": "Lists",
            "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 408
          },
          {
            "LessonId": 89,
            "Name": "Function and Classes",
            "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 410
          },
          {
            "LessonId": 89,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 411
          }
        ],
        "Quizzes": [
          {
            "Name": "Python Quiz",
            "OrderIndicator": 0,
            "LessonId": 89,
            "Questions": [
              {
                "Content": "Which function to display the content of a variable?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "print()",
                    "IsCorrect": true,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 159
                  },
                  {
                    "Content": "display()",
                    "IsCorrect": false,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 160
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 40
              },
              {
                "Content": "Which of the following is the exponent operator?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "^",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 161
                  },
                  {
                    "Content": "*",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 162
                  },
                  {
                    "Content": "**",
                    "IsCorrect": true,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 163
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 41
              },
              {
                "Content": "What correctly imports the datetime library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import datatime",
                    "IsCorrect": true,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 164
                  },
                  {
                    "Content": "include datatime",
                    "IsCorrect": false,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 165
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 42
              },
              {
                "Content": "What correctly imports the fileinput library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import fileinput",
                    "IsCorrect": true,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 166
                  },
                  {
                    "Content": "include fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 167
                  },
                  {
                    "Content": "require fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 168
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 43
              },
              {
                "Content": "Which is the correct way to write a for loop?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "for i=0; i < 10; i++",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 169
                  },
                  {
                    "Content": "for i from 0 to 10",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 170
                  },
                  {
                    "Content": "for in in range(0,10)",
                    "IsCorrect": true,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 171
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 44
              },
              {
                "Content": "What are functions?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "Code that can only be used once in the application",
                    "IsCorrect": false,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 172
                  },
                  {
                    "Content": "Reusable pieces of code that can be called on throughout an application",
                    "IsCorrect": true,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 173
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 45
              },
              {
                "Content": "What is the right way to read from 2x2 matrix?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "matrix(x,y)",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 174
                  },
                  {
                    "Content": "matrix[x,y]",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 175
                  },
                  {
                    "Content": "matrix[x][y]",
                    "IsCorrect": true,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 176
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 46
              }
            ],
            "QuizResults": null,
            "IsDone": false,
            "Id": 7
          }
        ],
        "Progress": 0.0,
        "Id": 89
      },
      "Name": "Dicts",
      "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
      "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
      "OrderIndicator": 15,
      "IsRead": null,
      "Id": 409
    },
    {
      "LessonId": 89,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Python",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 89,
            "Name": "Hello Python",
            "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 404
          },
          {
            "LessonId": 89,
            "Name": "Variables",
            "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 405
          },
          {
            "LessonId": 89,
            "Name": "Conditions",
            "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 406
          },
          {
            "LessonId": 89,
            "Name": "Looping",
            "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 407
          },
          {
            "LessonId": 89,
            "Name": "Lists",
            "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 408
          },
          {
            "LessonId": 89,
            "Name": "Dicts",
            "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 409
          },
          {
            "LessonId": 89,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 411
          }
        ],
        "Quizzes": [
          {
            "Name": "Python Quiz",
            "OrderIndicator": 0,
            "LessonId": 89,
            "Questions": [
              {
                "Content": "Which function to display the content of a variable?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "print()",
                    "IsCorrect": true,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 159
                  },
                  {
                    "Content": "display()",
                    "IsCorrect": false,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 160
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 40
              },
              {
                "Content": "Which of the following is the exponent operator?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "^",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 161
                  },
                  {
                    "Content": "*",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 162
                  },
                  {
                    "Content": "**",
                    "IsCorrect": true,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 163
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 41
              },
              {
                "Content": "What correctly imports the datetime library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import datatime",
                    "IsCorrect": true,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 164
                  },
                  {
                    "Content": "include datatime",
                    "IsCorrect": false,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 165
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 42
              },
              {
                "Content": "What correctly imports the fileinput library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import fileinput",
                    "IsCorrect": true,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 166
                  },
                  {
                    "Content": "include fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 167
                  },
                  {
                    "Content": "require fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 168
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 43
              },
              {
                "Content": "Which is the correct way to write a for loop?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "for i=0; i < 10; i++",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 169
                  },
                  {
                    "Content": "for i from 0 to 10",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 170
                  },
                  {
                    "Content": "for in in range(0,10)",
                    "IsCorrect": true,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 171
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 44
              },
              {
                "Content": "What are functions?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "Code that can only be used once in the application",
                    "IsCorrect": false,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 172
                  },
                  {
                    "Content": "Reusable pieces of code that can be called on throughout an application",
                    "IsCorrect": true,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 173
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 45
              },
              {
                "Content": "What is the right way to read from 2x2 matrix?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "matrix(x,y)",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 174
                  },
                  {
                    "Content": "matrix[x,y]",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 175
                  },
                  {
                    "Content": "matrix[x][y]",
                    "IsCorrect": true,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 176
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 46
              }
            ],
            "QuizResults": null,
            "IsDone": false,
            "Id": 7
          }
        ],
        "Progress": 0.0,
        "Id": 89
      },
      "Name": "Function and Classes",
      "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
      "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
      "OrderIndicator": 18,
      "IsRead": null,
      "Id": 410
    },
    {
      "LessonId": 89,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Python",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 89,
            "Name": "Hello Python",
            "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 404
          },
          {
            "LessonId": 89,
            "Name": "Variables",
            "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 405
          },
          {
            "LessonId": 89,
            "Name": "Conditions",
            "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 406
          },
          {
            "LessonId": 89,
            "Name": "Looping",
            "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 407
          },
          {
            "LessonId": 89,
            "Name": "Lists",
            "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 408
          },
          {
            "LessonId": 89,
            "Name": "Dicts",
            "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 409
          },
          {
            "LessonId": 89,
            "Name": "Function and Classes",
            "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 410
          }
        ],
        "Quizzes": [
          {
            "Name": "Python Quiz",
            "OrderIndicator": 0,
            "LessonId": 89,
            "Questions": [
              {
                "Content": "Which function to display the content of a variable?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "print()",
                    "IsCorrect": true,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 159
                  },
                  {
                    "Content": "display()",
                    "IsCorrect": false,
                    "QuestionId": 40,
                    "Answers": null,
                    "Id": 160
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 40
              },
              {
                "Content": "Which of the following is the exponent operator?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "^",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 161
                  },
                  {
                    "Content": "*",
                    "IsCorrect": false,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 162
                  },
                  {
                    "Content": "**",
                    "IsCorrect": true,
                    "QuestionId": 41,
                    "Answers": null,
                    "Id": 163
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 41
              },
              {
                "Content": "What correctly imports the datetime library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import datatime",
                    "IsCorrect": true,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 164
                  },
                  {
                    "Content": "include datatime",
                    "IsCorrect": false,
                    "QuestionId": 42,
                    "Answers": null,
                    "Id": 165
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 42
              },
              {
                "Content": "What correctly imports the fileinput library?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "import fileinput",
                    "IsCorrect": true,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 166
                  },
                  {
                    "Content": "include fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 167
                  },
                  {
                    "Content": "require fileinput",
                    "IsCorrect": false,
                    "QuestionId": 43,
                    "Answers": null,
                    "Id": 168
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 43
              },
              {
                "Content": "Which is the correct way to write a for loop?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "for i=0; i < 10; i++",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 169
                  },
                  {
                    "Content": "for i from 0 to 10",
                    "IsCorrect": false,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 170
                  },
                  {
                    "Content": "for in in range(0,10)",
                    "IsCorrect": true,
                    "QuestionId": 44,
                    "Answers": null,
                    "Id": 171
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 44
              },
              {
                "Content": "What are functions?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "Code that can only be used once in the application",
                    "IsCorrect": false,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 172
                  },
                  {
                    "Content": "Reusable pieces of code that can be called on throughout an application",
                    "IsCorrect": true,
                    "QuestionId": 45,
                    "Answers": null,
                    "Id": 173
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 45
              },
              {
                "Content": "What is the right way to read from 2x2 matrix?",
                "QuizId": 7,
                "Choices": [
                  {
                    "Content": "matrix(x,y)",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 174
                  },
                  {
                    "Content": "matrix[x,y]",
                    "IsCorrect": false,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 175
                  },
                  {
                    "Content": "matrix[x][y]",
                    "IsCorrect": true,
                    "QuestionId": 46,
                    "Answers": null,
                    "Id": 176
                  }
                ],
                "IsAnswered": false,
                "IsCorrect": false,
                "Id": 46
              }
            ],
            "QuizResults": null,
            "IsDone": false,
            "Id": 7
          }
        ],
        "Progress": 0.0,
        "Id": 89
      },
      "Name": "Mini Project",
      "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
      "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
      "OrderIndicator": 21,
      "IsRead": null,
      "Id": 411
    },
    {
      "LessonId": 90,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Numpy",
        "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 3,
        "Slides": [
          {
            "LessonId": 90,
            "Name": "Math",
            "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 413
          },
          {
            "LessonId": 90,
            "Name": "Indexing",
            "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 414
          },
          {
            "LessonId": 90,
            "Name": "Mini-Project",
            "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 612
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 90
      },
      "Name": "Arrays",
      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 412
    },
    {
      "LessonId": 90,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Numpy",
        "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 3,
        "Slides": [
          {
            "LessonId": 90,
            "Name": "Arrays",
            "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 412
          },
          {
            "LessonId": 90,
            "Name": "Indexing",
            "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 414
          },
          {
            "LessonId": 90,
            "Name": "Mini-Project",
            "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 612
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 90
      },
      "Name": "Math",
      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 413
    },
    {
      "LessonId": 90,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Numpy",
        "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 3,
        "Slides": [
          {
            "LessonId": 90,
            "Name": "Arrays",
            "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 412
          },
          {
            "LessonId": 90,
            "Name": "Math",
            "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 413
          },
          {
            "LessonId": 90,
            "Name": "Mini-Project",
            "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 612
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 90
      },
      "Name": "Indexing",
      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 414
    },
    {
      "LessonId": 90,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Numpy",
        "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 3,
        "Slides": [
          {
            "LessonId": 90,
            "Name": "Arrays",
            "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 412
          },
          {
            "LessonId": 90,
            "Name": "Math",
            "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 413
          },
          {
            "LessonId": 90,
            "Name": "Indexing",
            "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 414
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 90
      },
      "Name": "Mini-Project",
      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
      "SandboxUrl": "",
      "OrderIndicator": 9,
      "IsRead": null,
      "Id": 612
    },
    {
      "LessonId": 111,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Matplotlib",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 111,
            "Name": "Bar Charts",
            "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 504
          },
          {
            "LessonId": 111,
            "Name": "Scatter Plot",
            "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 505
          },
          {
            "LessonId": 111,
            "Name": "Combine Plots",
            "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 506
          },
          {
            "LessonId": 111,
            "Name": "Histogram",
            "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 821
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 111
      },
      "Name": "First Plot",
      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 503
    },
    {
      "LessonId": 111,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Matplotlib",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 111,
            "Name": "First Plot",
            "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 503
          },
          {
            "LessonId": 111,
            "Name": "Scatter Plot",
            "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 505
          },
          {
            "LessonId": 111,
            "Name": "Combine Plots",
            "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 506
          },
          {
            "LessonId": 111,
            "Name": "Histogram",
            "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 821
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 111
      },
      "Name": "Bar Charts",
      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 504
    },
    {
      "LessonId": 111,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Matplotlib",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 111,
            "Name": "First Plot",
            "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 503
          },
          {
            "LessonId": 111,
            "Name": "Bar Charts",
            "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 504
          },
          {
            "LessonId": 111,
            "Name": "Combine Plots",
            "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 506
          },
          {
            "LessonId": 111,
            "Name": "Histogram",
            "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 821
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 111
      },
      "Name": "Scatter Plot",
      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 505
    },
    {
      "LessonId": 111,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Matplotlib",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 111,
            "Name": "First Plot",
            "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 503
          },
          {
            "LessonId": 111,
            "Name": "Bar Charts",
            "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 504
          },
          {
            "LessonId": 111,
            "Name": "Scatter Plot",
            "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 505
          },
          {
            "LessonId": 111,
            "Name": "Histogram",
            "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 821
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 111
      },
      "Name": "Combine Plots",
      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 12,
      "IsRead": null,
      "Id": 506
    },
    {
      "LessonId": 111,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Matplotlib",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 111,
            "Name": "First Plot",
            "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 503
          },
          {
            "LessonId": 111,
            "Name": "Bar Charts",
            "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 504
          },
          {
            "LessonId": 111,
            "Name": "Scatter Plot",
            "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 505
          },
          {
            "LessonId": 111,
            "Name": "Combine Plots",
            "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 506
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 111
      },
      "Name": "Histogram",
      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 9,
      "IsRead": null,
      "Id": 821
    },
    {
      "LessonId": 112,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            }
          ],
          "Id": 37
        },
        "Name": "Pandas",
        "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 9,
        "Slides": [
          {
            "LessonId": 112,
            "Name": "Viewing data",
            "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 508
          },
          {
            "LessonId": 112,
            "Name": "Pivot Table",
            "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 509
          },
          {
            "LessonId": 112,
            "Name": "Case Study",
            "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 822
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 112
      },
      "Name": "Object Creation",
      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 507
    },
    {
      "LessonId": 112,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            }
          ],
          "Id": 37
        },
        "Name": "Pandas",
        "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 9,
        "Slides": [
          {
            "LessonId": 112,
            "Name": "Object Creation",
            "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 507
          },
          {
            "LessonId": 112,
            "Name": "Pivot Table",
            "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 509
          },
          {
            "LessonId": 112,
            "Name": "Case Study",
            "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 822
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 112
      },
      "Name": "Viewing data",
      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 508
    },
    {
      "LessonId": 112,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            }
          ],
          "Id": 37
        },
        "Name": "Pandas",
        "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 9,
        "Slides": [
          {
            "LessonId": 112,
            "Name": "Object Creation",
            "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 507
          },
          {
            "LessonId": 112,
            "Name": "Viewing data",
            "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 508
          },
          {
            "LessonId": 112,
            "Name": "Case Study",
            "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 822
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 112
      },
      "Name": "Pivot Table",
      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 509
    },
    {
      "LessonId": 112,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Python",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 89,
                  "Name": "Hello Python",
                  "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 404
                },
                {
                  "LessonId": 89,
                  "Name": "Variables",
                  "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 405
                },
                {
                  "LessonId": 89,
                  "Name": "Conditions",
                  "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 406
                },
                {
                  "LessonId": 89,
                  "Name": "Looping",
                  "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 407
                },
                {
                  "LessonId": 89,
                  "Name": "Lists",
                  "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 408
                },
                {
                  "LessonId": 89,
                  "Name": "Dicts",
                  "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 409
                },
                {
                  "LessonId": 89,
                  "Name": "Function and Classes",
                  "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 410
                },
                {
                  "LessonId": 89,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 411
                }
              ],
              "Quizzes": [
                {
                  "Name": "Python Quiz",
                  "OrderIndicator": 0,
                  "LessonId": 89,
                  "Questions": [
                    {
                      "Content": "Which function to display the content of a variable?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "print()",
                          "IsCorrect": true,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 159
                        },
                        {
                          "Content": "display()",
                          "IsCorrect": false,
                          "QuestionId": 40,
                          "Answers": null,
                          "Id": 160
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 40
                    },
                    {
                      "Content": "Which of the following is the exponent operator?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "^",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 161
                        },
                        {
                          "Content": "*",
                          "IsCorrect": false,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 162
                        },
                        {
                          "Content": "**",
                          "IsCorrect": true,
                          "QuestionId": 41,
                          "Answers": null,
                          "Id": 163
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 41
                    },
                    {
                      "Content": "What correctly imports the datetime library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import datatime",
                          "IsCorrect": true,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 164
                        },
                        {
                          "Content": "include datatime",
                          "IsCorrect": false,
                          "QuestionId": 42,
                          "Answers": null,
                          "Id": 165
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 42
                    },
                    {
                      "Content": "What correctly imports the fileinput library?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "import fileinput",
                          "IsCorrect": true,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 166
                        },
                        {
                          "Content": "include fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 167
                        },
                        {
                          "Content": "require fileinput",
                          "IsCorrect": false,
                          "QuestionId": 43,
                          "Answers": null,
                          "Id": 168
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 43
                    },
                    {
                      "Content": "Which is the correct way to write a for loop?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "for i=0; i < 10; i++",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 169
                        },
                        {
                          "Content": "for i from 0 to 10",
                          "IsCorrect": false,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 170
                        },
                        {
                          "Content": "for in in range(0,10)",
                          "IsCorrect": true,
                          "QuestionId": 44,
                          "Answers": null,
                          "Id": 171
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 44
                    },
                    {
                      "Content": "What are functions?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "Code that can only be used once in the application",
                          "IsCorrect": false,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 172
                        },
                        {
                          "Content": "Reusable pieces of code that can be called on throughout an application",
                          "IsCorrect": true,
                          "QuestionId": 45,
                          "Answers": null,
                          "Id": 173
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 45
                    },
                    {
                      "Content": "What is the right way to read from 2x2 matrix?",
                      "QuizId": 7,
                      "Choices": [
                        {
                          "Content": "matrix(x,y)",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 174
                        },
                        {
                          "Content": "matrix[x,y]",
                          "IsCorrect": false,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 175
                        },
                        {
                          "Content": "matrix[x][y]",
                          "IsCorrect": true,
                          "QuestionId": 46,
                          "Answers": null,
                          "Id": 176
                        }
                      ],
                      "IsAnswered": false,
                      "IsCorrect": false,
                      "Id": 46
                    }
                  ],
                  "QuizResults": null,
                  "IsDone": false,
                  "Id": 7
                }
              ],
              "Progress": 0.0,
              "Id": 89
            },
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            }
          ],
          "Id": 37
        },
        "Name": "Pandas",
        "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 9,
        "Slides": [
          {
            "LessonId": 112,
            "Name": "Object Creation",
            "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 507
          },
          {
            "LessonId": 112,
            "Name": "Viewing data",
            "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 508
          },
          {
            "LessonId": 112,
            "Name": "Pivot Table",
            "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 509
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 112
      },
      "Name": "Case Study",
      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 9,
      "IsRead": null,
      "Id": 822
    },
    {
      "LessonId": 91,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "ML fundamentals",
              "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 92,
                  "Name": "Features Engineering",
                  "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 420
                },
                {
                  "LessonId": 92,
                  "Name": "K-means",
                  "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 421
                },
                {
                  "LessonId": 92,
                  "Name": "KNN",
                  "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 422
                },
                {
                  "LessonId": 92,
                  "Name": "Learning Decision Trees",
                  "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 423
                },
                {
                  "LessonId": 92,
                  "Name": "Regression",
                  "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 424
                },
                {
                  "LessonId": 92,
                  "Name": "Support Vector Machine",
                  "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 425
                },
                {
                  "LessonId": 92,
                  "Name": "Neural Networks",
                  "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 24,
                  "IsRead": null,
                  "Id": 426
                },
                {
                  "LessonId": 92,
                  "Name": "Mini Project",
                  "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 27,
                  "IsRead": null,
                  "Id": 427
                },
                {
                  "LessonId": 92,
                  "Name": "Supervised Learning",
                  "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 461
                },
                {
                  "LessonId": 92,
                  "Name": "Naive Bayes Classifier",
                  "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 502
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 92
            }
          ],
          "Id": 38
        },
        "Name": "AI fundamentals",
        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 12,
        "Slides": [
          {
            "LessonId": 91,
            "Name": "AI Agent",
            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 416
          },
          {
            "LessonId": 91,
            "Name": "Goal-based agents",
            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 417
          },
          {
            "LessonId": 91,
            "Name": "Modeling",
            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 418
          },
          {
            "LessonId": 91,
            "Name": "Solving problem by searching",
            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 419
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 91
      },
      "Name": "Goals of AI",
      "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 415
    },
    {
      "LessonId": 91,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "ML fundamentals",
              "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 92,
                  "Name": "Features Engineering",
                  "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 420
                },
                {
                  "LessonId": 92,
                  "Name": "K-means",
                  "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 421
                },
                {
                  "LessonId": 92,
                  "Name": "KNN",
                  "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 422
                },
                {
                  "LessonId": 92,
                  "Name": "Learning Decision Trees",
                  "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 423
                },
                {
                  "LessonId": 92,
                  "Name": "Regression",
                  "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 424
                },
                {
                  "LessonId": 92,
                  "Name": "Support Vector Machine",
                  "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 425
                },
                {
                  "LessonId": 92,
                  "Name": "Neural Networks",
                  "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 24,
                  "IsRead": null,
                  "Id": 426
                },
                {
                  "LessonId": 92,
                  "Name": "Mini Project",
                  "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 27,
                  "IsRead": null,
                  "Id": 427
                },
                {
                  "LessonId": 92,
                  "Name": "Supervised Learning",
                  "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 461
                },
                {
                  "LessonId": 92,
                  "Name": "Naive Bayes Classifier",
                  "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 502
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 92
            }
          ],
          "Id": 38
        },
        "Name": "AI fundamentals",
        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 12,
        "Slides": [
          {
            "LessonId": 91,
            "Name": "Goals of AI",
            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 415
          },
          {
            "LessonId": 91,
            "Name": "Goal-based agents",
            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 417
          },
          {
            "LessonId": 91,
            "Name": "Modeling",
            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 418
          },
          {
            "LessonId": 91,
            "Name": "Solving problem by searching",
            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 419
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 91
      },
      "Name": "AI Agent",
      "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 416
    },
    {
      "LessonId": 91,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "ML fundamentals",
              "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 92,
                  "Name": "Features Engineering",
                  "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 420
                },
                {
                  "LessonId": 92,
                  "Name": "K-means",
                  "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 421
                },
                {
                  "LessonId": 92,
                  "Name": "KNN",
                  "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 422
                },
                {
                  "LessonId": 92,
                  "Name": "Learning Decision Trees",
                  "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 423
                },
                {
                  "LessonId": 92,
                  "Name": "Regression",
                  "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 424
                },
                {
                  "LessonId": 92,
                  "Name": "Support Vector Machine",
                  "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 425
                },
                {
                  "LessonId": 92,
                  "Name": "Neural Networks",
                  "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 24,
                  "IsRead": null,
                  "Id": 426
                },
                {
                  "LessonId": 92,
                  "Name": "Mini Project",
                  "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 27,
                  "IsRead": null,
                  "Id": 427
                },
                {
                  "LessonId": 92,
                  "Name": "Supervised Learning",
                  "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 461
                },
                {
                  "LessonId": 92,
                  "Name": "Naive Bayes Classifier",
                  "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 502
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 92
            }
          ],
          "Id": 38
        },
        "Name": "AI fundamentals",
        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 12,
        "Slides": [
          {
            "LessonId": 91,
            "Name": "Goals of AI",
            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 415
          },
          {
            "LessonId": 91,
            "Name": "AI Agent",
            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 416
          },
          {
            "LessonId": 91,
            "Name": "Modeling",
            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 418
          },
          {
            "LessonId": 91,
            "Name": "Solving problem by searching",
            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 419
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 91
      },
      "Name": "Goal-based agents",
      "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 417
    },
    {
      "LessonId": 91,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "ML fundamentals",
              "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 92,
                  "Name": "Features Engineering",
                  "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 420
                },
                {
                  "LessonId": 92,
                  "Name": "K-means",
                  "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 421
                },
                {
                  "LessonId": 92,
                  "Name": "KNN",
                  "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 422
                },
                {
                  "LessonId": 92,
                  "Name": "Learning Decision Trees",
                  "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 423
                },
                {
                  "LessonId": 92,
                  "Name": "Regression",
                  "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 424
                },
                {
                  "LessonId": 92,
                  "Name": "Support Vector Machine",
                  "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 425
                },
                {
                  "LessonId": 92,
                  "Name": "Neural Networks",
                  "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 24,
                  "IsRead": null,
                  "Id": 426
                },
                {
                  "LessonId": 92,
                  "Name": "Mini Project",
                  "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 27,
                  "IsRead": null,
                  "Id": 427
                },
                {
                  "LessonId": 92,
                  "Name": "Supervised Learning",
                  "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 461
                },
                {
                  "LessonId": 92,
                  "Name": "Naive Bayes Classifier",
                  "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 502
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 92
            }
          ],
          "Id": 38
        },
        "Name": "AI fundamentals",
        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 12,
        "Slides": [
          {
            "LessonId": 91,
            "Name": "Goals of AI",
            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 415
          },
          {
            "LessonId": 91,
            "Name": "AI Agent",
            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 416
          },
          {
            "LessonId": 91,
            "Name": "Goal-based agents",
            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 417
          },
          {
            "LessonId": 91,
            "Name": "Solving problem by searching",
            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 419
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 91
      },
      "Name": "Modeling",
      "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 9,
      "IsRead": null,
      "Id": 418
    },
    {
      "LessonId": 91,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "ML fundamentals",
              "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 92,
                  "Name": "Features Engineering",
                  "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 420
                },
                {
                  "LessonId": 92,
                  "Name": "K-means",
                  "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 421
                },
                {
                  "LessonId": 92,
                  "Name": "KNN",
                  "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 422
                },
                {
                  "LessonId": 92,
                  "Name": "Learning Decision Trees",
                  "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 423
                },
                {
                  "LessonId": 92,
                  "Name": "Regression",
                  "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 424
                },
                {
                  "LessonId": 92,
                  "Name": "Support Vector Machine",
                  "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 425
                },
                {
                  "LessonId": 92,
                  "Name": "Neural Networks",
                  "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 24,
                  "IsRead": null,
                  "Id": 426
                },
                {
                  "LessonId": 92,
                  "Name": "Mini Project",
                  "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 27,
                  "IsRead": null,
                  "Id": 427
                },
                {
                  "LessonId": 92,
                  "Name": "Supervised Learning",
                  "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 461
                },
                {
                  "LessonId": 92,
                  "Name": "Naive Bayes Classifier",
                  "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 21,
                  "IsRead": null,
                  "Id": 502
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 92
            }
          ],
          "Id": 38
        },
        "Name": "AI fundamentals",
        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 12,
        "Slides": [
          {
            "LessonId": 91,
            "Name": "Goals of AI",
            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 415
          },
          {
            "LessonId": 91,
            "Name": "AI Agent",
            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 416
          },
          {
            "LessonId": 91,
            "Name": "Goal-based agents",
            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 417
          },
          {
            "LessonId": 91,
            "Name": "Modeling",
            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 418
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 91
      },
      "Name": "Solving problem by searching",
      "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 12,
      "IsRead": null,
      "Id": 419
    },
    {
      "LessonId": 92,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "AI fundamentals",
              "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 91,
                  "Name": "Goals of AI",
                  "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 415
                },
                {
                  "LessonId": 91,
                  "Name": "AI Agent",
                  "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 416
                },
                {
                  "LessonId": 91,
                  "Name": "Goal-based agents",
                  "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 417
                },
                {
                  "LessonId": 91,
                  "Name": "Modeling",
                  "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 418
                },
                {
                  "LessonId": 91,
                  "Name": "Solving problem by searching",
                  "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 419
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 91
            }
          ],
          "Id": 38
        },
        "Name": "ML fundamentals",
        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [
          {
            "LessonId": 92,
            "Name": "K-means",
            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 421
          },
          {
            "LessonId": 92,
            "Name": "KNN",
            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 422
          },
          {
            "LessonId": 92,
            "Name": "Learning Decision Trees",
            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 423
          },
          {
            "LessonId": 92,
            "Name": "Regression",
            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 424
          },
          {
            "LessonId": 92,
            "Name": "Support Vector Machine",
            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 425
          },
          {
            "LessonId": 92,
            "Name": "Neural Networks",
            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 24,
            "IsRead": null,
            "Id": 426
          },
          {
            "LessonId": 92,
            "Name": "Mini Project",
            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 27,
            "IsRead": null,
            "Id": 427
          },
          {
            "LessonId": 92,
            "Name": "Supervised Learning",
            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 461
          },
          {
            "LessonId": 92,
            "Name": "Naive Bayes Classifier",
            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 502
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 92
      },
      "Name": "Features Engineering",
      "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 420
    },
    {
      "LessonId": 92,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "AI fundamentals",
              "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 91,
                  "Name": "Goals of AI",
                  "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 415
                },
                {
                  "LessonId": 91,
                  "Name": "AI Agent",
                  "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 416
                },
                {
                  "LessonId": 91,
                  "Name": "Goal-based agents",
                  "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 417
                },
                {
                  "LessonId": 91,
                  "Name": "Modeling",
                  "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 418
                },
                {
                  "LessonId": 91,
                  "Name": "Solving problem by searching",
                  "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 419
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 91
            }
          ],
          "Id": 38
        },
        "Name": "ML fundamentals",
        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [
          {
            "LessonId": 92,
            "Name": "Features Engineering",
            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 420
          },
          {
            "LessonId": 92,
            "Name": "KNN",
            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 422
          },
          {
            "LessonId": 92,
            "Name": "Learning Decision Trees",
            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 423
          },
          {
            "LessonId": 92,
            "Name": "Regression",
            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 424
          },
          {
            "LessonId": 92,
            "Name": "Support Vector Machine",
            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 425
          },
          {
            "LessonId": 92,
            "Name": "Neural Networks",
            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 24,
            "IsRead": null,
            "Id": 426
          },
          {
            "LessonId": 92,
            "Name": "Mini Project",
            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 27,
            "IsRead": null,
            "Id": 427
          },
          {
            "LessonId": 92,
            "Name": "Supervised Learning",
            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 461
          },
          {
            "LessonId": 92,
            "Name": "Naive Bayes Classifier",
            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 502
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 92
      },
      "Name": "K-means",
      "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 421
    },
    {
      "LessonId": 92,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "AI fundamentals",
              "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 91,
                  "Name": "Goals of AI",
                  "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 415
                },
                {
                  "LessonId": 91,
                  "Name": "AI Agent",
                  "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 416
                },
                {
                  "LessonId": 91,
                  "Name": "Goal-based agents",
                  "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 417
                },
                {
                  "LessonId": 91,
                  "Name": "Modeling",
                  "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 418
                },
                {
                  "LessonId": 91,
                  "Name": "Solving problem by searching",
                  "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 419
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 91
            }
          ],
          "Id": 38
        },
        "Name": "ML fundamentals",
        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [
          {
            "LessonId": 92,
            "Name": "Features Engineering",
            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 420
          },
          {
            "LessonId": 92,
            "Name": "K-means",
            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 421
          },
          {
            "LessonId": 92,
            "Name": "Learning Decision Trees",
            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 423
          },
          {
            "LessonId": 92,
            "Name": "Regression",
            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 424
          },
          {
            "LessonId": 92,
            "Name": "Support Vector Machine",
            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 425
          },
          {
            "LessonId": 92,
            "Name": "Neural Networks",
            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 24,
            "IsRead": null,
            "Id": 426
          },
          {
            "LessonId": 92,
            "Name": "Mini Project",
            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 27,
            "IsRead": null,
            "Id": 427
          },
          {
            "LessonId": 92,
            "Name": "Supervised Learning",
            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 461
          },
          {
            "LessonId": 92,
            "Name": "Naive Bayes Classifier",
            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 502
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 92
      },
      "Name": "KNN",
      "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 9,
      "IsRead": null,
      "Id": 422
    },
    {
      "LessonId": 92,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "AI fundamentals",
              "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 91,
                  "Name": "Goals of AI",
                  "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 415
                },
                {
                  "LessonId": 91,
                  "Name": "AI Agent",
                  "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 416
                },
                {
                  "LessonId": 91,
                  "Name": "Goal-based agents",
                  "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 417
                },
                {
                  "LessonId": 91,
                  "Name": "Modeling",
                  "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 418
                },
                {
                  "LessonId": 91,
                  "Name": "Solving problem by searching",
                  "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 419
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 91
            }
          ],
          "Id": 38
        },
        "Name": "ML fundamentals",
        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [
          {
            "LessonId": 92,
            "Name": "Features Engineering",
            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 420
          },
          {
            "LessonId": 92,
            "Name": "K-means",
            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 421
          },
          {
            "LessonId": 92,
            "Name": "KNN",
            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 422
          },
          {
            "LessonId": 92,
            "Name": "Regression",
            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 424
          },
          {
            "LessonId": 92,
            "Name": "Support Vector Machine",
            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 425
          },
          {
            "LessonId": 92,
            "Name": "Neural Networks",
            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 24,
            "IsRead": null,
            "Id": 426
          },
          {
            "LessonId": 92,
            "Name": "Mini Project",
            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 27,
            "IsRead": null,
            "Id": 427
          },
          {
            "LessonId": 92,
            "Name": "Supervised Learning",
            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 461
          },
          {
            "LessonId": 92,
            "Name": "Naive Bayes Classifier",
            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 502
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 92
      },
      "Name": "Learning Decision Trees",
      "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
      "SandboxUrl": "",
      "OrderIndicator": 12,
      "IsRead": null,
      "Id": 423
    },
    {
      "LessonId": 92,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "AI fundamentals",
              "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 91,
                  "Name": "Goals of AI",
                  "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 415
                },
                {
                  "LessonId": 91,
                  "Name": "AI Agent",
                  "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 416
                },
                {
                  "LessonId": 91,
                  "Name": "Goal-based agents",
                  "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 417
                },
                {
                  "LessonId": 91,
                  "Name": "Modeling",
                  "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 418
                },
                {
                  "LessonId": 91,
                  "Name": "Solving problem by searching",
                  "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 419
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 91
            }
          ],
          "Id": 38
        },
        "Name": "ML fundamentals",
        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [
          {
            "LessonId": 92,
            "Name": "Features Engineering",
            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 420
          },
          {
            "LessonId": 92,
            "Name": "K-means",
            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 421
          },
          {
            "LessonId": 92,
            "Name": "KNN",
            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 422
          },
          {
            "LessonId": 92,
            "Name": "Learning Decision Trees",
            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 423
          },
          {
            "LessonId": 92,
            "Name": "Support Vector Machine",
            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 425
          },
          {
            "LessonId": 92,
            "Name": "Neural Networks",
            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 24,
            "IsRead": null,
            "Id": 426
          },
          {
            "LessonId": 92,
            "Name": "Mini Project",
            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 27,
            "IsRead": null,
            "Id": 427
          },
          {
            "LessonId": 92,
            "Name": "Supervised Learning",
            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 461
          },
          {
            "LessonId": 92,
            "Name": "Naive Bayes Classifier",
            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 502
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 92
      },
      "Name": "Regression",
      "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 15,
      "IsRead": null,
      "Id": 424
    },
    {
      "LessonId": 92,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "AI fundamentals",
              "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 91,
                  "Name": "Goals of AI",
                  "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 415
                },
                {
                  "LessonId": 91,
                  "Name": "AI Agent",
                  "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 416
                },
                {
                  "LessonId": 91,
                  "Name": "Goal-based agents",
                  "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 417
                },
                {
                  "LessonId": 91,
                  "Name": "Modeling",
                  "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 418
                },
                {
                  "LessonId": 91,
                  "Name": "Solving problem by searching",
                  "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 419
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 91
            }
          ],
          "Id": 38
        },
        "Name": "ML fundamentals",
        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [
          {
            "LessonId": 92,
            "Name": "Features Engineering",
            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 420
          },
          {
            "LessonId": 92,
            "Name": "K-means",
            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 421
          },
          {
            "LessonId": 92,
            "Name": "KNN",
            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 422
          },
          {
            "LessonId": 92,
            "Name": "Learning Decision Trees",
            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 423
          },
          {
            "LessonId": 92,
            "Name": "Regression",
            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 424
          },
          {
            "LessonId": 92,
            "Name": "Neural Networks",
            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 24,
            "IsRead": null,
            "Id": 426
          },
          {
            "LessonId": 92,
            "Name": "Mini Project",
            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 27,
            "IsRead": null,
            "Id": 427
          },
          {
            "LessonId": 92,
            "Name": "Supervised Learning",
            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 461
          },
          {
            "LessonId": 92,
            "Name": "Naive Bayes Classifier",
            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 502
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 92
      },
      "Name": "Support Vector Machine",
      "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 18,
      "IsRead": null,
      "Id": 425
    },
    {
      "LessonId": 92,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "AI fundamentals",
              "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 91,
                  "Name": "Goals of AI",
                  "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 415
                },
                {
                  "LessonId": 91,
                  "Name": "AI Agent",
                  "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 416
                },
                {
                  "LessonId": 91,
                  "Name": "Goal-based agents",
                  "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 417
                },
                {
                  "LessonId": 91,
                  "Name": "Modeling",
                  "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 418
                },
                {
                  "LessonId": 91,
                  "Name": "Solving problem by searching",
                  "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 419
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 91
            }
          ],
          "Id": 38
        },
        "Name": "ML fundamentals",
        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [
          {
            "LessonId": 92,
            "Name": "Features Engineering",
            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 420
          },
          {
            "LessonId": 92,
            "Name": "K-means",
            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 421
          },
          {
            "LessonId": 92,
            "Name": "KNN",
            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 422
          },
          {
            "LessonId": 92,
            "Name": "Learning Decision Trees",
            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 423
          },
          {
            "LessonId": 92,
            "Name": "Regression",
            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 424
          },
          {
            "LessonId": 92,
            "Name": "Support Vector Machine",
            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 425
          },
          {
            "LessonId": 92,
            "Name": "Mini Project",
            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 27,
            "IsRead": null,
            "Id": 427
          },
          {
            "LessonId": 92,
            "Name": "Supervised Learning",
            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 461
          },
          {
            "LessonId": 92,
            "Name": "Naive Bayes Classifier",
            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 502
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 92
      },
      "Name": "Neural Networks",
      "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 24,
      "IsRead": null,
      "Id": 426
    },
    {
      "LessonId": 92,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "AI fundamentals",
              "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 91,
                  "Name": "Goals of AI",
                  "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 415
                },
                {
                  "LessonId": 91,
                  "Name": "AI Agent",
                  "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 416
                },
                {
                  "LessonId": 91,
                  "Name": "Goal-based agents",
                  "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 417
                },
                {
                  "LessonId": 91,
                  "Name": "Modeling",
                  "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 418
                },
                {
                  "LessonId": 91,
                  "Name": "Solving problem by searching",
                  "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 419
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 91
            }
          ],
          "Id": 38
        },
        "Name": "ML fundamentals",
        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [
          {
            "LessonId": 92,
            "Name": "Features Engineering",
            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 420
          },
          {
            "LessonId": 92,
            "Name": "K-means",
            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 421
          },
          {
            "LessonId": 92,
            "Name": "KNN",
            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 422
          },
          {
            "LessonId": 92,
            "Name": "Learning Decision Trees",
            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 423
          },
          {
            "LessonId": 92,
            "Name": "Regression",
            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 424
          },
          {
            "LessonId": 92,
            "Name": "Support Vector Machine",
            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 425
          },
          {
            "LessonId": 92,
            "Name": "Neural Networks",
            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 24,
            "IsRead": null,
            "Id": 426
          },
          {
            "LessonId": 92,
            "Name": "Supervised Learning",
            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 461
          },
          {
            "LessonId": 92,
            "Name": "Naive Bayes Classifier",
            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 502
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 92
      },
      "Name": "Mini Project",
      "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 27,
      "IsRead": null,
      "Id": 427
    },
    {
      "LessonId": 92,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "AI fundamentals",
              "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 91,
                  "Name": "Goals of AI",
                  "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 415
                },
                {
                  "LessonId": 91,
                  "Name": "AI Agent",
                  "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 416
                },
                {
                  "LessonId": 91,
                  "Name": "Goal-based agents",
                  "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 417
                },
                {
                  "LessonId": 91,
                  "Name": "Modeling",
                  "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 418
                },
                {
                  "LessonId": 91,
                  "Name": "Solving problem by searching",
                  "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 419
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 91
            }
          ],
          "Id": 38
        },
        "Name": "ML fundamentals",
        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [
          {
            "LessonId": 92,
            "Name": "Features Engineering",
            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 420
          },
          {
            "LessonId": 92,
            "Name": "K-means",
            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 421
          },
          {
            "LessonId": 92,
            "Name": "KNN",
            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 422
          },
          {
            "LessonId": 92,
            "Name": "Learning Decision Trees",
            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 423
          },
          {
            "LessonId": 92,
            "Name": "Regression",
            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 424
          },
          {
            "LessonId": 92,
            "Name": "Support Vector Machine",
            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 425
          },
          {
            "LessonId": 92,
            "Name": "Neural Networks",
            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 24,
            "IsRead": null,
            "Id": 426
          },
          {
            "LessonId": 92,
            "Name": "Mini Project",
            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 27,
            "IsRead": null,
            "Id": 427
          },
          {
            "LessonId": 92,
            "Name": "Naive Bayes Classifier",
            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 502
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 92
      },
      "Name": "Supervised Learning",
      "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 461
    },
    {
      "LessonId": 92,
      "Lesson": {
        "ModuleId": 38,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Power Up",
          "Color": "#2ecc71",
          "OrderIndicator": 3,
          "Lessons": [
            {
              "ModuleId": 38,
              "Name": "AI fundamentals",
              "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 91,
                  "Name": "Goals of AI",
                  "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 415
                },
                {
                  "LessonId": 91,
                  "Name": "AI Agent",
                  "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 416
                },
                {
                  "LessonId": 91,
                  "Name": "Goal-based agents",
                  "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 417
                },
                {
                  "LessonId": 91,
                  "Name": "Modeling",
                  "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 418
                },
                {
                  "LessonId": 91,
                  "Name": "Solving problem by searching",
                  "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 419
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 91
            }
          ],
          "Id": 38
        },
        "Name": "ML fundamentals",
        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [
          {
            "LessonId": 92,
            "Name": "Features Engineering",
            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 420
          },
          {
            "LessonId": 92,
            "Name": "K-means",
            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 421
          },
          {
            "LessonId": 92,
            "Name": "KNN",
            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 422
          },
          {
            "LessonId": 92,
            "Name": "Learning Decision Trees",
            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 423
          },
          {
            "LessonId": 92,
            "Name": "Regression",
            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 424
          },
          {
            "LessonId": 92,
            "Name": "Support Vector Machine",
            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 425
          },
          {
            "LessonId": 92,
            "Name": "Neural Networks",
            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 24,
            "IsRead": null,
            "Id": 426
          },
          {
            "LessonId": 92,
            "Name": "Mini Project",
            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 27,
            "IsRead": null,
            "Id": 427
          },
          {
            "LessonId": 92,
            "Name": "Supervised Learning",
            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 461
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 92
      },
      "Name": "Naive Bayes Classifier",
      "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 21,
      "IsRead": null,
      "Id": 502
    },
    {
      "LessonId": 93,
      "Lesson": {
        "ModuleId": 39,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Launch",
          "Color": "#3498db",
          "OrderIndicator": 6,
          "Lessons": [],
          "Id": 39
        },
        "Name": "Extras",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 18,
        "Slides": [
          {
            "LessonId": 93,
            "Name": "Objects Detection",
            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 429
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 93
      },
      "Name": "NLP",
      "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 428
    },
    {
      "LessonId": 93,
      "Lesson": {
        "ModuleId": 39,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Kickstart",
                "Color": "#1abc9c",
                "OrderIndicator": 0,
                "Lessons": [
                  {
                    "ModuleId": 37,
                    "Name": "Python",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "Slides": [
                      {
                        "LessonId": 89,
                        "Name": "Hello Python",
                        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 404
                      },
                      {
                        "LessonId": 89,
                        "Name": "Variables",
                        "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 405
                      },
                      {
                        "LessonId": 89,
                        "Name": "Conditions",
                        "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 406
                      },
                      {
                        "LessonId": 89,
                        "Name": "Looping",
                        "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 407
                      },
                      {
                        "LessonId": 89,
                        "Name": "Lists",
                        "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 408
                      },
                      {
                        "LessonId": 89,
                        "Name": "Dicts",
                        "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 409
                      },
                      {
                        "LessonId": 89,
                        "Name": "Function and Classes",
                        "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 410
                      },
                      {
                        "LessonId": 89,
                        "Name": "Mini Project",
                        "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 411
                      }
                    ],
                    "Quizzes": [
                      {
                        "Name": "Python Quiz",
                        "OrderIndicator": 0,
                        "LessonId": 89,
                        "Questions": [
                          {
                            "Content": "Which function to display the content of a variable?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "print()",
                                "IsCorrect": true,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 159
                              },
                              {
                                "Content": "display()",
                                "IsCorrect": false,
                                "QuestionId": 40,
                                "Answers": null,
                                "Id": 160
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 40
                          },
                          {
                            "Content": "Which of the following is the exponent operator?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "^",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 161
                              },
                              {
                                "Content": "*",
                                "IsCorrect": false,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 162
                              },
                              {
                                "Content": "**",
                                "IsCorrect": true,
                                "QuestionId": 41,
                                "Answers": null,
                                "Id": 163
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 41
                          },
                          {
                            "Content": "What correctly imports the datetime library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import datatime",
                                "IsCorrect": true,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 164
                              },
                              {
                                "Content": "include datatime",
                                "IsCorrect": false,
                                "QuestionId": 42,
                                "Answers": null,
                                "Id": 165
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 42
                          },
                          {
                            "Content": "What correctly imports the fileinput library?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "import fileinput",
                                "IsCorrect": true,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 166
                              },
                              {
                                "Content": "include fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 167
                              },
                              {
                                "Content": "require fileinput",
                                "IsCorrect": false,
                                "QuestionId": 43,
                                "Answers": null,
                                "Id": 168
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 43
                          },
                          {
                            "Content": "Which is the correct way to write a for loop?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "for i=0; i < 10; i++",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 169
                              },
                              {
                                "Content": "for i from 0 to 10",
                                "IsCorrect": false,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 170
                              },
                              {
                                "Content": "for in in range(0,10)",
                                "IsCorrect": true,
                                "QuestionId": 44,
                                "Answers": null,
                                "Id": 171
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 44
                          },
                          {
                            "Content": "What are functions?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "Code that can only be used once in the application",
                                "IsCorrect": false,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 172
                              },
                              {
                                "Content": "Reusable pieces of code that can be called on throughout an application",
                                "IsCorrect": true,
                                "QuestionId": 45,
                                "Answers": null,
                                "Id": 173
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 45
                          },
                          {
                            "Content": "What is the right way to read from 2x2 matrix?",
                            "QuizId": 7,
                            "Choices": [
                              {
                                "Content": "matrix(x,y)",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 174
                              },
                              {
                                "Content": "matrix[x,y]",
                                "IsCorrect": false,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 175
                              },
                              {
                                "Content": "matrix[x][y]",
                                "IsCorrect": true,
                                "QuestionId": 46,
                                "Answers": null,
                                "Id": 176
                              }
                            ],
                            "IsAnswered": false,
                            "IsCorrect": false,
                            "Id": 46
                          }
                        ],
                        "QuizResults": null,
                        "IsDone": false,
                        "Id": 7
                      }
                    ],
                    "Progress": 0.0,
                    "Id": 89
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Numpy",
                    "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "Slides": [
                      {
                        "LessonId": 90,
                        "Name": "Arrays",
                        "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 412
                      },
                      {
                        "LessonId": 90,
                        "Name": "Math",
                        "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 413
                      },
                      {
                        "LessonId": 90,
                        "Name": "Indexing",
                        "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                        "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 414
                      },
                      {
                        "LessonId": 90,
                        "Name": "Mini-Project",
                        "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 612
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 90
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Matplotlib",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "Slides": [
                      {
                        "LessonId": 111,
                        "Name": "First Plot",
                        "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 503
                      },
                      {
                        "LessonId": 111,
                        "Name": "Bar Charts",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 504
                      },
                      {
                        "LessonId": 111,
                        "Name": "Scatter Plot",
                        "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 505
                      },
                      {
                        "LessonId": 111,
                        "Name": "Combine Plots",
                        "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 506
                      },
                      {
                        "LessonId": 111,
                        "Name": "Histogram",
                        "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 821
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 111
                  },
                  {
                    "ModuleId": 37,
                    "Name": "Pandas",
                    "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "Slides": [
                      {
                        "LessonId": 112,
                        "Name": "Object Creation",
                        "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 507
                      },
                      {
                        "LessonId": 112,
                        "Name": "Viewing data",
                        "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 508
                      },
                      {
                        "LessonId": 112,
                        "Name": "Pivot Table",
                        "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 509
                      },
                      {
                        "LessonId": 112,
                        "Name": "Case Study",
                        "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 822
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 112
                  }
                ],
                "Id": 37
              },
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Launch",
          "Color": "#3498db",
          "OrderIndicator": 6,
          "Lessons": [],
          "Id": 39
        },
        "Name": "Extras",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 18,
        "Slides": [
          {
            "LessonId": 93,
            "Name": "NLP",
            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 428
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 93
      },
      "Name": "Objects Detection",
      "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 429
    }
  ],
  "Modules": [
    {
      "SubTrackId": 10,
      "SubTrack": {
        "Level": 1,
        "TrackId": 4,
        "Track": null,
        "Name": "Ready",
        "Modules": [
          {
            "SubTrackId": 10,
            "Name": "Power Up",
            "Color": "#2ecc71",
            "OrderIndicator": 3,
            "Lessons": [
              {
                "ModuleId": 38,
                "Name": "AI fundamentals",
                "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "Slides": [
                  {
                    "LessonId": 91,
                    "Name": "Goals of AI",
                    "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 415
                  },
                  {
                    "LessonId": 91,
                    "Name": "AI Agent",
                    "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 416
                  },
                  {
                    "LessonId": 91,
                    "Name": "Goal-based agents",
                    "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 417
                  },
                  {
                    "LessonId": 91,
                    "Name": "Modeling",
                    "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 418
                  },
                  {
                    "LessonId": 91,
                    "Name": "Solving problem by searching",
                    "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 419
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 91
              },
              {
                "ModuleId": 38,
                "Name": "ML fundamentals",
                "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "Slides": [
                  {
                    "LessonId": 92,
                    "Name": "Features Engineering",
                    "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 420
                  },
                  {
                    "LessonId": 92,
                    "Name": "K-means",
                    "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 421
                  },
                  {
                    "LessonId": 92,
                    "Name": "KNN",
                    "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 422
                  },
                  {
                    "LessonId": 92,
                    "Name": "Learning Decision Trees",
                    "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 423
                  },
                  {
                    "LessonId": 92,
                    "Name": "Regression",
                    "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "IsRead": null,
                    "Id": 424
                  },
                  {
                    "LessonId": 92,
                    "Name": "Support Vector Machine",
                    "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "IsRead": null,
                    "Id": 425
                  },
                  {
                    "LessonId": 92,
                    "Name": "Neural Networks",
                    "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 24,
                    "IsRead": null,
                    "Id": 426
                  },
                  {
                    "LessonId": 92,
                    "Name": "Mini Project",
                    "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 27,
                    "IsRead": null,
                    "Id": 427
                  },
                  {
                    "LessonId": 92,
                    "Name": "Supervised Learning",
                    "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 461
                  },
                  {
                    "LessonId": 92,
                    "Name": "Naive Bayes Classifier",
                    "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 21,
                    "IsRead": null,
                    "Id": 502
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 92
              }
            ],
            "Id": 38
          },
          {
            "SubTrackId": 10,
            "Name": "Launch",
            "Color": "#3498db",
            "OrderIndicator": 6,
            "Lessons": [
              {
                "ModuleId": 39,
                "Name": "Extras",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 18,
                "Slides": [
                  {
                    "LessonId": 93,
                    "Name": "NLP",
                    "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 428
                  },
                  {
                    "LessonId": 93,
                    "Name": "Objects Detection",
                    "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 429
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 93
              }
            ],
            "Id": 39
          }
        ],
        "MigrationVersion": 25,
        "ProductTemplateId": 18,
        "Locked": false,
        "Progress": 0.0,
        "Id": 10
      },
      "Name": "Kickstart",
      "Color": "#1abc9c",
      "OrderIndicator": 0,
      "Lessons": [
        {
          "ModuleId": 37,
          "Name": "Python",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "Slides": [
            {
              "LessonId": 89,
              "Name": "Hello Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 404
            },
            {
              "LessonId": 89,
              "Name": "Variables",
              "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 405
            },
            {
              "LessonId": 89,
              "Name": "Conditions",
              "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 406
            },
            {
              "LessonId": 89,
              "Name": "Looping",
              "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 407
            },
            {
              "LessonId": 89,
              "Name": "Lists",
              "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 408
            },
            {
              "LessonId": 89,
              "Name": "Dicts",
              "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 409
            },
            {
              "LessonId": 89,
              "Name": "Function and Classes",
              "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 410
            },
            {
              "LessonId": 89,
              "Name": "Mini Project",
              "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
              "OrderIndicator": 21,
              "IsRead": null,
              "Id": 411
            }
          ],
          "Quizzes": [
            {
              "Name": "Python Quiz",
              "OrderIndicator": 0,
              "LessonId": 89,
              "Questions": [
                {
                  "Content": "Which function to display the content of a variable?",
                  "QuizId": 7,
                  "Choices": [
                    {
                      "Content": "print()",
                      "IsCorrect": true,
                      "QuestionId": 40,
                      "Answers": null,
                      "Id": 159
                    },
                    {
                      "Content": "display()",
                      "IsCorrect": false,
                      "QuestionId": 40,
                      "Answers": null,
                      "Id": 160
                    }
                  ],
                  "IsAnswered": false,
                  "IsCorrect": false,
                  "Id": 40
                },
                {
                  "Content": "Which of the following is the exponent operator?",
                  "QuizId": 7,
                  "Choices": [
                    {
                      "Content": "^",
                      "IsCorrect": false,
                      "QuestionId": 41,
                      "Answers": null,
                      "Id": 161
                    },
                    {
                      "Content": "*",
                      "IsCorrect": false,
                      "QuestionId": 41,
                      "Answers": null,
                      "Id": 162
                    },
                    {
                      "Content": "**",
                      "IsCorrect": true,
                      "QuestionId": 41,
                      "Answers": null,
                      "Id": 163
                    }
                  ],
                  "IsAnswered": false,
                  "IsCorrect": false,
                  "Id": 41
                },
                {
                  "Content": "What correctly imports the datetime library?",
                  "QuizId": 7,
                  "Choices": [
                    {
                      "Content": "import datatime",
                      "IsCorrect": true,
                      "QuestionId": 42,
                      "Answers": null,
                      "Id": 164
                    },
                    {
                      "Content": "include datatime",
                      "IsCorrect": false,
                      "QuestionId": 42,
                      "Answers": null,
                      "Id": 165
                    }
                  ],
                  "IsAnswered": false,
                  "IsCorrect": false,
                  "Id": 42
                },
                {
                  "Content": "What correctly imports the fileinput library?",
                  "QuizId": 7,
                  "Choices": [
                    {
                      "Content": "import fileinput",
                      "IsCorrect": true,
                      "QuestionId": 43,
                      "Answers": null,
                      "Id": 166
                    },
                    {
                      "Content": "include fileinput",
                      "IsCorrect": false,
                      "QuestionId": 43,
                      "Answers": null,
                      "Id": 167
                    },
                    {
                      "Content": "require fileinput",
                      "IsCorrect": false,
                      "QuestionId": 43,
                      "Answers": null,
                      "Id": 168
                    }
                  ],
                  "IsAnswered": false,
                  "IsCorrect": false,
                  "Id": 43
                },
                {
                  "Content": "Which is the correct way to write a for loop?",
                  "QuizId": 7,
                  "Choices": [
                    {
                      "Content": "for i=0; i < 10; i++",
                      "IsCorrect": false,
                      "QuestionId": 44,
                      "Answers": null,
                      "Id": 169
                    },
                    {
                      "Content": "for i from 0 to 10",
                      "IsCorrect": false,
                      "QuestionId": 44,
                      "Answers": null,
                      "Id": 170
                    },
                    {
                      "Content": "for in in range(0,10)",
                      "IsCorrect": true,
                      "QuestionId": 44,
                      "Answers": null,
                      "Id": 171
                    }
                  ],
                  "IsAnswered": false,
                  "IsCorrect": false,
                  "Id": 44
                },
                {
                  "Content": "What are functions?",
                  "QuizId": 7,
                  "Choices": [
                    {
                      "Content": "Code that can only be used once in the application",
                      "IsCorrect": false,
                      "QuestionId": 45,
                      "Answers": null,
                      "Id": 172
                    },
                    {
                      "Content": "Reusable pieces of code that can be called on throughout an application",
                      "IsCorrect": true,
                      "QuestionId": 45,
                      "Answers": null,
                      "Id": 173
                    }
                  ],
                  "IsAnswered": false,
                  "IsCorrect": false,
                  "Id": 45
                },
                {
                  "Content": "What is the right way to read from 2x2 matrix?",
                  "QuizId": 7,
                  "Choices": [
                    {
                      "Content": "matrix(x,y)",
                      "IsCorrect": false,
                      "QuestionId": 46,
                      "Answers": null,
                      "Id": 174
                    },
                    {
                      "Content": "matrix[x,y]",
                      "IsCorrect": false,
                      "QuestionId": 46,
                      "Answers": null,
                      "Id": 175
                    },
                    {
                      "Content": "matrix[x][y]",
                      "IsCorrect": true,
                      "QuestionId": 46,
                      "Answers": null,
                      "Id": 176
                    }
                  ],
                  "IsAnswered": false,
                  "IsCorrect": false,
                  "Id": 46
                }
              ],
              "QuizResults": null,
              "IsDone": false,
              "Id": 7
            }
          ],
          "Progress": 0.0,
          "Id": 89
        },
        {
          "ModuleId": 37,
          "Name": "Numpy",
          "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "Slides": [
            {
              "LessonId": 90,
              "Name": "Arrays",
              "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 412
            },
            {
              "LessonId": 90,
              "Name": "Math",
              "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 413
            },
            {
              "LessonId": 90,
              "Name": "Indexing",
              "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 414
            },
            {
              "LessonId": 90,
              "Name": "Mini-Project",
              "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 612
            }
          ],
          "Quizzes": null,
          "Progress": 0.0,
          "Id": 90
        },
        {
          "ModuleId": 37,
          "Name": "Matplotlib",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "Slides": [
            {
              "LessonId": 111,
              "Name": "First Plot",
              "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 503
            },
            {
              "LessonId": 111,
              "Name": "Bar Charts",
              "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 504
            },
            {
              "LessonId": 111,
              "Name": "Scatter Plot",
              "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 505
            },
            {
              "LessonId": 111,
              "Name": "Combine Plots",
              "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 506
            },
            {
              "LessonId": 111,
              "Name": "Histogram",
              "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 821
            }
          ],
          "Quizzes": null,
          "Progress": 0.0,
          "Id": 111
        },
        {
          "ModuleId": 37,
          "Name": "Pandas",
          "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 9,
          "Slides": [
            {
              "LessonId": 112,
              "Name": "Object Creation",
              "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 507
            },
            {
              "LessonId": 112,
              "Name": "Viewing data",
              "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 508
            },
            {
              "LessonId": 112,
              "Name": "Pivot Table",
              "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 509
            },
            {
              "LessonId": 112,
              "Name": "Case Study",
              "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 822
            }
          ],
          "Quizzes": null,
          "Progress": 0.0,
          "Id": 112
        }
      ],
      "Id": 37
    },
    {
      "SubTrackId": 10,
      "SubTrack": {
        "Level": 1,
        "TrackId": 4,
        "Track": null,
        "Name": "Ready",
        "Modules": [
          {
            "SubTrackId": 10,
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 37,
                "Name": "Python",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "Slides": [
                  {
                    "LessonId": 89,
                    "Name": "Hello Python",
                    "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 404
                  },
                  {
                    "LessonId": 89,
                    "Name": "Variables",
                    "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 405
                  },
                  {
                    "LessonId": 89,
                    "Name": "Conditions",
                    "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 406
                  },
                  {
                    "LessonId": 89,
                    "Name": "Looping",
                    "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 407
                  },
                  {
                    "LessonId": 89,
                    "Name": "Lists",
                    "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 408
                  },
                  {
                    "LessonId": 89,
                    "Name": "Dicts",
                    "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                    "OrderIndicator": 15,
                    "IsRead": null,
                    "Id": 409
                  },
                  {
                    "LessonId": 89,
                    "Name": "Function and Classes",
                    "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                    "OrderIndicator": 18,
                    "IsRead": null,
                    "Id": 410
                  },
                  {
                    "LessonId": 89,
                    "Name": "Mini Project",
                    "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                    "OrderIndicator": 21,
                    "IsRead": null,
                    "Id": 411
                  }
                ],
                "Quizzes": [
                  {
                    "Name": "Python Quiz",
                    "OrderIndicator": 0,
                    "LessonId": 89,
                    "Questions": [
                      {
                        "Content": "Which function to display the content of a variable?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "print()",
                            "IsCorrect": true,
                            "QuestionId": 40,
                            "Answers": null,
                            "Id": 159
                          },
                          {
                            "Content": "display()",
                            "IsCorrect": false,
                            "QuestionId": 40,
                            "Answers": null,
                            "Id": 160
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 40
                      },
                      {
                        "Content": "Which of the following is the exponent operator?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "^",
                            "IsCorrect": false,
                            "QuestionId": 41,
                            "Answers": null,
                            "Id": 161
                          },
                          {
                            "Content": "*",
                            "IsCorrect": false,
                            "QuestionId": 41,
                            "Answers": null,
                            "Id": 162
                          },
                          {
                            "Content": "**",
                            "IsCorrect": true,
                            "QuestionId": 41,
                            "Answers": null,
                            "Id": 163
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 41
                      },
                      {
                        "Content": "What correctly imports the datetime library?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "import datatime",
                            "IsCorrect": true,
                            "QuestionId": 42,
                            "Answers": null,
                            "Id": 164
                          },
                          {
                            "Content": "include datatime",
                            "IsCorrect": false,
                            "QuestionId": 42,
                            "Answers": null,
                            "Id": 165
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 42
                      },
                      {
                        "Content": "What correctly imports the fileinput library?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "import fileinput",
                            "IsCorrect": true,
                            "QuestionId": 43,
                            "Answers": null,
                            "Id": 166
                          },
                          {
                            "Content": "include fileinput",
                            "IsCorrect": false,
                            "QuestionId": 43,
                            "Answers": null,
                            "Id": 167
                          },
                          {
                            "Content": "require fileinput",
                            "IsCorrect": false,
                            "QuestionId": 43,
                            "Answers": null,
                            "Id": 168
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 43
                      },
                      {
                        "Content": "Which is the correct way to write a for loop?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "for i=0; i < 10; i++",
                            "IsCorrect": false,
                            "QuestionId": 44,
                            "Answers": null,
                            "Id": 169
                          },
                          {
                            "Content": "for i from 0 to 10",
                            "IsCorrect": false,
                            "QuestionId": 44,
                            "Answers": null,
                            "Id": 170
                          },
                          {
                            "Content": "for in in range(0,10)",
                            "IsCorrect": true,
                            "QuestionId": 44,
                            "Answers": null,
                            "Id": 171
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 44
                      },
                      {
                        "Content": "What are functions?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "Code that can only be used once in the application",
                            "IsCorrect": false,
                            "QuestionId": 45,
                            "Answers": null,
                            "Id": 172
                          },
                          {
                            "Content": "Reusable pieces of code that can be called on throughout an application",
                            "IsCorrect": true,
                            "QuestionId": 45,
                            "Answers": null,
                            "Id": 173
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 45
                      },
                      {
                        "Content": "What is the right way to read from 2x2 matrix?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "matrix(x,y)",
                            "IsCorrect": false,
                            "QuestionId": 46,
                            "Answers": null,
                            "Id": 174
                          },
                          {
                            "Content": "matrix[x,y]",
                            "IsCorrect": false,
                            "QuestionId": 46,
                            "Answers": null,
                            "Id": 175
                          },
                          {
                            "Content": "matrix[x][y]",
                            "IsCorrect": true,
                            "QuestionId": 46,
                            "Answers": null,
                            "Id": 176
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 46
                      }
                    ],
                    "QuizResults": null,
                    "IsDone": false,
                    "Id": 7
                  }
                ],
                "Progress": 0.0,
                "Id": 89
              },
              {
                "ModuleId": 37,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 90,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 412
                  },
                  {
                    "LessonId": 90,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 413
                  },
                  {
                    "LessonId": 90,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 414
                  },
                  {
                    "LessonId": 90,
                    "Name": "Mini-Project",
                    "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 612
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 90
              },
              {
                "ModuleId": 37,
                "Name": "Matplotlib",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 111,
                    "Name": "First Plot",
                    "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 503
                  },
                  {
                    "LessonId": 111,
                    "Name": "Bar Charts",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 504
                  },
                  {
                    "LessonId": 111,
                    "Name": "Scatter Plot",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 505
                  },
                  {
                    "LessonId": 111,
                    "Name": "Combine Plots",
                    "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 506
                  },
                  {
                    "LessonId": 111,
                    "Name": "Histogram",
                    "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 821
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 111
              },
              {
                "ModuleId": 37,
                "Name": "Pandas",
                "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 112,
                    "Name": "Object Creation",
                    "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 507
                  },
                  {
                    "LessonId": 112,
                    "Name": "Viewing data",
                    "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 508
                  },
                  {
                    "LessonId": 112,
                    "Name": "Pivot Table",
                    "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 509
                  },
                  {
                    "LessonId": 112,
                    "Name": "Case Study",
                    "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 822
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 112
              }
            ],
            "Id": 37
          },
          {
            "SubTrackId": 10,
            "Name": "Launch",
            "Color": "#3498db",
            "OrderIndicator": 6,
            "Lessons": [
              {
                "ModuleId": 39,
                "Name": "Extras",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 18,
                "Slides": [
                  {
                    "LessonId": 93,
                    "Name": "NLP",
                    "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 428
                  },
                  {
                    "LessonId": 93,
                    "Name": "Objects Detection",
                    "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 429
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 93
              }
            ],
            "Id": 39
          }
        ],
        "MigrationVersion": 25,
        "ProductTemplateId": 18,
        "Locked": false,
        "Progress": 0.0,
        "Id": 10
      },
      "Name": "Power Up",
      "Color": "#2ecc71",
      "OrderIndicator": 3,
      "Lessons": [
        {
          "ModuleId": 38,
          "Name": "AI fundamentals",
          "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
          "SandboxUrl": "",
          "OrderIndicator": 12,
          "Slides": [
            {
              "LessonId": 91,
              "Name": "Goals of AI",
              "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 415
            },
            {
              "LessonId": 91,
              "Name": "AI Agent",
              "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 416
            },
            {
              "LessonId": 91,
              "Name": "Goal-based agents",
              "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 417
            },
            {
              "LessonId": 91,
              "Name": "Modeling",
              "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 418
            },
            {
              "LessonId": 91,
              "Name": "Solving problem by searching",
              "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 419
            }
          ],
          "Quizzes": null,
          "Progress": 0.0,
          "Id": 91
        },
        {
          "ModuleId": 38,
          "Name": "ML fundamentals",
          "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
          "SandboxUrl": "",
          "OrderIndicator": 15,
          "Slides": [
            {
              "LessonId": 92,
              "Name": "Features Engineering",
              "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 420
            },
            {
              "LessonId": 92,
              "Name": "K-means",
              "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 421
            },
            {
              "LessonId": 92,
              "Name": "KNN",
              "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 422
            },
            {
              "LessonId": 92,
              "Name": "Learning Decision Trees",
              "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 423
            },
            {
              "LessonId": 92,
              "Name": "Regression",
              "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 424
            },
            {
              "LessonId": 92,
              "Name": "Support Vector Machine",
              "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 425
            },
            {
              "LessonId": 92,
              "Name": "Neural Networks",
              "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 24,
              "IsRead": null,
              "Id": 426
            },
            {
              "LessonId": 92,
              "Name": "Mini Project",
              "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 27,
              "IsRead": null,
              "Id": 427
            },
            {
              "LessonId": 92,
              "Name": "Supervised Learning",
              "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 461
            },
            {
              "LessonId": 92,
              "Name": "Naive Bayes Classifier",
              "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 21,
              "IsRead": null,
              "Id": 502
            }
          ],
          "Quizzes": null,
          "Progress": 0.0,
          "Id": 92
        }
      ],
      "Id": 38
    },
    {
      "SubTrackId": 10,
      "SubTrack": {
        "Level": 1,
        "TrackId": 4,
        "Track": null,
        "Name": "Ready",
        "Modules": [
          {
            "SubTrackId": 10,
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 37,
                "Name": "Python",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "Slides": [
                  {
                    "LessonId": 89,
                    "Name": "Hello Python",
                    "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 404
                  },
                  {
                    "LessonId": 89,
                    "Name": "Variables",
                    "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 405
                  },
                  {
                    "LessonId": 89,
                    "Name": "Conditions",
                    "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 406
                  },
                  {
                    "LessonId": 89,
                    "Name": "Looping",
                    "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 407
                  },
                  {
                    "LessonId": 89,
                    "Name": "Lists",
                    "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 408
                  },
                  {
                    "LessonId": 89,
                    "Name": "Dicts",
                    "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                    "OrderIndicator": 15,
                    "IsRead": null,
                    "Id": 409
                  },
                  {
                    "LessonId": 89,
                    "Name": "Function and Classes",
                    "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                    "OrderIndicator": 18,
                    "IsRead": null,
                    "Id": 410
                  },
                  {
                    "LessonId": 89,
                    "Name": "Mini Project",
                    "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                    "OrderIndicator": 21,
                    "IsRead": null,
                    "Id": 411
                  }
                ],
                "Quizzes": [
                  {
                    "Name": "Python Quiz",
                    "OrderIndicator": 0,
                    "LessonId": 89,
                    "Questions": [
                      {
                        "Content": "Which function to display the content of a variable?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "print()",
                            "IsCorrect": true,
                            "QuestionId": 40,
                            "Answers": null,
                            "Id": 159
                          },
                          {
                            "Content": "display()",
                            "IsCorrect": false,
                            "QuestionId": 40,
                            "Answers": null,
                            "Id": 160
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 40
                      },
                      {
                        "Content": "Which of the following is the exponent operator?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "^",
                            "IsCorrect": false,
                            "QuestionId": 41,
                            "Answers": null,
                            "Id": 161
                          },
                          {
                            "Content": "*",
                            "IsCorrect": false,
                            "QuestionId": 41,
                            "Answers": null,
                            "Id": 162
                          },
                          {
                            "Content": "**",
                            "IsCorrect": true,
                            "QuestionId": 41,
                            "Answers": null,
                            "Id": 163
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 41
                      },
                      {
                        "Content": "What correctly imports the datetime library?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "import datatime",
                            "IsCorrect": true,
                            "QuestionId": 42,
                            "Answers": null,
                            "Id": 164
                          },
                          {
                            "Content": "include datatime",
                            "IsCorrect": false,
                            "QuestionId": 42,
                            "Answers": null,
                            "Id": 165
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 42
                      },
                      {
                        "Content": "What correctly imports the fileinput library?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "import fileinput",
                            "IsCorrect": true,
                            "QuestionId": 43,
                            "Answers": null,
                            "Id": 166
                          },
                          {
                            "Content": "include fileinput",
                            "IsCorrect": false,
                            "QuestionId": 43,
                            "Answers": null,
                            "Id": 167
                          },
                          {
                            "Content": "require fileinput",
                            "IsCorrect": false,
                            "QuestionId": 43,
                            "Answers": null,
                            "Id": 168
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 43
                      },
                      {
                        "Content": "Which is the correct way to write a for loop?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "for i=0; i < 10; i++",
                            "IsCorrect": false,
                            "QuestionId": 44,
                            "Answers": null,
                            "Id": 169
                          },
                          {
                            "Content": "for i from 0 to 10",
                            "IsCorrect": false,
                            "QuestionId": 44,
                            "Answers": null,
                            "Id": 170
                          },
                          {
                            "Content": "for in in range(0,10)",
                            "IsCorrect": true,
                            "QuestionId": 44,
                            "Answers": null,
                            "Id": 171
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 44
                      },
                      {
                        "Content": "What are functions?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "Code that can only be used once in the application",
                            "IsCorrect": false,
                            "QuestionId": 45,
                            "Answers": null,
                            "Id": 172
                          },
                          {
                            "Content": "Reusable pieces of code that can be called on throughout an application",
                            "IsCorrect": true,
                            "QuestionId": 45,
                            "Answers": null,
                            "Id": 173
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 45
                      },
                      {
                        "Content": "What is the right way to read from 2x2 matrix?",
                        "QuizId": 7,
                        "Choices": [
                          {
                            "Content": "matrix(x,y)",
                            "IsCorrect": false,
                            "QuestionId": 46,
                            "Answers": null,
                            "Id": 174
                          },
                          {
                            "Content": "matrix[x,y]",
                            "IsCorrect": false,
                            "QuestionId": 46,
                            "Answers": null,
                            "Id": 175
                          },
                          {
                            "Content": "matrix[x][y]",
                            "IsCorrect": true,
                            "QuestionId": 46,
                            "Answers": null,
                            "Id": 176
                          }
                        ],
                        "IsAnswered": false,
                        "IsCorrect": false,
                        "Id": 46
                      }
                    ],
                    "QuizResults": null,
                    "IsDone": false,
                    "Id": 7
                  }
                ],
                "Progress": 0.0,
                "Id": 89
              },
              {
                "ModuleId": 37,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 90,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 412
                  },
                  {
                    "LessonId": 90,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 413
                  },
                  {
                    "LessonId": 90,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 414
                  },
                  {
                    "LessonId": 90,
                    "Name": "Mini-Project",
                    "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 612
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 90
              },
              {
                "ModuleId": 37,
                "Name": "Matplotlib",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 111,
                    "Name": "First Plot",
                    "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 503
                  },
                  {
                    "LessonId": 111,
                    "Name": "Bar Charts",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 504
                  },
                  {
                    "LessonId": 111,
                    "Name": "Scatter Plot",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 505
                  },
                  {
                    "LessonId": 111,
                    "Name": "Combine Plots",
                    "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 506
                  },
                  {
                    "LessonId": 111,
                    "Name": "Histogram",
                    "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 821
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 111
              },
              {
                "ModuleId": 37,
                "Name": "Pandas",
                "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 112,
                    "Name": "Object Creation",
                    "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 507
                  },
                  {
                    "LessonId": 112,
                    "Name": "Viewing data",
                    "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 508
                  },
                  {
                    "LessonId": 112,
                    "Name": "Pivot Table",
                    "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 509
                  },
                  {
                    "LessonId": 112,
                    "Name": "Case Study",
                    "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 822
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 112
              }
            ],
            "Id": 37
          },
          {
            "SubTrackId": 10,
            "Name": "Power Up",
            "Color": "#2ecc71",
            "OrderIndicator": 3,
            "Lessons": [
              {
                "ModuleId": 38,
                "Name": "AI fundamentals",
                "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "Slides": [
                  {
                    "LessonId": 91,
                    "Name": "Goals of AI",
                    "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 415
                  },
                  {
                    "LessonId": 91,
                    "Name": "AI Agent",
                    "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 416
                  },
                  {
                    "LessonId": 91,
                    "Name": "Goal-based agents",
                    "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 417
                  },
                  {
                    "LessonId": 91,
                    "Name": "Modeling",
                    "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 418
                  },
                  {
                    "LessonId": 91,
                    "Name": "Solving problem by searching",
                    "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 419
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 91
              },
              {
                "ModuleId": 38,
                "Name": "ML fundamentals",
                "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "Slides": [
                  {
                    "LessonId": 92,
                    "Name": "Features Engineering",
                    "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 420
                  },
                  {
                    "LessonId": 92,
                    "Name": "K-means",
                    "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 421
                  },
                  {
                    "LessonId": 92,
                    "Name": "KNN",
                    "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 422
                  },
                  {
                    "LessonId": 92,
                    "Name": "Learning Decision Trees",
                    "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 423
                  },
                  {
                    "LessonId": 92,
                    "Name": "Regression",
                    "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "IsRead": null,
                    "Id": 424
                  },
                  {
                    "LessonId": 92,
                    "Name": "Support Vector Machine",
                    "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "IsRead": null,
                    "Id": 425
                  },
                  {
                    "LessonId": 92,
                    "Name": "Neural Networks",
                    "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 24,
                    "IsRead": null,
                    "Id": 426
                  },
                  {
                    "LessonId": 92,
                    "Name": "Mini Project",
                    "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 27,
                    "IsRead": null,
                    "Id": 427
                  },
                  {
                    "LessonId": 92,
                    "Name": "Supervised Learning",
                    "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 461
                  },
                  {
                    "LessonId": 92,
                    "Name": "Naive Bayes Classifier",
                    "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 21,
                    "IsRead": null,
                    "Id": 502
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 92
              }
            ],
            "Id": 38
          }
        ],
        "MigrationVersion": 25,
        "ProductTemplateId": 18,
        "Locked": false,
        "Progress": 0.0,
        "Id": 10
      },
      "Name": "Launch",
      "Color": "#3498db",
      "OrderIndicator": 6,
      "Lessons": [
        {
          "ModuleId": 39,
          "Name": "Extras",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 18,
          "Slides": [
            {
              "LessonId": 93,
              "Name": "NLP",
              "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 428
            },
            {
              "LessonId": 93,
              "Name": "Objects Detection",
              "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 429
            }
          ],
          "Quizzes": null,
          "Progress": 0.0,
          "Id": 93
        }
      ],
      "Id": 39
    }
  ],
  "Quizzes": [
    {
      "Name": "Python Quiz",
      "OrderIndicator": 0,
      "LessonId": 89,
      "Lesson": {
        "ModuleId": 37,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [
                  {
                    "ModuleId": 38,
                    "Name": "AI fundamentals",
                    "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "Slides": [
                      {
                        "LessonId": 91,
                        "Name": "Goals of AI",
                        "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 415
                      },
                      {
                        "LessonId": 91,
                        "Name": "AI Agent",
                        "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 416
                      },
                      {
                        "LessonId": 91,
                        "Name": "Goal-based agents",
                        "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 417
                      },
                      {
                        "LessonId": 91,
                        "Name": "Modeling",
                        "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 418
                      },
                      {
                        "LessonId": 91,
                        "Name": "Solving problem by searching",
                        "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 419
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 91
                  },
                  {
                    "ModuleId": 38,
                    "Name": "ML fundamentals",
                    "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "Slides": [
                      {
                        "LessonId": 92,
                        "Name": "Features Engineering",
                        "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 420
                      },
                      {
                        "LessonId": 92,
                        "Name": "K-means",
                        "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 421
                      },
                      {
                        "LessonId": 92,
                        "Name": "KNN",
                        "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 9,
                        "IsRead": null,
                        "Id": 422
                      },
                      {
                        "LessonId": 92,
                        "Name": "Learning Decision Trees",
                        "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "IsRead": null,
                        "Id": 423
                      },
                      {
                        "LessonId": 92,
                        "Name": "Regression",
                        "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "IsRead": null,
                        "Id": 424
                      },
                      {
                        "LessonId": 92,
                        "Name": "Support Vector Machine",
                        "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "IsRead": null,
                        "Id": 425
                      },
                      {
                        "LessonId": 92,
                        "Name": "Neural Networks",
                        "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 24,
                        "IsRead": null,
                        "Id": 426
                      },
                      {
                        "LessonId": 92,
                        "Name": "Mini Project",
                        "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 27,
                        "IsRead": null,
                        "Id": 427
                      },
                      {
                        "LessonId": 92,
                        "Name": "Supervised Learning",
                        "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 6,
                        "IsRead": null,
                        "Id": 461
                      },
                      {
                        "LessonId": 92,
                        "Name": "Naive Bayes Classifier",
                        "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 21,
                        "IsRead": null,
                        "Id": 502
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 92
                  }
                ],
                "Id": 38
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [
                  {
                    "ModuleId": 39,
                    "Name": "Extras",
                    "Content": "",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "Slides": [
                      {
                        "LessonId": 93,
                        "Name": "NLP",
                        "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 0,
                        "IsRead": null,
                        "Id": 428
                      },
                      {
                        "LessonId": 93,
                        "Name": "Objects Detection",
                        "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 3,
                        "IsRead": null,
                        "Id": 429
                      }
                    ],
                    "Quizzes": null,
                    "Progress": 0.0,
                    "Id": 93
                  }
                ],
                "Id": 39
              }
            ],
            "MigrationVersion": 25,
            "ProductTemplateId": 18,
            "Locked": false,
            "Progress": 0.0,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 37,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 90,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 412
                },
                {
                  "LessonId": 90,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 413
                },
                {
                  "LessonId": 90,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 414
                },
                {
                  "LessonId": 90,
                  "Name": "Mini-Project",
                  "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 612
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 90
            },
            {
              "ModuleId": 37,
              "Name": "Matplotlib",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 111,
                  "Name": "First Plot",
                  "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 503
                },
                {
                  "LessonId": 111,
                  "Name": "Bar Charts",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 504
                },
                {
                  "LessonId": 111,
                  "Name": "Scatter Plot",
                  "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 505
                },
                {
                  "LessonId": 111,
                  "Name": "Combine Plots",
                  "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 506
                },
                {
                  "LessonId": 111,
                  "Name": "Histogram",
                  "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 821
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 111
            },
            {
              "ModuleId": 37,
              "Name": "Pandas",
              "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 112,
                  "Name": "Object Creation",
                  "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 507
                },
                {
                  "LessonId": 112,
                  "Name": "Viewing data",
                  "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 508
                },
                {
                  "LessonId": 112,
                  "Name": "Pivot Table",
                  "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 509
                },
                {
                  "LessonId": 112,
                  "Name": "Case Study",
                  "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 822
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 112
            }
          ],
          "Id": 37
        },
        "Name": "Python",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 89,
            "Name": "Hello Python",
            "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 404
          },
          {
            "LessonId": 89,
            "Name": "Variables",
            "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 405
          },
          {
            "LessonId": 89,
            "Name": "Conditions",
            "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 406
          },
          {
            "LessonId": 89,
            "Name": "Looping",
            "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 407
          },
          {
            "LessonId": 89,
            "Name": "Lists",
            "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 408
          },
          {
            "LessonId": 89,
            "Name": "Dicts",
            "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 409
          },
          {
            "LessonId": 89,
            "Name": "Function and Classes",
            "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 410
          },
          {
            "LessonId": 89,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
            "OrderIndicator": 21,
            "IsRead": null,
            "Id": 411
          }
        ],
        "Quizzes": [],
        "Progress": 0.0,
        "Id": 89
      },
      "Questions": [
        {
          "Content": "Which function to display the content of a variable?",
          "QuizId": 7,
          "Choices": [
            {
              "Content": "print()",
              "IsCorrect": true,
              "QuestionId": 40,
              "Answers": null,
              "Id": 159
            },
            {
              "Content": "display()",
              "IsCorrect": false,
              "QuestionId": 40,
              "Answers": null,
              "Id": 160
            }
          ],
          "IsAnswered": false,
          "IsCorrect": false,
          "Id": 40
        },
        {
          "Content": "Which of the following is the exponent operator?",
          "QuizId": 7,
          "Choices": [
            {
              "Content": "^",
              "IsCorrect": false,
              "QuestionId": 41,
              "Answers": null,
              "Id": 161
            },
            {
              "Content": "*",
              "IsCorrect": false,
              "QuestionId": 41,
              "Answers": null,
              "Id": 162
            },
            {
              "Content": "**",
              "IsCorrect": true,
              "QuestionId": 41,
              "Answers": null,
              "Id": 163
            }
          ],
          "IsAnswered": false,
          "IsCorrect": false,
          "Id": 41
        },
        {
          "Content": "What correctly imports the datetime library?",
          "QuizId": 7,
          "Choices": [
            {
              "Content": "import datatime",
              "IsCorrect": true,
              "QuestionId": 42,
              "Answers": null,
              "Id": 164
            },
            {
              "Content": "include datatime",
              "IsCorrect": false,
              "QuestionId": 42,
              "Answers": null,
              "Id": 165
            }
          ],
          "IsAnswered": false,
          "IsCorrect": false,
          "Id": 42
        },
        {
          "Content": "What correctly imports the fileinput library?",
          "QuizId": 7,
          "Choices": [
            {
              "Content": "import fileinput",
              "IsCorrect": true,
              "QuestionId": 43,
              "Answers": null,
              "Id": 166
            },
            {
              "Content": "include fileinput",
              "IsCorrect": false,
              "QuestionId": 43,
              "Answers": null,
              "Id": 167
            },
            {
              "Content": "require fileinput",
              "IsCorrect": false,
              "QuestionId": 43,
              "Answers": null,
              "Id": 168
            }
          ],
          "IsAnswered": false,
          "IsCorrect": false,
          "Id": 43
        },
        {
          "Content": "Which is the correct way to write a for loop?",
          "QuizId": 7,
          "Choices": [
            {
              "Content": "for i=0; i < 10; i++",
              "IsCorrect": false,
              "QuestionId": 44,
              "Answers": null,
              "Id": 169
            },
            {
              "Content": "for i from 0 to 10",
              "IsCorrect": false,
              "QuestionId": 44,
              "Answers": null,
              "Id": 170
            },
            {
              "Content": "for in in range(0,10)",
              "IsCorrect": true,
              "QuestionId": 44,
              "Answers": null,
              "Id": 171
            }
          ],
          "IsAnswered": false,
          "IsCorrect": false,
          "Id": 44
        },
        {
          "Content": "What are functions?",
          "QuizId": 7,
          "Choices": [
            {
              "Content": "Code that can only be used once in the application",
              "IsCorrect": false,
              "QuestionId": 45,
              "Answers": null,
              "Id": 172
            },
            {
              "Content": "Reusable pieces of code that can be called on throughout an application",
              "IsCorrect": true,
              "QuestionId": 45,
              "Answers": null,
              "Id": 173
            }
          ],
          "IsAnswered": false,
          "IsCorrect": false,
          "Id": 45
        },
        {
          "Content": "What is the right way to read from 2x2 matrix?",
          "QuizId": 7,
          "Choices": [
            {
              "Content": "matrix(x,y)",
              "IsCorrect": false,
              "QuestionId": 46,
              "Answers": null,
              "Id": 174
            },
            {
              "Content": "matrix[x,y]",
              "IsCorrect": false,
              "QuestionId": 46,
              "Answers": null,
              "Id": 175
            },
            {
              "Content": "matrix[x][y]",
              "IsCorrect": true,
              "QuestionId": 46,
              "Answers": null,
              "Id": 176
            }
          ],
          "IsAnswered": false,
          "IsCorrect": false,
          "Id": 46
        }
      ],
      "QuizResults": null,
      "IsDone": false,
      "Id": 7
    }
  ],
  "Questions": [
    {
      "Content": "Which function to display the content of a variable?",
      "QuizId": 7,
      "Quiz": {
        "Name": "Python Quiz",
        "OrderIndicator": 0,
        "LessonId": 89,
        "Lesson": {
          "ModuleId": 37,
          "Module": {
            "SubTrackId": 10,
            "SubTrack": {
              "Level": 1,
              "TrackId": 4,
              "Track": null,
              "Name": "Ready",
              "Modules": [
                {
                  "SubTrackId": 10,
                  "Name": "Power Up",
                  "Color": "#2ecc71",
                  "OrderIndicator": 3,
                  "Lessons": [
                    {
                      "ModuleId": 38,
                      "Name": "AI fundamentals",
                      "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "Slides": [
                        {
                          "LessonId": 91,
                          "Name": "Goals of AI",
                          "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 415
                        },
                        {
                          "LessonId": 91,
                          "Name": "AI Agent",
                          "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 416
                        },
                        {
                          "LessonId": 91,
                          "Name": "Goal-based agents",
                          "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 417
                        },
                        {
                          "LessonId": 91,
                          "Name": "Modeling",
                          "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 418
                        },
                        {
                          "LessonId": 91,
                          "Name": "Solving problem by searching",
                          "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 419
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 91
                    },
                    {
                      "ModuleId": 38,
                      "Name": "ML fundamentals",
                      "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "Slides": [
                        {
                          "LessonId": 92,
                          "Name": "Features Engineering",
                          "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 420
                        },
                        {
                          "LessonId": 92,
                          "Name": "K-means",
                          "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 421
                        },
                        {
                          "LessonId": 92,
                          "Name": "KNN",
                          "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 422
                        },
                        {
                          "LessonId": 92,
                          "Name": "Learning Decision Trees",
                          "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 423
                        },
                        {
                          "LessonId": 92,
                          "Name": "Regression",
                          "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 15,
                          "IsRead": null,
                          "Id": 424
                        },
                        {
                          "LessonId": 92,
                          "Name": "Support Vector Machine",
                          "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 18,
                          "IsRead": null,
                          "Id": 425
                        },
                        {
                          "LessonId": 92,
                          "Name": "Neural Networks",
                          "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 24,
                          "IsRead": null,
                          "Id": 426
                        },
                        {
                          "LessonId": 92,
                          "Name": "Mini Project",
                          "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 27,
                          "IsRead": null,
                          "Id": 427
                        },
                        {
                          "LessonId": 92,
                          "Name": "Supervised Learning",
                          "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 461
                        },
                        {
                          "LessonId": 92,
                          "Name": "Naive Bayes Classifier",
                          "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 21,
                          "IsRead": null,
                          "Id": 502
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 92
                    }
                  ],
                  "Id": 38
                },
                {
                  "SubTrackId": 10,
                  "Name": "Launch",
                  "Color": "#3498db",
                  "OrderIndicator": 6,
                  "Lessons": [
                    {
                      "ModuleId": 39,
                      "Name": "Extras",
                      "Content": "",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "Slides": [
                        {
                          "LessonId": 93,
                          "Name": "NLP",
                          "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 428
                        },
                        {
                          "LessonId": 93,
                          "Name": "Objects Detection",
                          "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 429
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 93
                    }
                  ],
                  "Id": 39
                }
              ],
              "MigrationVersion": 25,
              "ProductTemplateId": 18,
              "Locked": false,
              "Progress": 0.0,
              "Id": 10
            },
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 37,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 90,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 412
                  },
                  {
                    "LessonId": 90,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 413
                  },
                  {
                    "LessonId": 90,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 414
                  },
                  {
                    "LessonId": 90,
                    "Name": "Mini-Project",
                    "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 612
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 90
              },
              {
                "ModuleId": 37,
                "Name": "Matplotlib",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 111,
                    "Name": "First Plot",
                    "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 503
                  },
                  {
                    "LessonId": 111,
                    "Name": "Bar Charts",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 504
                  },
                  {
                    "LessonId": 111,
                    "Name": "Scatter Plot",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 505
                  },
                  {
                    "LessonId": 111,
                    "Name": "Combine Plots",
                    "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 506
                  },
                  {
                    "LessonId": 111,
                    "Name": "Histogram",
                    "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 821
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 111
              },
              {
                "ModuleId": 37,
                "Name": "Pandas",
                "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 112,
                    "Name": "Object Creation",
                    "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 507
                  },
                  {
                    "LessonId": 112,
                    "Name": "Viewing data",
                    "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 508
                  },
                  {
                    "LessonId": 112,
                    "Name": "Pivot Table",
                    "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 509
                  },
                  {
                    "LessonId": 112,
                    "Name": "Case Study",
                    "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 822
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 112
              }
            ],
            "Id": 37
          },
          "Name": "Python",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "Slides": [
            {
              "LessonId": 89,
              "Name": "Hello Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 404
            },
            {
              "LessonId": 89,
              "Name": "Variables",
              "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 405
            },
            {
              "LessonId": 89,
              "Name": "Conditions",
              "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 406
            },
            {
              "LessonId": 89,
              "Name": "Looping",
              "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 407
            },
            {
              "LessonId": 89,
              "Name": "Lists",
              "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 408
            },
            {
              "LessonId": 89,
              "Name": "Dicts",
              "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 409
            },
            {
              "LessonId": 89,
              "Name": "Function and Classes",
              "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 410
            },
            {
              "LessonId": 89,
              "Name": "Mini Project",
              "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
              "OrderIndicator": 21,
              "IsRead": null,
              "Id": 411
            }
          ],
          "Quizzes": [],
          "Progress": 0.0,
          "Id": 89
        },
        "Questions": [
          {
            "Content": "Which of the following is the exponent operator?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "^",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 161
              },
              {
                "Content": "*",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 162
              },
              {
                "Content": "**",
                "IsCorrect": true,
                "QuestionId": 41,
                "Answers": null,
                "Id": 163
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 41
          },
          {
            "Content": "What correctly imports the datetime library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import datatime",
                "IsCorrect": true,
                "QuestionId": 42,
                "Answers": null,
                "Id": 164
              },
              {
                "Content": "include datatime",
                "IsCorrect": false,
                "QuestionId": 42,
                "Answers": null,
                "Id": 165
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 42
          },
          {
            "Content": "What correctly imports the fileinput library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import fileinput",
                "IsCorrect": true,
                "QuestionId": 43,
                "Answers": null,
                "Id": 166
              },
              {
                "Content": "include fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 167
              },
              {
                "Content": "require fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 168
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 43
          },
          {
            "Content": "Which is the correct way to write a for loop?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "for i=0; i < 10; i++",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 169
              },
              {
                "Content": "for i from 0 to 10",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 170
              },
              {
                "Content": "for in in range(0,10)",
                "IsCorrect": true,
                "QuestionId": 44,
                "Answers": null,
                "Id": 171
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 44
          },
          {
            "Content": "What are functions?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "Code that can only be used once in the application",
                "IsCorrect": false,
                "QuestionId": 45,
                "Answers": null,
                "Id": 172
              },
              {
                "Content": "Reusable pieces of code that can be called on throughout an application",
                "IsCorrect": true,
                "QuestionId": 45,
                "Answers": null,
                "Id": 173
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 45
          },
          {
            "Content": "What is the right way to read from 2x2 matrix?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "matrix(x,y)",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 174
              },
              {
                "Content": "matrix[x,y]",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 175
              },
              {
                "Content": "matrix[x][y]",
                "IsCorrect": true,
                "QuestionId": 46,
                "Answers": null,
                "Id": 176
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 46
          }
        ],
        "QuizResults": null,
        "IsDone": false,
        "Id": 7
      },
      "Choices": [
        {
          "Content": "print()",
          "IsCorrect": true,
          "QuestionId": 40,
          "Answers": null,
          "Id": 159
        },
        {
          "Content": "display()",
          "IsCorrect": false,
          "QuestionId": 40,
          "Answers": null,
          "Id": 160
        }
      ],
      "IsAnswered": false,
      "IsCorrect": false,
      "Id": 40
    },
    {
      "Content": "Which of the following is the exponent operator?",
      "QuizId": 7,
      "Quiz": {
        "Name": "Python Quiz",
        "OrderIndicator": 0,
        "LessonId": 89,
        "Lesson": {
          "ModuleId": 37,
          "Module": {
            "SubTrackId": 10,
            "SubTrack": {
              "Level": 1,
              "TrackId": 4,
              "Track": null,
              "Name": "Ready",
              "Modules": [
                {
                  "SubTrackId": 10,
                  "Name": "Power Up",
                  "Color": "#2ecc71",
                  "OrderIndicator": 3,
                  "Lessons": [
                    {
                      "ModuleId": 38,
                      "Name": "AI fundamentals",
                      "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "Slides": [
                        {
                          "LessonId": 91,
                          "Name": "Goals of AI",
                          "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 415
                        },
                        {
                          "LessonId": 91,
                          "Name": "AI Agent",
                          "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 416
                        },
                        {
                          "LessonId": 91,
                          "Name": "Goal-based agents",
                          "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 417
                        },
                        {
                          "LessonId": 91,
                          "Name": "Modeling",
                          "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 418
                        },
                        {
                          "LessonId": 91,
                          "Name": "Solving problem by searching",
                          "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 419
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 91
                    },
                    {
                      "ModuleId": 38,
                      "Name": "ML fundamentals",
                      "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "Slides": [
                        {
                          "LessonId": 92,
                          "Name": "Features Engineering",
                          "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 420
                        },
                        {
                          "LessonId": 92,
                          "Name": "K-means",
                          "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 421
                        },
                        {
                          "LessonId": 92,
                          "Name": "KNN",
                          "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 422
                        },
                        {
                          "LessonId": 92,
                          "Name": "Learning Decision Trees",
                          "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 423
                        },
                        {
                          "LessonId": 92,
                          "Name": "Regression",
                          "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 15,
                          "IsRead": null,
                          "Id": 424
                        },
                        {
                          "LessonId": 92,
                          "Name": "Support Vector Machine",
                          "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 18,
                          "IsRead": null,
                          "Id": 425
                        },
                        {
                          "LessonId": 92,
                          "Name": "Neural Networks",
                          "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 24,
                          "IsRead": null,
                          "Id": 426
                        },
                        {
                          "LessonId": 92,
                          "Name": "Mini Project",
                          "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 27,
                          "IsRead": null,
                          "Id": 427
                        },
                        {
                          "LessonId": 92,
                          "Name": "Supervised Learning",
                          "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 461
                        },
                        {
                          "LessonId": 92,
                          "Name": "Naive Bayes Classifier",
                          "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 21,
                          "IsRead": null,
                          "Id": 502
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 92
                    }
                  ],
                  "Id": 38
                },
                {
                  "SubTrackId": 10,
                  "Name": "Launch",
                  "Color": "#3498db",
                  "OrderIndicator": 6,
                  "Lessons": [
                    {
                      "ModuleId": 39,
                      "Name": "Extras",
                      "Content": "",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "Slides": [
                        {
                          "LessonId": 93,
                          "Name": "NLP",
                          "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 428
                        },
                        {
                          "LessonId": 93,
                          "Name": "Objects Detection",
                          "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 429
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 93
                    }
                  ],
                  "Id": 39
                }
              ],
              "MigrationVersion": 25,
              "ProductTemplateId": 18,
              "Locked": false,
              "Progress": 0.0,
              "Id": 10
            },
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 37,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 90,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 412
                  },
                  {
                    "LessonId": 90,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 413
                  },
                  {
                    "LessonId": 90,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 414
                  },
                  {
                    "LessonId": 90,
                    "Name": "Mini-Project",
                    "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 612
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 90
              },
              {
                "ModuleId": 37,
                "Name": "Matplotlib",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 111,
                    "Name": "First Plot",
                    "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 503
                  },
                  {
                    "LessonId": 111,
                    "Name": "Bar Charts",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 504
                  },
                  {
                    "LessonId": 111,
                    "Name": "Scatter Plot",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 505
                  },
                  {
                    "LessonId": 111,
                    "Name": "Combine Plots",
                    "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 506
                  },
                  {
                    "LessonId": 111,
                    "Name": "Histogram",
                    "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 821
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 111
              },
              {
                "ModuleId": 37,
                "Name": "Pandas",
                "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 112,
                    "Name": "Object Creation",
                    "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 507
                  },
                  {
                    "LessonId": 112,
                    "Name": "Viewing data",
                    "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 508
                  },
                  {
                    "LessonId": 112,
                    "Name": "Pivot Table",
                    "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 509
                  },
                  {
                    "LessonId": 112,
                    "Name": "Case Study",
                    "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 822
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 112
              }
            ],
            "Id": 37
          },
          "Name": "Python",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "Slides": [
            {
              "LessonId": 89,
              "Name": "Hello Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 404
            },
            {
              "LessonId": 89,
              "Name": "Variables",
              "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 405
            },
            {
              "LessonId": 89,
              "Name": "Conditions",
              "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 406
            },
            {
              "LessonId": 89,
              "Name": "Looping",
              "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 407
            },
            {
              "LessonId": 89,
              "Name": "Lists",
              "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 408
            },
            {
              "LessonId": 89,
              "Name": "Dicts",
              "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 409
            },
            {
              "LessonId": 89,
              "Name": "Function and Classes",
              "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 410
            },
            {
              "LessonId": 89,
              "Name": "Mini Project",
              "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
              "OrderIndicator": 21,
              "IsRead": null,
              "Id": 411
            }
          ],
          "Quizzes": [],
          "Progress": 0.0,
          "Id": 89
        },
        "Questions": [
          {
            "Content": "Which function to display the content of a variable?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "print()",
                "IsCorrect": true,
                "QuestionId": 40,
                "Answers": null,
                "Id": 159
              },
              {
                "Content": "display()",
                "IsCorrect": false,
                "QuestionId": 40,
                "Answers": null,
                "Id": 160
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 40
          },
          {
            "Content": "What correctly imports the datetime library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import datatime",
                "IsCorrect": true,
                "QuestionId": 42,
                "Answers": null,
                "Id": 164
              },
              {
                "Content": "include datatime",
                "IsCorrect": false,
                "QuestionId": 42,
                "Answers": null,
                "Id": 165
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 42
          },
          {
            "Content": "What correctly imports the fileinput library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import fileinput",
                "IsCorrect": true,
                "QuestionId": 43,
                "Answers": null,
                "Id": 166
              },
              {
                "Content": "include fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 167
              },
              {
                "Content": "require fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 168
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 43
          },
          {
            "Content": "Which is the correct way to write a for loop?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "for i=0; i < 10; i++",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 169
              },
              {
                "Content": "for i from 0 to 10",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 170
              },
              {
                "Content": "for in in range(0,10)",
                "IsCorrect": true,
                "QuestionId": 44,
                "Answers": null,
                "Id": 171
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 44
          },
          {
            "Content": "What are functions?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "Code that can only be used once in the application",
                "IsCorrect": false,
                "QuestionId": 45,
                "Answers": null,
                "Id": 172
              },
              {
                "Content": "Reusable pieces of code that can be called on throughout an application",
                "IsCorrect": true,
                "QuestionId": 45,
                "Answers": null,
                "Id": 173
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 45
          },
          {
            "Content": "What is the right way to read from 2x2 matrix?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "matrix(x,y)",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 174
              },
              {
                "Content": "matrix[x,y]",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 175
              },
              {
                "Content": "matrix[x][y]",
                "IsCorrect": true,
                "QuestionId": 46,
                "Answers": null,
                "Id": 176
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 46
          }
        ],
        "QuizResults": null,
        "IsDone": false,
        "Id": 7
      },
      "Choices": [
        {
          "Content": "^",
          "IsCorrect": false,
          "QuestionId": 41,
          "Answers": null,
          "Id": 161
        },
        {
          "Content": "*",
          "IsCorrect": false,
          "QuestionId": 41,
          "Answers": null,
          "Id": 162
        },
        {
          "Content": "**",
          "IsCorrect": true,
          "QuestionId": 41,
          "Answers": null,
          "Id": 163
        }
      ],
      "IsAnswered": false,
      "IsCorrect": false,
      "Id": 41
    },
    {
      "Content": "What correctly imports the datetime library?",
      "QuizId": 7,
      "Quiz": {
        "Name": "Python Quiz",
        "OrderIndicator": 0,
        "LessonId": 89,
        "Lesson": {
          "ModuleId": 37,
          "Module": {
            "SubTrackId": 10,
            "SubTrack": {
              "Level": 1,
              "TrackId": 4,
              "Track": null,
              "Name": "Ready",
              "Modules": [
                {
                  "SubTrackId": 10,
                  "Name": "Power Up",
                  "Color": "#2ecc71",
                  "OrderIndicator": 3,
                  "Lessons": [
                    {
                      "ModuleId": 38,
                      "Name": "AI fundamentals",
                      "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "Slides": [
                        {
                          "LessonId": 91,
                          "Name": "Goals of AI",
                          "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 415
                        },
                        {
                          "LessonId": 91,
                          "Name": "AI Agent",
                          "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 416
                        },
                        {
                          "LessonId": 91,
                          "Name": "Goal-based agents",
                          "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 417
                        },
                        {
                          "LessonId": 91,
                          "Name": "Modeling",
                          "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 418
                        },
                        {
                          "LessonId": 91,
                          "Name": "Solving problem by searching",
                          "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 419
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 91
                    },
                    {
                      "ModuleId": 38,
                      "Name": "ML fundamentals",
                      "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "Slides": [
                        {
                          "LessonId": 92,
                          "Name": "Features Engineering",
                          "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 420
                        },
                        {
                          "LessonId": 92,
                          "Name": "K-means",
                          "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 421
                        },
                        {
                          "LessonId": 92,
                          "Name": "KNN",
                          "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 422
                        },
                        {
                          "LessonId": 92,
                          "Name": "Learning Decision Trees",
                          "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 423
                        },
                        {
                          "LessonId": 92,
                          "Name": "Regression",
                          "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 15,
                          "IsRead": null,
                          "Id": 424
                        },
                        {
                          "LessonId": 92,
                          "Name": "Support Vector Machine",
                          "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 18,
                          "IsRead": null,
                          "Id": 425
                        },
                        {
                          "LessonId": 92,
                          "Name": "Neural Networks",
                          "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 24,
                          "IsRead": null,
                          "Id": 426
                        },
                        {
                          "LessonId": 92,
                          "Name": "Mini Project",
                          "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 27,
                          "IsRead": null,
                          "Id": 427
                        },
                        {
                          "LessonId": 92,
                          "Name": "Supervised Learning",
                          "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 461
                        },
                        {
                          "LessonId": 92,
                          "Name": "Naive Bayes Classifier",
                          "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 21,
                          "IsRead": null,
                          "Id": 502
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 92
                    }
                  ],
                  "Id": 38
                },
                {
                  "SubTrackId": 10,
                  "Name": "Launch",
                  "Color": "#3498db",
                  "OrderIndicator": 6,
                  "Lessons": [
                    {
                      "ModuleId": 39,
                      "Name": "Extras",
                      "Content": "",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "Slides": [
                        {
                          "LessonId": 93,
                          "Name": "NLP",
                          "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 428
                        },
                        {
                          "LessonId": 93,
                          "Name": "Objects Detection",
                          "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 429
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 93
                    }
                  ],
                  "Id": 39
                }
              ],
              "MigrationVersion": 25,
              "ProductTemplateId": 18,
              "Locked": false,
              "Progress": 0.0,
              "Id": 10
            },
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 37,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 90,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 412
                  },
                  {
                    "LessonId": 90,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 413
                  },
                  {
                    "LessonId": 90,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 414
                  },
                  {
                    "LessonId": 90,
                    "Name": "Mini-Project",
                    "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 612
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 90
              },
              {
                "ModuleId": 37,
                "Name": "Matplotlib",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 111,
                    "Name": "First Plot",
                    "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 503
                  },
                  {
                    "LessonId": 111,
                    "Name": "Bar Charts",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 504
                  },
                  {
                    "LessonId": 111,
                    "Name": "Scatter Plot",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 505
                  },
                  {
                    "LessonId": 111,
                    "Name": "Combine Plots",
                    "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 506
                  },
                  {
                    "LessonId": 111,
                    "Name": "Histogram",
                    "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 821
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 111
              },
              {
                "ModuleId": 37,
                "Name": "Pandas",
                "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 112,
                    "Name": "Object Creation",
                    "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 507
                  },
                  {
                    "LessonId": 112,
                    "Name": "Viewing data",
                    "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 508
                  },
                  {
                    "LessonId": 112,
                    "Name": "Pivot Table",
                    "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 509
                  },
                  {
                    "LessonId": 112,
                    "Name": "Case Study",
                    "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 822
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 112
              }
            ],
            "Id": 37
          },
          "Name": "Python",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "Slides": [
            {
              "LessonId": 89,
              "Name": "Hello Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 404
            },
            {
              "LessonId": 89,
              "Name": "Variables",
              "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 405
            },
            {
              "LessonId": 89,
              "Name": "Conditions",
              "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 406
            },
            {
              "LessonId": 89,
              "Name": "Looping",
              "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 407
            },
            {
              "LessonId": 89,
              "Name": "Lists",
              "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 408
            },
            {
              "LessonId": 89,
              "Name": "Dicts",
              "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 409
            },
            {
              "LessonId": 89,
              "Name": "Function and Classes",
              "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 410
            },
            {
              "LessonId": 89,
              "Name": "Mini Project",
              "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
              "OrderIndicator": 21,
              "IsRead": null,
              "Id": 411
            }
          ],
          "Quizzes": [],
          "Progress": 0.0,
          "Id": 89
        },
        "Questions": [
          {
            "Content": "Which function to display the content of a variable?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "print()",
                "IsCorrect": true,
                "QuestionId": 40,
                "Answers": null,
                "Id": 159
              },
              {
                "Content": "display()",
                "IsCorrect": false,
                "QuestionId": 40,
                "Answers": null,
                "Id": 160
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 40
          },
          {
            "Content": "Which of the following is the exponent operator?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "^",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 161
              },
              {
                "Content": "*",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 162
              },
              {
                "Content": "**",
                "IsCorrect": true,
                "QuestionId": 41,
                "Answers": null,
                "Id": 163
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 41
          },
          {
            "Content": "What correctly imports the fileinput library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import fileinput",
                "IsCorrect": true,
                "QuestionId": 43,
                "Answers": null,
                "Id": 166
              },
              {
                "Content": "include fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 167
              },
              {
                "Content": "require fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 168
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 43
          },
          {
            "Content": "Which is the correct way to write a for loop?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "for i=0; i < 10; i++",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 169
              },
              {
                "Content": "for i from 0 to 10",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 170
              },
              {
                "Content": "for in in range(0,10)",
                "IsCorrect": true,
                "QuestionId": 44,
                "Answers": null,
                "Id": 171
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 44
          },
          {
            "Content": "What are functions?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "Code that can only be used once in the application",
                "IsCorrect": false,
                "QuestionId": 45,
                "Answers": null,
                "Id": 172
              },
              {
                "Content": "Reusable pieces of code that can be called on throughout an application",
                "IsCorrect": true,
                "QuestionId": 45,
                "Answers": null,
                "Id": 173
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 45
          },
          {
            "Content": "What is the right way to read from 2x2 matrix?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "matrix(x,y)",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 174
              },
              {
                "Content": "matrix[x,y]",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 175
              },
              {
                "Content": "matrix[x][y]",
                "IsCorrect": true,
                "QuestionId": 46,
                "Answers": null,
                "Id": 176
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 46
          }
        ],
        "QuizResults": null,
        "IsDone": false,
        "Id": 7
      },
      "Choices": [
        {
          "Content": "import datatime",
          "IsCorrect": true,
          "QuestionId": 42,
          "Answers": null,
          "Id": 164
        },
        {
          "Content": "include datatime",
          "IsCorrect": false,
          "QuestionId": 42,
          "Answers": null,
          "Id": 165
        }
      ],
      "IsAnswered": false,
      "IsCorrect": false,
      "Id": 42
    },
    {
      "Content": "What correctly imports the fileinput library?",
      "QuizId": 7,
      "Quiz": {
        "Name": "Python Quiz",
        "OrderIndicator": 0,
        "LessonId": 89,
        "Lesson": {
          "ModuleId": 37,
          "Module": {
            "SubTrackId": 10,
            "SubTrack": {
              "Level": 1,
              "TrackId": 4,
              "Track": null,
              "Name": "Ready",
              "Modules": [
                {
                  "SubTrackId": 10,
                  "Name": "Power Up",
                  "Color": "#2ecc71",
                  "OrderIndicator": 3,
                  "Lessons": [
                    {
                      "ModuleId": 38,
                      "Name": "AI fundamentals",
                      "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "Slides": [
                        {
                          "LessonId": 91,
                          "Name": "Goals of AI",
                          "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 415
                        },
                        {
                          "LessonId": 91,
                          "Name": "AI Agent",
                          "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 416
                        },
                        {
                          "LessonId": 91,
                          "Name": "Goal-based agents",
                          "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 417
                        },
                        {
                          "LessonId": 91,
                          "Name": "Modeling",
                          "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 418
                        },
                        {
                          "LessonId": 91,
                          "Name": "Solving problem by searching",
                          "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 419
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 91
                    },
                    {
                      "ModuleId": 38,
                      "Name": "ML fundamentals",
                      "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "Slides": [
                        {
                          "LessonId": 92,
                          "Name": "Features Engineering",
                          "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 420
                        },
                        {
                          "LessonId": 92,
                          "Name": "K-means",
                          "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 421
                        },
                        {
                          "LessonId": 92,
                          "Name": "KNN",
                          "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 422
                        },
                        {
                          "LessonId": 92,
                          "Name": "Learning Decision Trees",
                          "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 423
                        },
                        {
                          "LessonId": 92,
                          "Name": "Regression",
                          "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 15,
                          "IsRead": null,
                          "Id": 424
                        },
                        {
                          "LessonId": 92,
                          "Name": "Support Vector Machine",
                          "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 18,
                          "IsRead": null,
                          "Id": 425
                        },
                        {
                          "LessonId": 92,
                          "Name": "Neural Networks",
                          "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 24,
                          "IsRead": null,
                          "Id": 426
                        },
                        {
                          "LessonId": 92,
                          "Name": "Mini Project",
                          "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 27,
                          "IsRead": null,
                          "Id": 427
                        },
                        {
                          "LessonId": 92,
                          "Name": "Supervised Learning",
                          "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 461
                        },
                        {
                          "LessonId": 92,
                          "Name": "Naive Bayes Classifier",
                          "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 21,
                          "IsRead": null,
                          "Id": 502
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 92
                    }
                  ],
                  "Id": 38
                },
                {
                  "SubTrackId": 10,
                  "Name": "Launch",
                  "Color": "#3498db",
                  "OrderIndicator": 6,
                  "Lessons": [
                    {
                      "ModuleId": 39,
                      "Name": "Extras",
                      "Content": "",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "Slides": [
                        {
                          "LessonId": 93,
                          "Name": "NLP",
                          "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 428
                        },
                        {
                          "LessonId": 93,
                          "Name": "Objects Detection",
                          "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 429
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 93
                    }
                  ],
                  "Id": 39
                }
              ],
              "MigrationVersion": 25,
              "ProductTemplateId": 18,
              "Locked": false,
              "Progress": 0.0,
              "Id": 10
            },
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 37,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 90,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 412
                  },
                  {
                    "LessonId": 90,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 413
                  },
                  {
                    "LessonId": 90,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 414
                  },
                  {
                    "LessonId": 90,
                    "Name": "Mini-Project",
                    "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 612
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 90
              },
              {
                "ModuleId": 37,
                "Name": "Matplotlib",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 111,
                    "Name": "First Plot",
                    "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 503
                  },
                  {
                    "LessonId": 111,
                    "Name": "Bar Charts",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 504
                  },
                  {
                    "LessonId": 111,
                    "Name": "Scatter Plot",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 505
                  },
                  {
                    "LessonId": 111,
                    "Name": "Combine Plots",
                    "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 506
                  },
                  {
                    "LessonId": 111,
                    "Name": "Histogram",
                    "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 821
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 111
              },
              {
                "ModuleId": 37,
                "Name": "Pandas",
                "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 112,
                    "Name": "Object Creation",
                    "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 507
                  },
                  {
                    "LessonId": 112,
                    "Name": "Viewing data",
                    "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 508
                  },
                  {
                    "LessonId": 112,
                    "Name": "Pivot Table",
                    "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 509
                  },
                  {
                    "LessonId": 112,
                    "Name": "Case Study",
                    "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 822
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 112
              }
            ],
            "Id": 37
          },
          "Name": "Python",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "Slides": [
            {
              "LessonId": 89,
              "Name": "Hello Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 404
            },
            {
              "LessonId": 89,
              "Name": "Variables",
              "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 405
            },
            {
              "LessonId": 89,
              "Name": "Conditions",
              "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 406
            },
            {
              "LessonId": 89,
              "Name": "Looping",
              "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 407
            },
            {
              "LessonId": 89,
              "Name": "Lists",
              "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 408
            },
            {
              "LessonId": 89,
              "Name": "Dicts",
              "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 409
            },
            {
              "LessonId": 89,
              "Name": "Function and Classes",
              "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 410
            },
            {
              "LessonId": 89,
              "Name": "Mini Project",
              "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
              "OrderIndicator": 21,
              "IsRead": null,
              "Id": 411
            }
          ],
          "Quizzes": [],
          "Progress": 0.0,
          "Id": 89
        },
        "Questions": [
          {
            "Content": "Which function to display the content of a variable?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "print()",
                "IsCorrect": true,
                "QuestionId": 40,
                "Answers": null,
                "Id": 159
              },
              {
                "Content": "display()",
                "IsCorrect": false,
                "QuestionId": 40,
                "Answers": null,
                "Id": 160
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 40
          },
          {
            "Content": "Which of the following is the exponent operator?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "^",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 161
              },
              {
                "Content": "*",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 162
              },
              {
                "Content": "**",
                "IsCorrect": true,
                "QuestionId": 41,
                "Answers": null,
                "Id": 163
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 41
          },
          {
            "Content": "What correctly imports the datetime library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import datatime",
                "IsCorrect": true,
                "QuestionId": 42,
                "Answers": null,
                "Id": 164
              },
              {
                "Content": "include datatime",
                "IsCorrect": false,
                "QuestionId": 42,
                "Answers": null,
                "Id": 165
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 42
          },
          {
            "Content": "Which is the correct way to write a for loop?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "for i=0; i < 10; i++",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 169
              },
              {
                "Content": "for i from 0 to 10",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 170
              },
              {
                "Content": "for in in range(0,10)",
                "IsCorrect": true,
                "QuestionId": 44,
                "Answers": null,
                "Id": 171
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 44
          },
          {
            "Content": "What are functions?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "Code that can only be used once in the application",
                "IsCorrect": false,
                "QuestionId": 45,
                "Answers": null,
                "Id": 172
              },
              {
                "Content": "Reusable pieces of code that can be called on throughout an application",
                "IsCorrect": true,
                "QuestionId": 45,
                "Answers": null,
                "Id": 173
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 45
          },
          {
            "Content": "What is the right way to read from 2x2 matrix?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "matrix(x,y)",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 174
              },
              {
                "Content": "matrix[x,y]",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 175
              },
              {
                "Content": "matrix[x][y]",
                "IsCorrect": true,
                "QuestionId": 46,
                "Answers": null,
                "Id": 176
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 46
          }
        ],
        "QuizResults": null,
        "IsDone": false,
        "Id": 7
      },
      "Choices": [
        {
          "Content": "import fileinput",
          "IsCorrect": true,
          "QuestionId": 43,
          "Answers": null,
          "Id": 166
        },
        {
          "Content": "include fileinput",
          "IsCorrect": false,
          "QuestionId": 43,
          "Answers": null,
          "Id": 167
        },
        {
          "Content": "require fileinput",
          "IsCorrect": false,
          "QuestionId": 43,
          "Answers": null,
          "Id": 168
        }
      ],
      "IsAnswered": false,
      "IsCorrect": false,
      "Id": 43
    },
    {
      "Content": "Which is the correct way to write a for loop?",
      "QuizId": 7,
      "Quiz": {
        "Name": "Python Quiz",
        "OrderIndicator": 0,
        "LessonId": 89,
        "Lesson": {
          "ModuleId": 37,
          "Module": {
            "SubTrackId": 10,
            "SubTrack": {
              "Level": 1,
              "TrackId": 4,
              "Track": null,
              "Name": "Ready",
              "Modules": [
                {
                  "SubTrackId": 10,
                  "Name": "Power Up",
                  "Color": "#2ecc71",
                  "OrderIndicator": 3,
                  "Lessons": [
                    {
                      "ModuleId": 38,
                      "Name": "AI fundamentals",
                      "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "Slides": [
                        {
                          "LessonId": 91,
                          "Name": "Goals of AI",
                          "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 415
                        },
                        {
                          "LessonId": 91,
                          "Name": "AI Agent",
                          "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 416
                        },
                        {
                          "LessonId": 91,
                          "Name": "Goal-based agents",
                          "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 417
                        },
                        {
                          "LessonId": 91,
                          "Name": "Modeling",
                          "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 418
                        },
                        {
                          "LessonId": 91,
                          "Name": "Solving problem by searching",
                          "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 419
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 91
                    },
                    {
                      "ModuleId": 38,
                      "Name": "ML fundamentals",
                      "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "Slides": [
                        {
                          "LessonId": 92,
                          "Name": "Features Engineering",
                          "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 420
                        },
                        {
                          "LessonId": 92,
                          "Name": "K-means",
                          "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 421
                        },
                        {
                          "LessonId": 92,
                          "Name": "KNN",
                          "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 422
                        },
                        {
                          "LessonId": 92,
                          "Name": "Learning Decision Trees",
                          "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 423
                        },
                        {
                          "LessonId": 92,
                          "Name": "Regression",
                          "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 15,
                          "IsRead": null,
                          "Id": 424
                        },
                        {
                          "LessonId": 92,
                          "Name": "Support Vector Machine",
                          "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 18,
                          "IsRead": null,
                          "Id": 425
                        },
                        {
                          "LessonId": 92,
                          "Name": "Neural Networks",
                          "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 24,
                          "IsRead": null,
                          "Id": 426
                        },
                        {
                          "LessonId": 92,
                          "Name": "Mini Project",
                          "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 27,
                          "IsRead": null,
                          "Id": 427
                        },
                        {
                          "LessonId": 92,
                          "Name": "Supervised Learning",
                          "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 461
                        },
                        {
                          "LessonId": 92,
                          "Name": "Naive Bayes Classifier",
                          "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 21,
                          "IsRead": null,
                          "Id": 502
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 92
                    }
                  ],
                  "Id": 38
                },
                {
                  "SubTrackId": 10,
                  "Name": "Launch",
                  "Color": "#3498db",
                  "OrderIndicator": 6,
                  "Lessons": [
                    {
                      "ModuleId": 39,
                      "Name": "Extras",
                      "Content": "",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "Slides": [
                        {
                          "LessonId": 93,
                          "Name": "NLP",
                          "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 428
                        },
                        {
                          "LessonId": 93,
                          "Name": "Objects Detection",
                          "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 429
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 93
                    }
                  ],
                  "Id": 39
                }
              ],
              "MigrationVersion": 25,
              "ProductTemplateId": 18,
              "Locked": false,
              "Progress": 0.0,
              "Id": 10
            },
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 37,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 90,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 412
                  },
                  {
                    "LessonId": 90,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 413
                  },
                  {
                    "LessonId": 90,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 414
                  },
                  {
                    "LessonId": 90,
                    "Name": "Mini-Project",
                    "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 612
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 90
              },
              {
                "ModuleId": 37,
                "Name": "Matplotlib",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 111,
                    "Name": "First Plot",
                    "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 503
                  },
                  {
                    "LessonId": 111,
                    "Name": "Bar Charts",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 504
                  },
                  {
                    "LessonId": 111,
                    "Name": "Scatter Plot",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 505
                  },
                  {
                    "LessonId": 111,
                    "Name": "Combine Plots",
                    "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 506
                  },
                  {
                    "LessonId": 111,
                    "Name": "Histogram",
                    "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 821
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 111
              },
              {
                "ModuleId": 37,
                "Name": "Pandas",
                "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 112,
                    "Name": "Object Creation",
                    "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 507
                  },
                  {
                    "LessonId": 112,
                    "Name": "Viewing data",
                    "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 508
                  },
                  {
                    "LessonId": 112,
                    "Name": "Pivot Table",
                    "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 509
                  },
                  {
                    "LessonId": 112,
                    "Name": "Case Study",
                    "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 822
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 112
              }
            ],
            "Id": 37
          },
          "Name": "Python",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "Slides": [
            {
              "LessonId": 89,
              "Name": "Hello Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 404
            },
            {
              "LessonId": 89,
              "Name": "Variables",
              "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 405
            },
            {
              "LessonId": 89,
              "Name": "Conditions",
              "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 406
            },
            {
              "LessonId": 89,
              "Name": "Looping",
              "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 407
            },
            {
              "LessonId": 89,
              "Name": "Lists",
              "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 408
            },
            {
              "LessonId": 89,
              "Name": "Dicts",
              "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 409
            },
            {
              "LessonId": 89,
              "Name": "Function and Classes",
              "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 410
            },
            {
              "LessonId": 89,
              "Name": "Mini Project",
              "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
              "OrderIndicator": 21,
              "IsRead": null,
              "Id": 411
            }
          ],
          "Quizzes": [],
          "Progress": 0.0,
          "Id": 89
        },
        "Questions": [
          {
            "Content": "Which function to display the content of a variable?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "print()",
                "IsCorrect": true,
                "QuestionId": 40,
                "Answers": null,
                "Id": 159
              },
              {
                "Content": "display()",
                "IsCorrect": false,
                "QuestionId": 40,
                "Answers": null,
                "Id": 160
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 40
          },
          {
            "Content": "Which of the following is the exponent operator?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "^",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 161
              },
              {
                "Content": "*",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 162
              },
              {
                "Content": "**",
                "IsCorrect": true,
                "QuestionId": 41,
                "Answers": null,
                "Id": 163
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 41
          },
          {
            "Content": "What correctly imports the datetime library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import datatime",
                "IsCorrect": true,
                "QuestionId": 42,
                "Answers": null,
                "Id": 164
              },
              {
                "Content": "include datatime",
                "IsCorrect": false,
                "QuestionId": 42,
                "Answers": null,
                "Id": 165
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 42
          },
          {
            "Content": "What correctly imports the fileinput library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import fileinput",
                "IsCorrect": true,
                "QuestionId": 43,
                "Answers": null,
                "Id": 166
              },
              {
                "Content": "include fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 167
              },
              {
                "Content": "require fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 168
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 43
          },
          {
            "Content": "What are functions?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "Code that can only be used once in the application",
                "IsCorrect": false,
                "QuestionId": 45,
                "Answers": null,
                "Id": 172
              },
              {
                "Content": "Reusable pieces of code that can be called on throughout an application",
                "IsCorrect": true,
                "QuestionId": 45,
                "Answers": null,
                "Id": 173
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 45
          },
          {
            "Content": "What is the right way to read from 2x2 matrix?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "matrix(x,y)",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 174
              },
              {
                "Content": "matrix[x,y]",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 175
              },
              {
                "Content": "matrix[x][y]",
                "IsCorrect": true,
                "QuestionId": 46,
                "Answers": null,
                "Id": 176
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 46
          }
        ],
        "QuizResults": null,
        "IsDone": false,
        "Id": 7
      },
      "Choices": [
        {
          "Content": "for i=0; i < 10; i++",
          "IsCorrect": false,
          "QuestionId": 44,
          "Answers": null,
          "Id": 169
        },
        {
          "Content": "for i from 0 to 10",
          "IsCorrect": false,
          "QuestionId": 44,
          "Answers": null,
          "Id": 170
        },
        {
          "Content": "for in in range(0,10)",
          "IsCorrect": true,
          "QuestionId": 44,
          "Answers": null,
          "Id": 171
        }
      ],
      "IsAnswered": false,
      "IsCorrect": false,
      "Id": 44
    },
    {
      "Content": "What are functions?",
      "QuizId": 7,
      "Quiz": {
        "Name": "Python Quiz",
        "OrderIndicator": 0,
        "LessonId": 89,
        "Lesson": {
          "ModuleId": 37,
          "Module": {
            "SubTrackId": 10,
            "SubTrack": {
              "Level": 1,
              "TrackId": 4,
              "Track": null,
              "Name": "Ready",
              "Modules": [
                {
                  "SubTrackId": 10,
                  "Name": "Power Up",
                  "Color": "#2ecc71",
                  "OrderIndicator": 3,
                  "Lessons": [
                    {
                      "ModuleId": 38,
                      "Name": "AI fundamentals",
                      "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "Slides": [
                        {
                          "LessonId": 91,
                          "Name": "Goals of AI",
                          "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 415
                        },
                        {
                          "LessonId": 91,
                          "Name": "AI Agent",
                          "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 416
                        },
                        {
                          "LessonId": 91,
                          "Name": "Goal-based agents",
                          "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 417
                        },
                        {
                          "LessonId": 91,
                          "Name": "Modeling",
                          "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 418
                        },
                        {
                          "LessonId": 91,
                          "Name": "Solving problem by searching",
                          "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 419
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 91
                    },
                    {
                      "ModuleId": 38,
                      "Name": "ML fundamentals",
                      "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "Slides": [
                        {
                          "LessonId": 92,
                          "Name": "Features Engineering",
                          "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 420
                        },
                        {
                          "LessonId": 92,
                          "Name": "K-means",
                          "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 421
                        },
                        {
                          "LessonId": 92,
                          "Name": "KNN",
                          "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 422
                        },
                        {
                          "LessonId": 92,
                          "Name": "Learning Decision Trees",
                          "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 423
                        },
                        {
                          "LessonId": 92,
                          "Name": "Regression",
                          "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 15,
                          "IsRead": null,
                          "Id": 424
                        },
                        {
                          "LessonId": 92,
                          "Name": "Support Vector Machine",
                          "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 18,
                          "IsRead": null,
                          "Id": 425
                        },
                        {
                          "LessonId": 92,
                          "Name": "Neural Networks",
                          "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 24,
                          "IsRead": null,
                          "Id": 426
                        },
                        {
                          "LessonId": 92,
                          "Name": "Mini Project",
                          "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 27,
                          "IsRead": null,
                          "Id": 427
                        },
                        {
                          "LessonId": 92,
                          "Name": "Supervised Learning",
                          "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 461
                        },
                        {
                          "LessonId": 92,
                          "Name": "Naive Bayes Classifier",
                          "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 21,
                          "IsRead": null,
                          "Id": 502
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 92
                    }
                  ],
                  "Id": 38
                },
                {
                  "SubTrackId": 10,
                  "Name": "Launch",
                  "Color": "#3498db",
                  "OrderIndicator": 6,
                  "Lessons": [
                    {
                      "ModuleId": 39,
                      "Name": "Extras",
                      "Content": "",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "Slides": [
                        {
                          "LessonId": 93,
                          "Name": "NLP",
                          "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 428
                        },
                        {
                          "LessonId": 93,
                          "Name": "Objects Detection",
                          "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 429
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 93
                    }
                  ],
                  "Id": 39
                }
              ],
              "MigrationVersion": 25,
              "ProductTemplateId": 18,
              "Locked": false,
              "Progress": 0.0,
              "Id": 10
            },
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 37,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 90,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 412
                  },
                  {
                    "LessonId": 90,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 413
                  },
                  {
                    "LessonId": 90,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 414
                  },
                  {
                    "LessonId": 90,
                    "Name": "Mini-Project",
                    "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 612
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 90
              },
              {
                "ModuleId": 37,
                "Name": "Matplotlib",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 111,
                    "Name": "First Plot",
                    "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 503
                  },
                  {
                    "LessonId": 111,
                    "Name": "Bar Charts",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 504
                  },
                  {
                    "LessonId": 111,
                    "Name": "Scatter Plot",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 505
                  },
                  {
                    "LessonId": 111,
                    "Name": "Combine Plots",
                    "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 506
                  },
                  {
                    "LessonId": 111,
                    "Name": "Histogram",
                    "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 821
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 111
              },
              {
                "ModuleId": 37,
                "Name": "Pandas",
                "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 112,
                    "Name": "Object Creation",
                    "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 507
                  },
                  {
                    "LessonId": 112,
                    "Name": "Viewing data",
                    "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 508
                  },
                  {
                    "LessonId": 112,
                    "Name": "Pivot Table",
                    "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 509
                  },
                  {
                    "LessonId": 112,
                    "Name": "Case Study",
                    "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 822
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 112
              }
            ],
            "Id": 37
          },
          "Name": "Python",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "Slides": [
            {
              "LessonId": 89,
              "Name": "Hello Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 404
            },
            {
              "LessonId": 89,
              "Name": "Variables",
              "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 405
            },
            {
              "LessonId": 89,
              "Name": "Conditions",
              "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 406
            },
            {
              "LessonId": 89,
              "Name": "Looping",
              "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 407
            },
            {
              "LessonId": 89,
              "Name": "Lists",
              "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 408
            },
            {
              "LessonId": 89,
              "Name": "Dicts",
              "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 409
            },
            {
              "LessonId": 89,
              "Name": "Function and Classes",
              "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 410
            },
            {
              "LessonId": 89,
              "Name": "Mini Project",
              "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
              "OrderIndicator": 21,
              "IsRead": null,
              "Id": 411
            }
          ],
          "Quizzes": [],
          "Progress": 0.0,
          "Id": 89
        },
        "Questions": [
          {
            "Content": "Which function to display the content of a variable?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "print()",
                "IsCorrect": true,
                "QuestionId": 40,
                "Answers": null,
                "Id": 159
              },
              {
                "Content": "display()",
                "IsCorrect": false,
                "QuestionId": 40,
                "Answers": null,
                "Id": 160
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 40
          },
          {
            "Content": "Which of the following is the exponent operator?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "^",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 161
              },
              {
                "Content": "*",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 162
              },
              {
                "Content": "**",
                "IsCorrect": true,
                "QuestionId": 41,
                "Answers": null,
                "Id": 163
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 41
          },
          {
            "Content": "What correctly imports the datetime library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import datatime",
                "IsCorrect": true,
                "QuestionId": 42,
                "Answers": null,
                "Id": 164
              },
              {
                "Content": "include datatime",
                "IsCorrect": false,
                "QuestionId": 42,
                "Answers": null,
                "Id": 165
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 42
          },
          {
            "Content": "What correctly imports the fileinput library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import fileinput",
                "IsCorrect": true,
                "QuestionId": 43,
                "Answers": null,
                "Id": 166
              },
              {
                "Content": "include fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 167
              },
              {
                "Content": "require fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 168
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 43
          },
          {
            "Content": "Which is the correct way to write a for loop?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "for i=0; i < 10; i++",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 169
              },
              {
                "Content": "for i from 0 to 10",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 170
              },
              {
                "Content": "for in in range(0,10)",
                "IsCorrect": true,
                "QuestionId": 44,
                "Answers": null,
                "Id": 171
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 44
          },
          {
            "Content": "What is the right way to read from 2x2 matrix?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "matrix(x,y)",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 174
              },
              {
                "Content": "matrix[x,y]",
                "IsCorrect": false,
                "QuestionId": 46,
                "Answers": null,
                "Id": 175
              },
              {
                "Content": "matrix[x][y]",
                "IsCorrect": true,
                "QuestionId": 46,
                "Answers": null,
                "Id": 176
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 46
          }
        ],
        "QuizResults": null,
        "IsDone": false,
        "Id": 7
      },
      "Choices": [
        {
          "Content": "Code that can only be used once in the application",
          "IsCorrect": false,
          "QuestionId": 45,
          "Answers": null,
          "Id": 172
        },
        {
          "Content": "Reusable pieces of code that can be called on throughout an application",
          "IsCorrect": true,
          "QuestionId": 45,
          "Answers": null,
          "Id": 173
        }
      ],
      "IsAnswered": false,
      "IsCorrect": false,
      "Id": 45
    },
    {
      "Content": "What is the right way to read from 2x2 matrix?",
      "QuizId": 7,
      "Quiz": {
        "Name": "Python Quiz",
        "OrderIndicator": 0,
        "LessonId": 89,
        "Lesson": {
          "ModuleId": 37,
          "Module": {
            "SubTrackId": 10,
            "SubTrack": {
              "Level": 1,
              "TrackId": 4,
              "Track": null,
              "Name": "Ready",
              "Modules": [
                {
                  "SubTrackId": 10,
                  "Name": "Power Up",
                  "Color": "#2ecc71",
                  "OrderIndicator": 3,
                  "Lessons": [
                    {
                      "ModuleId": 38,
                      "Name": "AI fundamentals",
                      "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "Slides": [
                        {
                          "LessonId": 91,
                          "Name": "Goals of AI",
                          "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 415
                        },
                        {
                          "LessonId": 91,
                          "Name": "AI Agent",
                          "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 416
                        },
                        {
                          "LessonId": 91,
                          "Name": "Goal-based agents",
                          "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 417
                        },
                        {
                          "LessonId": 91,
                          "Name": "Modeling",
                          "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 418
                        },
                        {
                          "LessonId": 91,
                          "Name": "Solving problem by searching",
                          "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 419
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 91
                    },
                    {
                      "ModuleId": 38,
                      "Name": "ML fundamentals",
                      "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 15,
                      "Slides": [
                        {
                          "LessonId": 92,
                          "Name": "Features Engineering",
                          "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 420
                        },
                        {
                          "LessonId": 92,
                          "Name": "K-means",
                          "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 421
                        },
                        {
                          "LessonId": 92,
                          "Name": "KNN",
                          "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 9,
                          "IsRead": null,
                          "Id": 422
                        },
                        {
                          "LessonId": 92,
                          "Name": "Learning Decision Trees",
                          "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 12,
                          "IsRead": null,
                          "Id": 423
                        },
                        {
                          "LessonId": 92,
                          "Name": "Regression",
                          "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 15,
                          "IsRead": null,
                          "Id": 424
                        },
                        {
                          "LessonId": 92,
                          "Name": "Support Vector Machine",
                          "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 18,
                          "IsRead": null,
                          "Id": 425
                        },
                        {
                          "LessonId": 92,
                          "Name": "Neural Networks",
                          "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 24,
                          "IsRead": null,
                          "Id": 426
                        },
                        {
                          "LessonId": 92,
                          "Name": "Mini Project",
                          "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 27,
                          "IsRead": null,
                          "Id": 427
                        },
                        {
                          "LessonId": 92,
                          "Name": "Supervised Learning",
                          "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 6,
                          "IsRead": null,
                          "Id": 461
                        },
                        {
                          "LessonId": 92,
                          "Name": "Naive Bayes Classifier",
                          "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 21,
                          "IsRead": null,
                          "Id": 502
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 92
                    }
                  ],
                  "Id": 38
                },
                {
                  "SubTrackId": 10,
                  "Name": "Launch",
                  "Color": "#3498db",
                  "OrderIndicator": 6,
                  "Lessons": [
                    {
                      "ModuleId": 39,
                      "Name": "Extras",
                      "Content": "",
                      "SandboxUrl": "",
                      "OrderIndicator": 18,
                      "Slides": [
                        {
                          "LessonId": 93,
                          "Name": "NLP",
                          "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 0,
                          "IsRead": null,
                          "Id": 428
                        },
                        {
                          "LessonId": 93,
                          "Name": "Objects Detection",
                          "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                          "SandboxUrl": "",
                          "OrderIndicator": 3,
                          "IsRead": null,
                          "Id": 429
                        }
                      ],
                      "Quizzes": null,
                      "Progress": 0.0,
                      "Id": 93
                    }
                  ],
                  "Id": 39
                }
              ],
              "MigrationVersion": 25,
              "ProductTemplateId": 18,
              "Locked": false,
              "Progress": 0.0,
              "Id": 10
            },
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 37,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 90,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 412
                  },
                  {
                    "LessonId": 90,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 413
                  },
                  {
                    "LessonId": 90,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 414
                  },
                  {
                    "LessonId": 90,
                    "Name": "Mini-Project",
                    "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 612
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 90
              },
              {
                "ModuleId": 37,
                "Name": "Matplotlib",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 111,
                    "Name": "First Plot",
                    "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 503
                  },
                  {
                    "LessonId": 111,
                    "Name": "Bar Charts",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 504
                  },
                  {
                    "LessonId": 111,
                    "Name": "Scatter Plot",
                    "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 505
                  },
                  {
                    "LessonId": 111,
                    "Name": "Combine Plots",
                    "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 506
                  },
                  {
                    "LessonId": 111,
                    "Name": "Histogram",
                    "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 821
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 111
              },
              {
                "ModuleId": 37,
                "Name": "Pandas",
                "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 112,
                    "Name": "Object Creation",
                    "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 507
                  },
                  {
                    "LessonId": 112,
                    "Name": "Viewing data",
                    "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 508
                  },
                  {
                    "LessonId": 112,
                    "Name": "Pivot Table",
                    "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 509
                  },
                  {
                    "LessonId": 112,
                    "Name": "Case Study",
                    "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 822
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 112
              }
            ],
            "Id": 37
          },
          "Name": "Python",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "Slides": [
            {
              "LessonId": 89,
              "Name": "Hello Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 404
            },
            {
              "LessonId": 89,
              "Name": "Variables",
              "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 405
            },
            {
              "LessonId": 89,
              "Name": "Conditions",
              "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 406
            },
            {
              "LessonId": 89,
              "Name": "Looping",
              "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 407
            },
            {
              "LessonId": 89,
              "Name": "Lists",
              "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 408
            },
            {
              "LessonId": 89,
              "Name": "Dicts",
              "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 409
            },
            {
              "LessonId": 89,
              "Name": "Function and Classes",
              "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 410
            },
            {
              "LessonId": 89,
              "Name": "Mini Project",
              "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
              "OrderIndicator": 21,
              "IsRead": null,
              "Id": 411
            }
          ],
          "Quizzes": [],
          "Progress": 0.0,
          "Id": 89
        },
        "Questions": [
          {
            "Content": "Which function to display the content of a variable?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "print()",
                "IsCorrect": true,
                "QuestionId": 40,
                "Answers": null,
                "Id": 159
              },
              {
                "Content": "display()",
                "IsCorrect": false,
                "QuestionId": 40,
                "Answers": null,
                "Id": 160
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 40
          },
          {
            "Content": "Which of the following is the exponent operator?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "^",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 161
              },
              {
                "Content": "*",
                "IsCorrect": false,
                "QuestionId": 41,
                "Answers": null,
                "Id": 162
              },
              {
                "Content": "**",
                "IsCorrect": true,
                "QuestionId": 41,
                "Answers": null,
                "Id": 163
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 41
          },
          {
            "Content": "What correctly imports the datetime library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import datatime",
                "IsCorrect": true,
                "QuestionId": 42,
                "Answers": null,
                "Id": 164
              },
              {
                "Content": "include datatime",
                "IsCorrect": false,
                "QuestionId": 42,
                "Answers": null,
                "Id": 165
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 42
          },
          {
            "Content": "What correctly imports the fileinput library?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "import fileinput",
                "IsCorrect": true,
                "QuestionId": 43,
                "Answers": null,
                "Id": 166
              },
              {
                "Content": "include fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 167
              },
              {
                "Content": "require fileinput",
                "IsCorrect": false,
                "QuestionId": 43,
                "Answers": null,
                "Id": 168
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 43
          },
          {
            "Content": "Which is the correct way to write a for loop?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "for i=0; i < 10; i++",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 169
              },
              {
                "Content": "for i from 0 to 10",
                "IsCorrect": false,
                "QuestionId": 44,
                "Answers": null,
                "Id": 170
              },
              {
                "Content": "for in in range(0,10)",
                "IsCorrect": true,
                "QuestionId": 44,
                "Answers": null,
                "Id": 171
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 44
          },
          {
            "Content": "What are functions?",
            "QuizId": 7,
            "Choices": [
              {
                "Content": "Code that can only be used once in the application",
                "IsCorrect": false,
                "QuestionId": 45,
                "Answers": null,
                "Id": 172
              },
              {
                "Content": "Reusable pieces of code that can be called on throughout an application",
                "IsCorrect": true,
                "QuestionId": 45,
                "Answers": null,
                "Id": 173
              }
            ],
            "IsAnswered": false,
            "IsCorrect": false,
            "Id": 45
          }
        ],
        "QuizResults": null,
        "IsDone": false,
        "Id": 7
      },
      "Choices": [
        {
          "Content": "matrix(x,y)",
          "IsCorrect": false,
          "QuestionId": 46,
          "Answers": null,
          "Id": 174
        },
        {
          "Content": "matrix[x,y]",
          "IsCorrect": false,
          "QuestionId": 46,
          "Answers": null,
          "Id": 175
        },
        {
          "Content": "matrix[x][y]",
          "IsCorrect": true,
          "QuestionId": 46,
          "Answers": null,
          "Id": 176
        }
      ],
      "IsAnswered": false,
      "IsCorrect": false,
      "Id": 46
    }
  ],
  "Choices": [
    {
      "Content": "print()",
      "IsCorrect": true,
      "QuestionId": 40,
      "Question": {
        "Content": "Which function to display the content of a variable?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "display()",
            "IsCorrect": false,
            "QuestionId": 40,
            "Answers": null,
            "Id": 160
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 40
      },
      "Answers": null,
      "Id": 159
    },
    {
      "Content": "display()",
      "IsCorrect": false,
      "QuestionId": 40,
      "Question": {
        "Content": "Which function to display the content of a variable?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "print()",
            "IsCorrect": true,
            "QuestionId": 40,
            "Answers": null,
            "Id": 159
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 40
      },
      "Answers": null,
      "Id": 160
    },
    {
      "Content": "^",
      "IsCorrect": false,
      "QuestionId": 41,
      "Question": {
        "Content": "Which of the following is the exponent operator?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "*",
            "IsCorrect": false,
            "QuestionId": 41,
            "Answers": null,
            "Id": 162
          },
          {
            "Content": "**",
            "IsCorrect": true,
            "QuestionId": 41,
            "Answers": null,
            "Id": 163
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 41
      },
      "Answers": null,
      "Id": 161
    },
    {
      "Content": "*",
      "IsCorrect": false,
      "QuestionId": 41,
      "Question": {
        "Content": "Which of the following is the exponent operator?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "^",
            "IsCorrect": false,
            "QuestionId": 41,
            "Answers": null,
            "Id": 161
          },
          {
            "Content": "**",
            "IsCorrect": true,
            "QuestionId": 41,
            "Answers": null,
            "Id": 163
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 41
      },
      "Answers": null,
      "Id": 162
    },
    {
      "Content": "**",
      "IsCorrect": true,
      "QuestionId": 41,
      "Question": {
        "Content": "Which of the following is the exponent operator?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "^",
            "IsCorrect": false,
            "QuestionId": 41,
            "Answers": null,
            "Id": 161
          },
          {
            "Content": "*",
            "IsCorrect": false,
            "QuestionId": 41,
            "Answers": null,
            "Id": 162
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 41
      },
      "Answers": null,
      "Id": 163
    },
    {
      "Content": "import datatime",
      "IsCorrect": true,
      "QuestionId": 42,
      "Question": {
        "Content": "What correctly imports the datetime library?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "include datatime",
            "IsCorrect": false,
            "QuestionId": 42,
            "Answers": null,
            "Id": 165
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 42
      },
      "Answers": null,
      "Id": 164
    },
    {
      "Content": "include datatime",
      "IsCorrect": false,
      "QuestionId": 42,
      "Question": {
        "Content": "What correctly imports the datetime library?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "import datatime",
            "IsCorrect": true,
            "QuestionId": 42,
            "Answers": null,
            "Id": 164
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 42
      },
      "Answers": null,
      "Id": 165
    },
    {
      "Content": "import fileinput",
      "IsCorrect": true,
      "QuestionId": 43,
      "Question": {
        "Content": "What correctly imports the fileinput library?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "include fileinput",
            "IsCorrect": false,
            "QuestionId": 43,
            "Answers": null,
            "Id": 167
          },
          {
            "Content": "require fileinput",
            "IsCorrect": false,
            "QuestionId": 43,
            "Answers": null,
            "Id": 168
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 43
      },
      "Answers": null,
      "Id": 166
    },
    {
      "Content": "include fileinput",
      "IsCorrect": false,
      "QuestionId": 43,
      "Question": {
        "Content": "What correctly imports the fileinput library?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "import fileinput",
            "IsCorrect": true,
            "QuestionId": 43,
            "Answers": null,
            "Id": 166
          },
          {
            "Content": "require fileinput",
            "IsCorrect": false,
            "QuestionId": 43,
            "Answers": null,
            "Id": 168
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 43
      },
      "Answers": null,
      "Id": 167
    },
    {
      "Content": "require fileinput",
      "IsCorrect": false,
      "QuestionId": 43,
      "Question": {
        "Content": "What correctly imports the fileinput library?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "import fileinput",
            "IsCorrect": true,
            "QuestionId": 43,
            "Answers": null,
            "Id": 166
          },
          {
            "Content": "include fileinput",
            "IsCorrect": false,
            "QuestionId": 43,
            "Answers": null,
            "Id": 167
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 43
      },
      "Answers": null,
      "Id": 168
    },
    {
      "Content": "for i=0; i < 10; i++",
      "IsCorrect": false,
      "QuestionId": 44,
      "Question": {
        "Content": "Which is the correct way to write a for loop?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "for i from 0 to 10",
            "IsCorrect": false,
            "QuestionId": 44,
            "Answers": null,
            "Id": 170
          },
          {
            "Content": "for in in range(0,10)",
            "IsCorrect": true,
            "QuestionId": 44,
            "Answers": null,
            "Id": 171
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 44
      },
      "Answers": null,
      "Id": 169
    },
    {
      "Content": "for i from 0 to 10",
      "IsCorrect": false,
      "QuestionId": 44,
      "Question": {
        "Content": "Which is the correct way to write a for loop?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "for i=0; i < 10; i++",
            "IsCorrect": false,
            "QuestionId": 44,
            "Answers": null,
            "Id": 169
          },
          {
            "Content": "for in in range(0,10)",
            "IsCorrect": true,
            "QuestionId": 44,
            "Answers": null,
            "Id": 171
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 44
      },
      "Answers": null,
      "Id": 170
    },
    {
      "Content": "for in in range(0,10)",
      "IsCorrect": true,
      "QuestionId": 44,
      "Question": {
        "Content": "Which is the correct way to write a for loop?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "for i=0; i < 10; i++",
            "IsCorrect": false,
            "QuestionId": 44,
            "Answers": null,
            "Id": 169
          },
          {
            "Content": "for i from 0 to 10",
            "IsCorrect": false,
            "QuestionId": 44,
            "Answers": null,
            "Id": 170
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 44
      },
      "Answers": null,
      "Id": 171
    },
    {
      "Content": "Code that can only be used once in the application",
      "IsCorrect": false,
      "QuestionId": 45,
      "Question": {
        "Content": "What are functions?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "Reusable pieces of code that can be called on throughout an application",
            "IsCorrect": true,
            "QuestionId": 45,
            "Answers": null,
            "Id": 173
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 45
      },
      "Answers": null,
      "Id": 172
    },
    {
      "Content": "Reusable pieces of code that can be called on throughout an application",
      "IsCorrect": true,
      "QuestionId": 45,
      "Question": {
        "Content": "What are functions?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What is the right way to read from 2x2 matrix?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "matrix(x,y)",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 174
                },
                {
                  "Content": "matrix[x,y]",
                  "IsCorrect": false,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 175
                },
                {
                  "Content": "matrix[x][y]",
                  "IsCorrect": true,
                  "QuestionId": 46,
                  "Answers": null,
                  "Id": 176
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 46
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "Code that can only be used once in the application",
            "IsCorrect": false,
            "QuestionId": 45,
            "Answers": null,
            "Id": 172
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 45
      },
      "Answers": null,
      "Id": 173
    },
    {
      "Content": "matrix(x,y)",
      "IsCorrect": false,
      "QuestionId": 46,
      "Question": {
        "Content": "What is the right way to read from 2x2 matrix?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "matrix[x,y]",
            "IsCorrect": false,
            "QuestionId": 46,
            "Answers": null,
            "Id": 175
          },
          {
            "Content": "matrix[x][y]",
            "IsCorrect": true,
            "QuestionId": 46,
            "Answers": null,
            "Id": 176
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 46
      },
      "Answers": null,
      "Id": 174
    },
    {
      "Content": "matrix[x,y]",
      "IsCorrect": false,
      "QuestionId": 46,
      "Question": {
        "Content": "What is the right way to read from 2x2 matrix?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "matrix(x,y)",
            "IsCorrect": false,
            "QuestionId": 46,
            "Answers": null,
            "Id": 174
          },
          {
            "Content": "matrix[x][y]",
            "IsCorrect": true,
            "QuestionId": 46,
            "Answers": null,
            "Id": 176
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 46
      },
      "Answers": null,
      "Id": 175
    },
    {
      "Content": "matrix[x][y]",
      "IsCorrect": true,
      "QuestionId": 46,
      "Question": {
        "Content": "What is the right way to read from 2x2 matrix?",
        "QuizId": 7,
        "Quiz": {
          "Name": "Python Quiz",
          "OrderIndicator": 0,
          "LessonId": 89,
          "Lesson": {
            "ModuleId": 37,
            "Module": {
              "SubTrackId": 10,
              "SubTrack": {
                "Level": 1,
                "TrackId": 4,
                "Track": null,
                "Name": "Ready",
                "Modules": [
                  {
                    "SubTrackId": 10,
                    "Name": "Power Up",
                    "Color": "#2ecc71",
                    "OrderIndicator": 3,
                    "Lessons": [
                      {
                        "ModuleId": 38,
                        "Name": "AI fundamentals",
                        "Content": "<h1 id=\"ai\">AI</h1>\n<p>We -human- have for thousands of years tried to understand how we think.\nAI goes with idea one step further, with AI we want to create intelligence.</p>\n<h2 id=\"the-turing-test-approach\">The Turing Test approach</h2>\n<ul>\n<li>The Turing Test, proposed by Alan Turing (1950), was designed to provide a satisfactory\noperational definition of intelligence.</li>\n<li>A computer passes the test if a human interrogator, after\nposing some written questions, cannot tell whether the written responses come from a person\nor from a computer.</li>\n</ul>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/55/Turing_test_diagram.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 12,
                        "Slides": [
                          {
                            "LessonId": 91,
                            "Name": "Goals of AI",
                            "Content": "<h2 id=\"problems-that-we-want-to-solve-with-ai\">Problems that we want to solve with AI</h2>\n<p>The overall research goal of artificial intelligence is to create technology that allows computers and machines to function in an intelligent manner. The general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention.</p>\n<ul>\n<li>Reasoning, problem solving</li>\n<li>Knowledge representation</li>\n<li>Planning</li>\n<li>Learning</li>\n<li>Natural language processing</li>\n</ul>\n<p>Harder goals that we are far from achieving:</p>\n<ul>\n<li>Creativity</li>\n<li>General intelligence</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Give the goals of some famous AI.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 415
                          },
                          {
                            "LessonId": 91,
                            "Name": "AI Agent",
                            "Content": "<h2 id=\"agent-who-reacts-to-its-environment\">Agent who reacts to its environment</h2>\n<p>An agent is anything that can be viewed as perceiving its environment through sensors and\nacting upon that environment through actuators.</p>\n<h3 id=\"representation-of-an-agent\">Representation of an agent</h3>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/IntelligentAgent-SimpleReflex.png/408px-IntelligentAgent-SimpleReflex.png\">\n<p>Analyse the case of the Boston Dynamics robot \"Atlas\":</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRj34o4hN4I\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"simple-reflex-agents\">Simple reflex agents</h3>\n<pre><code class=\"language-ruby\">function SIMPLE_REFLEX_AGENT(percept) returns an action\n  persistent: rules, a set of condition–action rules\n\n  state ← INTERPRET_INPUT(percept)\n  rule ← RULE_MATCH(state, rules)\n  action ← rule.ACTION\n  return action\n</code></pre>\n<h3 id=\"example-of-rules-a-vacuum-cleaner-world-with-just-two-locations\">Example of Rules: A vacuum-cleaner world with just two locations</h3>\n<img src=\"https://3.bp.blogspot.com/-awZN_dv2vLI/VsVcMux__HI/AAAAAAAAAF0/-1ZRtzWXu9A/s1600/fig03.02.gif\">\n<pre><code class=\"language-javascript\">I am in A and A Dirty =&gt; Clean it\nI am in A and A Clean =&gt; Go Right\nI am in B and B Dirty =&gt; Clean it\nI am in A and B clean =&gt; Go Left\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 416
                          },
                          {
                            "LessonId": 91,
                            "Name": "Goal-based agents",
                            "Content": "<h3 id=\"goal-based-agents\">Goal-based agents</h3>\n<p>Knowing something about the current state of the environment is not always enough to decide\nwhat to do. For example, at a road junction, the taxi can turn left, turn right, or go straight\non. The correct decision depends on where the taxi is trying to get to. In other words, as well\nGOAL as a current state description, the agent needs some sort of goal information that describes\nsituations that are desirable—for example, being at the passenger’s destination. The agent\nprogram can combine this with the model (the same information as was used in the model-based\nreflex agent) to choose actions that achieve the goal. Figure 2.13 shows the goal-based\nagent’s structure.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 417
                          },
                          {
                            "LessonId": 91,
                            "Name": "Modeling",
                            "Content": "<h3 id=\"modeling\">Modeling</h3>\n<p>A problem can be defined formally by five components:</p>\n<ul>\n<li><p>The <b>initial state</b> that the agent starts in.</p>\n</li>\n<li><p>A description of the <b>possible actions</b> available to the agent. Given a particular state s,\nACTIONS(s) returns the set of actions that can be executed in s. We say that each of\nAPPLICABLE these actions is applicable in s.</p>\n</li>\n<li><p>A description of what each action does; the formal name for this is the transition\nmodel.</p>\n</li>\n<li><p>The goal test, which determines whether a given state is a goal state.</p>\n</li>\n<li><p>A path cost function that assigns a numeric cost to each path. The problem-solving\nagent chooses a cost function that reflects its own performance measure.</p>\n</li>\n</ul>\n<h3 id=\"example-the-vacuum-world\">Example: The vacuum world</h3>\n<img src=\"http://centurion2.com/AIHomework/Searching/VacuumWorld.JPG\">\n<ul>\n<li>States: The state is determined by both the agent location and the dirt locations. The\nagent is in one of two locations, each of which might or might not contain dirt.</li>\n<li>Initial state: Any state can be designated as the initial state</li>\n<li>Actions: In this simple environment, each state has just three actions: Left, Right, and\nSuck.</li>\n<li>Transition model: The actions have their expected effects, except that moving Left in\nthe leftmost square, moving Right in the rightmost square, and Sucking in a clean square\nhave no effect.</li>\n<li>Goal test: This checks whether all the squares are clean.</li>\n<li>Path cost: Each step costs 1, so the path cost is the number of steps in the path.</li>\n</ul>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 418
                          },
                          {
                            "LessonId": 91,
                            "Name": "Solving problem by searching",
                            "Content": "<h2 id=\"solving-problem-by-searching\">Solving problem by searching</h2>\n<p>We will use example of solving the problem of going from place Arad to place Bucharest:</p>\n<img src=\"http://www.massey.ac.nz/~mjjohnso/notes/59302/fig04.02.gif\">\n<p>We start from the root element \"Arad\" then we expand our state with the possible actions: \"Sibiu\", \"Timisoara\" and \"Zerind\"</p>\n<p>Each new node is called a \"leaf\" we test now if we get to our goal, if not we expand the state more and more until we get to our goal.</p>\n<p>Another point we need to be careful of redundant paths.</p>\n<img src=\"http://centurion2.com/AIHomework/Searching/AradBucharestPartial.JPG\">\n<h3 id=\"greedy-best-first-tree-search\">Greedy best-first tree search</h3>\n<p>Select leaf with best cost to get to our goal</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.03.gif\">\n<h3 id=\"a-search-minimizing-the-total-estimated-solution-cost\">A* search: Minimizing the total estimated solution cost</h3>\n<p>A* evaluates nodes by combining g(n), the cost to reach the node, and h(n), the cost\nto get from the node to the goal:</p>\n<img src=\"http://cs-alb-pc3.massey.ac.nz/notes/59302/fig04.04.gif\">\n<h1 id=\"lets-code\">Let's code:</h1>\n<p>Write in python a function that use A* search to find a path from city 1 to city 2.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 419
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 91
                      },
                      {
                        "ModuleId": 38,
                        "Name": "ML fundamentals",
                        "Content": "<h1 id=\"ml\">ML</h1>\n<p>An agent is learning if it improves its performance on future tasks after making observations\nabout the world.</p>\n<p>There are three types of feedback that determine the three main types of learning:</p>\n<ul>\n<li>unsupervised learning: the agent learns patterns in the input even though no explicit feedback is supplied.</li>\n<li>reinforcement learning: the agent learns from a series of reinforcements—rewards or punishments.</li>\n<li>supervised learning: the agent observes some example input–output pairs and learns a function that maps from input to output.</li>\n</ul>\n<img src=\"http://beta.cambridgespark.com/courses/jpm/figures/mod1_SuperUnsuper.png\">\n",
                        "SandboxUrl": "",
                        "OrderIndicator": 15,
                        "Slides": [
                          {
                            "LessonId": 92,
                            "Name": "Features Engineering",
                            "Content": "<h1 id=\"feature-engineering\">Feature engineering</h1>\n<p>Feature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.</p>\n<h2 id=\"datasets-sources\">Datasets sources</h2>\n<p><a href=\"https://www.kaggle.com/datasets\">Kaggle.com</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research\">List of datasets for machine learning research wikipedia</a></p>\n<h2 id=\"the-process-of-feature-engineering\">The process of feature engineering</h2>\n<ul>\n<li>Brainstorming or Testing features</li>\n<li>Deciding what features to create</li>\n<li>Creating features</li>\n<li>Checking how the features work with your model</li>\n<li>Improving your features if needed</li>\n<li>Go back to brainstorming/creating more features until the work is done.</li>\n</ul>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Analyse some of the datasets from Kaggle.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 420
                          },
                          {
                            "LessonId": 92,
                            "Name": "K-means",
                            "Content": "<h3 id=\"k-means\">K-Means</h3>\n<img src=\"https://uploads.toptal.io/blog/image/92528/toptal-blog-image-1463672901961-c86610183bb2ba67f979c421f6748893.gif\">\n<pre><code class=\"language-python\">from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint(kmeans.labels_)\nprint(kmeans.cluster_centers_)\nprint(kmeans.predict([[0, 0], [4, 4]]))\n</code></pre>\n<h3 id=\"mini-project-clustring-posts\">Mini project: Clustring posts</h3>\n<pre><code class=\"language-python\">import os\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=1)\nposts = [open(os.path.join(\"./posts\", f)).read() for f in os.listdir(\"./posts\")]\nX_train = vectorizer.fit_transform(posts)\n\nnew_post = \"imaging databases\"\nnew_post_vec = vectorizer.transform([new_post])\nprint(new_post_vec)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 421
                          },
                          {
                            "LessonId": 92,
                            "Name": "KNN",
                            "Content": "<h2 id=\"supervised-learning\">Supervised learning</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<h3 id=\"knn-k-nearest-neighbors\">KNN (K- Nearest Neighbors)</h3>\n<p>Example: Classify Iris flowers</p>\n<pre><code class=\"language-python\">\nimport numpy as np\nfrom sklearn import neighbors, datasets\n\nn_neighbors = 15\n\n# import some data to play with\niris = datasets.load_iris()\n\n# we only take the first two features. We could avoid this ugly\n# slicing by using a two-dim dataset\nX = iris.data[:, :2]\ny = iris.target\n\nclf = neighbors.KNeighborsClassifier(n_neighbors, weights='uniform')\nclf.fit(X, y)\n\nZ = clf.predict([3, 4])\n\nprint(Z)\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 9,
                            "IsRead": null,
                            "Id": 422
                          },
                          {
                            "LessonId": 92,
                            "Name": "Learning Decision Trees",
                            "Content": "<h3 id=\"learning-decision-trees\">LEARNING DECISION TREES</h3>\n<p>Example of data:</p>\n<img src=\"https://preview.ibb.co/n1Nb9w/Screen_Shot_2018_01_04_at_13_50_11.png\" alt=\"Screen_Shot_2018_01_04_at_13_50_11\" border=\"0\">\n<p>The result decision tree:</p>\n<img src=\"http://www.cs.bham.ac.uk/~mmk/Teaching/AI/figures/dectree-orig.jpg\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 12,
                            "IsRead": null,
                            "Id": 423
                          },
                          {
                            "LessonId": 92,
                            "Name": "Regression",
                            "Content": "<h3 id=\"regression\">Regression</h3>\n<img src=\"https://static1.squarespace.com/static/51d342a0e4b0290bcc56387d/t/51ddb856e4b0e5482bdf3e7a/1373485241911/weights.gif\">\n<pre><code class=\"language-python\">from sklearn import linear_model\n\nfp = sp.polyfit(x, y, deg)\nf  = sp.poly1d(fp)\n\nf([3, 4])\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nimport scipy as sp\n\nfp = sp.polyfit(friends, minutes, 1)\nf  = sp.poly1d(fp)\n\n# display f\nplt.scatter(friends, minutes)\narr = []\nfor i in sorted(friends):\n    arr.append(f(i))\nplt.plot(sorted(friends), arr, color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n<p>Exercise: write a program that predict number of website visitors giving an hour.</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 15,
                            "IsRead": null,
                            "Id": 424
                          },
                          {
                            "LessonId": 92,
                            "Name": "Support Vector Machine",
                            "Content": "<h3 id=\"support-vector-machine\">Support vector machine</h3>\n<img src=\"https://jeremykun.files.wordpress.com/2017/05/svm_lots_of_choices.gif?w=1800\">\n<p><br><br></p>\n<pre><code class=\"language-python\">from sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = svm.SVC()\nclf.fit(X, y)  \n\nr = clf.predict([[2., 2.]])\n\nclf.support_vectors_\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 18,
                            "IsRead": null,
                            "Id": 425
                          },
                          {
                            "LessonId": 92,
                            "Name": "Neural Networks",
                            "Content": "<h1 id=\"artificial-neural-networks\">ARTIFICIAL NEURAL NETWORKS</h1>\n<p><a href=\"https://techcrunch.com/2017/04/13/neural-networks-made-easy/\">https://techcrunch.com/2017/04/13/neural-networks-made-easy/</a></p>\n<img src=\"https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58db494a_karpathy-network/karpathy-network.png\">\n<h2 id=\"dataset\">Dataset</h2>\n<p><a href=\"https://www.kaggle.com/uciml/pima-indians-diabetes-database/data\">https://www.kaggle.com/uciml/pima-indians-diabetes-database/data</a></p>\n<h2 id=\"load-data\">Load data</h2>\n<pre><code class=\"language-python\">from keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\n\ndataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n# split into input (X) and output (Y) variables\nX = dataset[:,0:8]\nY = dataset[:,8]\n</code></pre>\n<h2 id=\"define-model\">Define Model</h2>\n<pre><code class=\"language-python\">model = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n</code></pre>\n<h2 id=\"compile-model\">Compile Model</h2>\n<pre><code class=\"language-python\">model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n</code></pre>\n<h2 id=\"fit-model\">Fit Model</h2>\n<pre><code class=\"language-python\">model.fit(X, Y, epochs=150, batch_size=10)\n</code></pre>\n<h2 id=\"evaluate-model\">Evaluate Model</h2>\n<pre><code class=\"language-python\">scores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n</code></pre>\n<h2 id=\"predictions\">Predictions</h2>\n<pre><code class=\"language-python\">prediction = model.predict(X[:10])\nprint(prediction)\n</code></pre>\n<h2 id=\"reinforcement-learning\">reinforcement learning</h2>\n<p><a href=\"https://github.com/openai/universe\">https://github.com/openai/universe</a></p>\n<h2 id=\"genetic-ml\">Genetic ML</h2>\n<p><a href=\"https://www.youtube.com/watch?v=aeWmdojEJf0\">https://www.youtube.com/watch?v=aeWmdojEJf0</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 24,
                            "IsRead": null,
                            "Id": 426
                          },
                          {
                            "LessonId": 92,
                            "Name": "Mini Project",
                            "Content": "<h2 id=\"mini-project\">Mini Project</h2>\n<p>The task is to predict, given an image, which digit it represents</p>\n<img src=\"http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_classification_001.png\">\n<pre><code class=\"language-python\">from keras.datasets import mnist\n\n# 4. Load pre-shuffled MNIST data into train and test sets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n</code></pre>\n<p>HINT: Convolution2D</p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 27,
                            "IsRead": null,
                            "Id": 427
                          },
                          {
                            "LessonId": 92,
                            "Name": "Supervised Learning",
                            "Content": "<h1 id=\"supervised-learning\">Supervised Learning</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ACmydtFDTGs\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"\"></iframe>\n<p>To create a supervised ML model we need first to train our model with some data. Then use this model to predict results.</p>\n<img src=\"http://static1.squarespace.com/static/5206b718e4b0bdc26006bae2/t/554771abe4b0deabe55d5faa/1430745524151/?format=495w\">\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 6,
                            "IsRead": null,
                            "Id": 461
                          },
                          {
                            "LessonId": 92,
                            "Name": "Naive Bayes Classifier",
                            "Content": "<h1 id=\"naive-bayes\">Naive Bayes</h1>\n<p>Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of independence between every pair of features.</p>\n<p>Read more <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">here</a>.</p>\n<h2 id=\"gaussian-naive-bayes\">Gaussian Naive Bayes</h2>\n<p>GaussianNB implements the Gaussian Naive Bayes algorithm for classification.</p>\n<pre><code class=\"language-python\">from sklearn import datasets\niris = datasets.load_iris()\n\n\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ny_pred = gnb.fit(iris.data, iris.target).predict(iris.data)\n\nprint( gnb.predict([iris.data[1]]) )\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 21,
                            "IsRead": null,
                            "Id": 502
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 92
                      }
                    ],
                    "Id": 38
                  },
                  {
                    "SubTrackId": 10,
                    "Name": "Launch",
                    "Color": "#3498db",
                    "OrderIndicator": 6,
                    "Lessons": [
                      {
                        "ModuleId": 39,
                        "Name": "Extras",
                        "Content": "",
                        "SandboxUrl": "",
                        "OrderIndicator": 18,
                        "Slides": [
                          {
                            "LessonId": 93,
                            "Name": "NLP",
                            "Content": "<h1 id=\"nlp\">NLP</h1>\n<p><a href=\"http://www.nltk.org/\">http://www.nltk.org/</a>\n<a href=\"https://textblob.readthedocs.io/en/dev/\">https://textblob.readthedocs.io/en/dev/</a></p>\n<pre><code class=\"language-python\">from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n# 0.060\n# -0.341\n\nblob.translate(to=\"es\")  # 'La amenaza titular de The Blob...'\n</code></pre>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 0,
                            "IsRead": null,
                            "Id": 428
                          },
                          {
                            "LessonId": 93,
                            "Name": "Objects Detection",
                            "Content": "<p>Real-Time Object Detection:\n<a href=\"https://pjreddie.com/darknet/yolo/\">https://pjreddie.com/darknet/yolo/</a></p>\n<p><a href=\"https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70\">https://towardsdatascience.com/tensorflow-image-recognition-python-api-e35f7d412a70</a></p>\n",
                            "SandboxUrl": "",
                            "OrderIndicator": 3,
                            "IsRead": null,
                            "Id": 429
                          }
                        ],
                        "Quizzes": null,
                        "Progress": 0.0,
                        "Id": 93
                      }
                    ],
                    "Id": 39
                  }
                ],
                "MigrationVersion": 25,
                "ProductTemplateId": 18,
                "Locked": false,
                "Progress": 0.0,
                "Id": 10
              },
              "Name": "Kickstart",
              "Color": "#1abc9c",
              "OrderIndicator": 0,
              "Lessons": [
                {
                  "ModuleId": 37,
                  "Name": "Numpy",
                  "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "Slides": [
                    {
                      "LessonId": 90,
                      "Name": "Arrays",
                      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 412
                    },
                    {
                      "LessonId": 90,
                      "Name": "Math",
                      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 413
                    },
                    {
                      "LessonId": 90,
                      "Name": "Indexing",
                      "Content": "<h2 id=\"slicing\">Slicing</h2>\n<h3 id=\"dim-arrays\">1-dim arrays</h3>\n<pre><code class=\"language-python\">a[0:2] # returns a[0] and a[1]\n</code></pre>\n<h3 id=\"dim-arrays-1\">2-dim arrays</h3>\n<pre><code class=\"language-python\">b[0:2,1] # returns b[0, 1] and b[1, 1]\n</code></pre>\n<pre><code class=\"language-python\">b[:1] # select all items at row 0\n</code></pre>\n<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 414
                    },
                    {
                      "LessonId": 90,
                      "Name": "Mini-Project",
                      "Content": "<h1 id=\"mini-project\">Mini Project</h1>\n<h2 id=\"import-image-to-work-with\">Import image to work with</h2>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import misc\n\nf = misc.face()\nplt.imshow(f)\nplt.show()\n</code></pre>\n<h2 id=\"tasks\">Tasks</h2>\n<ol>\n<li>Create 3 images with Red, green and bleu channels</li>\n</ol>\n<img src=\"https://image.ibb.co/fejBR6/Screen_Shot_2018_02_02_at_15_43_21.png\">\n<img src=\"https://image.ibb.co/kgCLKR/Screen_Shot_2018_02_02_at_15_43_28.png\">\n<img src=\"https://image.ibb.co/gg5Kw6/Screen_Shot_2018_02_02_at_15_43_33.png\">\n<ol start=\"2\">\n<li>Change image to Greyscale</li>\n</ol>\n<img src=\"https://preview.ibb.co/iUGW9R/Screen_Shot_2018_02_02_at_15_43_38.png\">\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 612
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 90
                },
                {
                  "ModuleId": 37,
                  "Name": "Matplotlib",
                  "Content": "",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "Slides": [
                    {
                      "LessonId": 111,
                      "Name": "First Plot",
                      "Content": "<h2 id=\"create-data\">Create data</h2>\n<pre><code class=\"language-python\">years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n</code></pre>\n<h2 id=\"import-matplotlibs-pyplot\">Import matplotlib's pyplot</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">plt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n</code></pre>\n<h2 id=\"display-plot\">Display plot</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 503
                    },
                    {
                      "LessonId": 111,
                      "Name": "Bar Charts",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">movies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n</code></pre>\n<h2 id=\"create-bar-chart\">create Bar chart</h2>\n<pre><code class=\"language-python\">from matplotlib import pyplot as plt\nplt.bar(movies, num_oscars)\n</code></pre>\n<h2 id=\"display-the-chart\">Display the chart</h2>\n<pre><code class=\"language-python\">plt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 504
                    },
                    {
                      "LessonId": 111,
                      "Name": "Scatter Plot",
                      "Content": "<h2 id=\"data\">Data</h2>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n</code></pre>\n<h2 id=\"create-scatter\">Create Scatter</h2>\n<pre><code class=\"language-python\">plt.scatter(friends, minutes)\n</code></pre>\n<h2 id=\"add-labels-and-show\">Add labels and show</h2>\n<pre><code class=\"language-python\">plt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 505
                    },
                    {
                      "LessonId": 111,
                      "Name": "Combine Plots",
                      "Content": "<p>To combine 2 plots just add the plots using methods we already see and then use \".show()\" to show them.</p>\n<p>Example:</p>\n<pre><code class=\"language-python\">friends = [ 70, 65, 72, 63, 71, 64, 60, 64, 67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\n\nplt.scatter(friends, minutes)\nplt.plot([60, 72], [105, 205], color='green', marker='', linestyle='solid')\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 12,
                      "IsRead": null,
                      "Id": 506
                    },
                    {
                      "LessonId": 111,
                      "Name": "Histogram",
                      "Content": "<h1 id=\"histogram-of-random-iq-values\">Histogram of random IQ values</h1>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>\n<h2 id=\"generate-random-data-normal-law\">Generate random data (Normal Law)</h2>\n<pre><code class=\"language-python\">mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n</code></pre>\n<h2 id=\"create-plot\">Create plot</h2>\n<pre><code class=\"language-python\">hist_arr = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 821
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 111
                },
                {
                  "ModuleId": 37,
                  "Name": "Pandas",
                  "Content": "<p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "Slides": [
                    {
                      "LessonId": 112,
                      "Name": "Object Creation",
                      "Content": "<h1 id=\"dataframes\">Dataframes</h1>\n<pre><code class=\"language-python\">import pandas as pd\ndf = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [100,50,-30,-50]})\n</code></pre>\n<h1 id=\"import-csvs\">import csvs</h1>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv')\n</code></pre>\n<h2 id=\"no-headers\">no headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None)\n</code></pre>\n<h2 id=\"adding-headers\">adding headers</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('/path/to/example.csv', header=None, names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'], index_col='UID')\n</code></pre>\n<h2 id=\"missing-values\">missing values</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=['.'])\n</code></pre>\n<h3 id=\"missing-values-by-column\">missing values by column</h3>\n<pre><code class=\"language-python\">missing_conditions = 'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\ndf = pd.read_csv('pandas_dataframe_importing_csv/example.csv', na_values=sentinels)\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 0,
                      "IsRead": null,
                      "Id": 507
                    },
                    {
                      "LessonId": 112,
                      "Name": "Viewing data",
                      "Content": "<h2 id=\"top-and-bottom-of-data\">Top and Bottom of data</h2>\n<pre><code class=\"language-python\">df.head()\ndf.tail(3)\n</code></pre>\n<h2 id=\"display-the-index-columns-and-the-underlying-numpy-data\">Display the index, columns, and the underlying numpy data</h2>\n<pre><code class=\"language-python\">df.index\ndf.columns\ndf.values\n</code></pre>\n<h2 id=\"transposing-data\">Transposing data</h2>\n<pre><code class=\"language-python\">df.T\n</code></pre>\n<h2 id=\"sorting\">Sorting</h2>\n<h3 id=\"sorting-by-an-axis\">Sorting by an axis</h3>\n<pre><code class=\"language-python\">df.sort_index(axis=1, ascending=False)\n</code></pre>\n<h3 id=\"sorting-by-values\">Sorting by values</h3>\n<pre><code class=\"language-python\">df.sort_values(by='B')\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 3,
                      "IsRead": null,
                      "Id": 508
                    },
                    {
                      "LessonId": 112,
                      "Name": "Pivot Table",
                      "Content": "<h1 id=\"group-by\">Group by</h1>\n<pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\n</code></pre>\n<h2 id=\"import-data\">Import Data</h2>\n<pre><code class=\"language-python\">df = pd.read_csv('MERGED1996_97_PP.csv', index_col=\"UNITID\")\n</code></pre>\n<h2 id=\"groupe-by-city-and-count\">Groupe by CITY and count</h2>\n<pre><code class=\"language-python\">df.groupby(['CITY']).count()\n</code></pre>\n<p><br><br></p>\n<h1 id=\"pivot-table\">Pivot table</h1>\n<h2 id=\"count\">Count</h2>\n<pre><code class=\"language-python\">pd.pivot_table(df, 'INSTNM', ['CITY'], aggfunc=\"count\")\n</code></pre>\n<h2 id=\"sum-and-avgs\">sum and avgs</h2>\n<pre><code class=\"language-python\">df = pd.DataFrame({'AAA' : [4,5,6,7], 'BBB' : [10,20,30,40],'CCC' : [\"A\",\"B\",\"B\",\"A\"]})\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"sum\")\ndf.pivot_table([\"AAA\", \"BBB\"], \"CCC\", aggfunc=\"mean\")\n</code></pre>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 6,
                      "IsRead": null,
                      "Id": 509
                    },
                    {
                      "LessonId": 112,
                      "Name": "Case Study",
                      "Content": "<h2 id=\"data\">Data</h2>\n<p>Download data from <a href=\"https://collegescorecard.ed.gov/data/\">here</a></p>\n<h2 id=\"work-to-do\">Work to do</h2>\n<ul>\n<li>Find the top 10 schools with the best sat scores</li>\n<li>Compute the correlation between the SAT scores and\nmedian income</li>\n</ul>\n",
                      "SandboxUrl": "",
                      "OrderIndicator": 9,
                      "IsRead": null,
                      "Id": 822
                    }
                  ],
                  "Quizzes": null,
                  "Progress": 0.0,
                  "Id": 112
                }
              ],
              "Id": 37
            },
            "Name": "Python",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 89,
                "Name": "Hello Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/HelloPython?lite=true",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 404
              },
              {
                "LessonId": 89,
                "Name": "Variables",
                "Content": "<h1 id=\"variables\">Variables</h1>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 405
              },
              {
                "LessonId": 89,
                "Name": "Conditions",
                "Content": "<h1 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h1>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 406
              },
              {
                "LessonId": 89,
                "Name": "Looping",
                "Content": "<h1 id=\"looping\">Looping</h1>\n<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 407
              },
              {
                "LessonId": 89,
                "Name": "Lists",
                "Content": "<h1 id=\"list-collection-array\">List: Collection | Array</h1>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h1 id=\"tuples\">Tuples</h1>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 408
              },
              {
                "LessonId": 89,
                "Name": "Dicts",
                "Content": "<h1 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h1>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h2 id=\"looping-a-dictionary\">Looping a Dictionary</h2>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h2 id=\"exercise\">Exercise:</h2>\n<p>Create a French to English Translator.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/DictFrToEn?lite=true",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 409
              },
              {
                "LessonId": 89,
                "Name": "Function and Classes",
                "Content": "<h1 id=\"functions\">Functions</h1>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h2 id=\"lambda-functions\">Lambda functions</h2>\n<p>The lambda operator or lambda function is a way to create small functions. Use it for math functions for example.</p>\n<p>Other good example is to pass the lambda function to another function as a callback.</p>\n<pre><code class=\"language-python\">df = lambda x: 4 * x**3 - 9 * x**2\nprint(df(5))\n</code></pre>\n<h1 id=\"oop\">OOP</h1>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Student?lite=true",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 410
              },
              {
                "LessonId": 89,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/TicTacToe?lite=true",
                "OrderIndicator": 21,
                "IsRead": null,
                "Id": 411
              }
            ],
            "Quizzes": [],
            "Progress": 0.0,
            "Id": 89
          },
          "Questions": [
            {
              "Content": "Which function to display the content of a variable?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "print()",
                  "IsCorrect": true,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 159
                },
                {
                  "Content": "display()",
                  "IsCorrect": false,
                  "QuestionId": 40,
                  "Answers": null,
                  "Id": 160
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 40
            },
            {
              "Content": "Which of the following is the exponent operator?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "^",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 161
                },
                {
                  "Content": "*",
                  "IsCorrect": false,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 162
                },
                {
                  "Content": "**",
                  "IsCorrect": true,
                  "QuestionId": 41,
                  "Answers": null,
                  "Id": 163
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 41
            },
            {
              "Content": "What correctly imports the datetime library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import datatime",
                  "IsCorrect": true,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 164
                },
                {
                  "Content": "include datatime",
                  "IsCorrect": false,
                  "QuestionId": 42,
                  "Answers": null,
                  "Id": 165
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 42
            },
            {
              "Content": "What correctly imports the fileinput library?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "import fileinput",
                  "IsCorrect": true,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 166
                },
                {
                  "Content": "include fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 167
                },
                {
                  "Content": "require fileinput",
                  "IsCorrect": false,
                  "QuestionId": 43,
                  "Answers": null,
                  "Id": 168
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 43
            },
            {
              "Content": "Which is the correct way to write a for loop?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "for i=0; i < 10; i++",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 169
                },
                {
                  "Content": "for i from 0 to 10",
                  "IsCorrect": false,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 170
                },
                {
                  "Content": "for in in range(0,10)",
                  "IsCorrect": true,
                  "QuestionId": 44,
                  "Answers": null,
                  "Id": 171
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 44
            },
            {
              "Content": "What are functions?",
              "QuizId": 7,
              "Choices": [
                {
                  "Content": "Code that can only be used once in the application",
                  "IsCorrect": false,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 172
                },
                {
                  "Content": "Reusable pieces of code that can be called on throughout an application",
                  "IsCorrect": true,
                  "QuestionId": 45,
                  "Answers": null,
                  "Id": 173
                }
              ],
              "IsAnswered": false,
              "IsCorrect": false,
              "Id": 45
            }
          ],
          "QuizResults": null,
          "IsDone": false,
          "Id": 7
        },
        "Choices": [
          {
            "Content": "matrix(x,y)",
            "IsCorrect": false,
            "QuestionId": 46,
            "Answers": null,
            "Id": 174
          },
          {
            "Content": "matrix[x,y]",
            "IsCorrect": false,
            "QuestionId": 46,
            "Answers": null,
            "Id": 175
          }
        ],
        "IsAnswered": false,
        "IsCorrect": false,
        "Id": 46
      },
      "Answers": null,
      "Id": 176
    }
  ]
}