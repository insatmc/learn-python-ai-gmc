{
  "Lessons": [
    {
      "ModuleId": 27,
      "Module": {
        "SubTrackId": 10,
        "SubTrack": {
          "Level": 1,
          "TrackId": 4,
          "Track": null,
          "Name": "Ready",
          "Modules": [
            {
              "SubTrackId": 10,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [],
              "Id": 28
            },
            {
              "SubTrackId": 10,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [],
              "Id": 29
            }
          ],
          "MigrationVersion": 2,
          "ProductTemplateId": 18,
          "Locked": false,
          "Id": 10
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 27,
            "Name": "Numpy",
            "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "Slides": [
              {
                "LessonId": 64,
                "Name": "Arrays",
                "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 319
              },
              {
                "LessonId": 64,
                "Name": "Math",
                "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 320
              },
              {
                "LessonId": 64,
                "Name": "Indexing",
                "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 321
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 64
          }
        ],
        "Id": 27
      },
      "Name": "Python",
      "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "Slides": [
        {
          "LessonId": 63,
          "Name": "Variables",
          "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 312
        },
        {
          "LessonId": 63,
          "Name": "Conditions",
          "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 313
        },
        {
          "LessonId": 63,
          "Name": "Looping",
          "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
          "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 314
        },
        {
          "LessonId": 63,
          "Name": "Lists",
          "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 9,
          "IsRead": null,
          "Id": 315
        },
        {
          "LessonId": 63,
          "Name": "Dicts",
          "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 12,
          "IsRead": null,
          "Id": 316
        },
        {
          "LessonId": 63,
          "Name": "Function and Classes",
          "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 15,
          "IsRead": null,
          "Id": 317
        },
        {
          "LessonId": 63,
          "Name": "Mini Project",
          "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 18,
          "IsRead": null,
          "Id": 318
        }
      ],
      "Quizzes": null,
      "Progress": 0.0,
      "Id": 63
    },
    {
      "ModuleId": 27,
      "Module": {
        "SubTrackId": 10,
        "SubTrack": {
          "Level": 1,
          "TrackId": 4,
          "Track": null,
          "Name": "Ready",
          "Modules": [
            {
              "SubTrackId": 10,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [],
              "Id": 28
            },
            {
              "SubTrackId": 10,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [],
              "Id": 29
            }
          ],
          "MigrationVersion": 2,
          "ProductTemplateId": 18,
          "Locked": false,
          "Id": 10
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 27,
            "Name": "Python",
            "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 63,
                "Name": "Variables",
                "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 312
              },
              {
                "LessonId": 63,
                "Name": "Conditions",
                "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 313
              },
              {
                "LessonId": 63,
                "Name": "Looping",
                "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 314
              },
              {
                "LessonId": 63,
                "Name": "Lists",
                "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 315
              },
              {
                "LessonId": 63,
                "Name": "Dicts",
                "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 316
              },
              {
                "LessonId": 63,
                "Name": "Function and Classes",
                "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 317
              },
              {
                "LessonId": 63,
                "Name": "Mini Project",
                "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 318
              }
            ],
            "Quizzes": null,
            "Progress": 0.0,
            "Id": 63
          }
        ],
        "Id": 27
      },
      "Name": "Numpy",
      "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "Slides": [
        {
          "LessonId": 64,
          "Name": "Arrays",
          "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 319
        },
        {
          "LessonId": 64,
          "Name": "Math",
          "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
          "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 320
        },
        {
          "LessonId": 64,
          "Name": "Indexing",
          "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 321
        }
      ],
      "Quizzes": null,
      "Progress": 0.0,
      "Id": 64
    }
  ],
  "Slides": [
    {
      "LessonId": 63,
      "Lesson": {
        "ModuleId": 27,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 28
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 29
              }
            ],
            "MigrationVersion": 2,
            "ProductTemplateId": 18,
            "Locked": false,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 27,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 64,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 319
                },
                {
                  "LessonId": 64,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 320
                },
                {
                  "LessonId": 64,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 321
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 64
            }
          ],
          "Id": 27
        },
        "Name": "Python",
        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 63,
            "Name": "Conditions",
            "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 313
          },
          {
            "LessonId": 63,
            "Name": "Looping",
            "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 314
          },
          {
            "LessonId": 63,
            "Name": "Lists",
            "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 315
          },
          {
            "LessonId": 63,
            "Name": "Dicts",
            "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 316
          },
          {
            "LessonId": 63,
            "Name": "Function and Classes",
            "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 317
          },
          {
            "LessonId": 63,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 318
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 63
      },
      "Name": "Variables",
      "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 312
    },
    {
      "LessonId": 63,
      "Lesson": {
        "ModuleId": 27,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 28
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 29
              }
            ],
            "MigrationVersion": 2,
            "ProductTemplateId": 18,
            "Locked": false,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 27,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 64,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 319
                },
                {
                  "LessonId": 64,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 320
                },
                {
                  "LessonId": 64,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 321
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 64
            }
          ],
          "Id": 27
        },
        "Name": "Python",
        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 63,
            "Name": "Variables",
            "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 312
          },
          {
            "LessonId": 63,
            "Name": "Looping",
            "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 314
          },
          {
            "LessonId": 63,
            "Name": "Lists",
            "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 315
          },
          {
            "LessonId": 63,
            "Name": "Dicts",
            "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 316
          },
          {
            "LessonId": 63,
            "Name": "Function and Classes",
            "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 317
          },
          {
            "LessonId": 63,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 318
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 63
      },
      "Name": "Conditions",
      "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 313
    },
    {
      "LessonId": 63,
      "Lesson": {
        "ModuleId": 27,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 28
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 29
              }
            ],
            "MigrationVersion": 2,
            "ProductTemplateId": 18,
            "Locked": false,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 27,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 64,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 319
                },
                {
                  "LessonId": 64,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 320
                },
                {
                  "LessonId": 64,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 321
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 64
            }
          ],
          "Id": 27
        },
        "Name": "Python",
        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 63,
            "Name": "Variables",
            "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 312
          },
          {
            "LessonId": 63,
            "Name": "Conditions",
            "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 313
          },
          {
            "LessonId": 63,
            "Name": "Lists",
            "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 315
          },
          {
            "LessonId": 63,
            "Name": "Dicts",
            "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 316
          },
          {
            "LessonId": 63,
            "Name": "Function and Classes",
            "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 317
          },
          {
            "LessonId": 63,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 318
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 63
      },
      "Name": "Looping",
      "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
      "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 314
    },
    {
      "LessonId": 63,
      "Lesson": {
        "ModuleId": 27,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 28
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 29
              }
            ],
            "MigrationVersion": 2,
            "ProductTemplateId": 18,
            "Locked": false,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 27,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 64,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 319
                },
                {
                  "LessonId": 64,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 320
                },
                {
                  "LessonId": 64,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 321
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 64
            }
          ],
          "Id": 27
        },
        "Name": "Python",
        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 63,
            "Name": "Variables",
            "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 312
          },
          {
            "LessonId": 63,
            "Name": "Conditions",
            "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 313
          },
          {
            "LessonId": 63,
            "Name": "Looping",
            "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 314
          },
          {
            "LessonId": 63,
            "Name": "Dicts",
            "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 316
          },
          {
            "LessonId": 63,
            "Name": "Function and Classes",
            "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 317
          },
          {
            "LessonId": 63,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 318
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 63
      },
      "Name": "Lists",
      "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 9,
      "IsRead": null,
      "Id": 315
    },
    {
      "LessonId": 63,
      "Lesson": {
        "ModuleId": 27,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 28
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 29
              }
            ],
            "MigrationVersion": 2,
            "ProductTemplateId": 18,
            "Locked": false,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 27,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 64,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 319
                },
                {
                  "LessonId": 64,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 320
                },
                {
                  "LessonId": 64,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 321
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 64
            }
          ],
          "Id": 27
        },
        "Name": "Python",
        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 63,
            "Name": "Variables",
            "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 312
          },
          {
            "LessonId": 63,
            "Name": "Conditions",
            "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 313
          },
          {
            "LessonId": 63,
            "Name": "Looping",
            "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 314
          },
          {
            "LessonId": 63,
            "Name": "Lists",
            "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 315
          },
          {
            "LessonId": 63,
            "Name": "Function and Classes",
            "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 317
          },
          {
            "LessonId": 63,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 318
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 63
      },
      "Name": "Dicts",
      "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 12,
      "IsRead": null,
      "Id": 316
    },
    {
      "LessonId": 63,
      "Lesson": {
        "ModuleId": 27,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 28
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 29
              }
            ],
            "MigrationVersion": 2,
            "ProductTemplateId": 18,
            "Locked": false,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 27,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 64,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 319
                },
                {
                  "LessonId": 64,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 320
                },
                {
                  "LessonId": 64,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 321
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 64
            }
          ],
          "Id": 27
        },
        "Name": "Python",
        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 63,
            "Name": "Variables",
            "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 312
          },
          {
            "LessonId": 63,
            "Name": "Conditions",
            "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 313
          },
          {
            "LessonId": 63,
            "Name": "Looping",
            "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 314
          },
          {
            "LessonId": 63,
            "Name": "Lists",
            "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 315
          },
          {
            "LessonId": 63,
            "Name": "Dicts",
            "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 316
          },
          {
            "LessonId": 63,
            "Name": "Mini Project",
            "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 318
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 63
      },
      "Name": "Function and Classes",
      "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 15,
      "IsRead": null,
      "Id": 317
    },
    {
      "LessonId": 63,
      "Lesson": {
        "ModuleId": 27,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 28
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 29
              }
            ],
            "MigrationVersion": 2,
            "ProductTemplateId": 18,
            "Locked": false,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 27,
              "Name": "Numpy",
              "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 64,
                  "Name": "Arrays",
                  "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 319
                },
                {
                  "LessonId": 64,
                  "Name": "Math",
                  "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 320
                },
                {
                  "LessonId": 64,
                  "Name": "Indexing",
                  "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 321
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 64
            }
          ],
          "Id": 27
        },
        "Name": "Python",
        "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 63,
            "Name": "Variables",
            "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 312
          },
          {
            "LessonId": 63,
            "Name": "Conditions",
            "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 313
          },
          {
            "LessonId": 63,
            "Name": "Looping",
            "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 314
          },
          {
            "LessonId": 63,
            "Name": "Lists",
            "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 315
          },
          {
            "LessonId": 63,
            "Name": "Dicts",
            "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 316
          },
          {
            "LessonId": 63,
            "Name": "Function and Classes",
            "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 317
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 63
      },
      "Name": "Mini Project",
      "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 18,
      "IsRead": null,
      "Id": 318
    },
    {
      "LessonId": 64,
      "Lesson": {
        "ModuleId": 27,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 28
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 29
              }
            ],
            "MigrationVersion": 2,
            "ProductTemplateId": 18,
            "Locked": false,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 27,
              "Name": "Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 63,
                  "Name": "Variables",
                  "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 312
                },
                {
                  "LessonId": 63,
                  "Name": "Conditions",
                  "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 313
                },
                {
                  "LessonId": 63,
                  "Name": "Looping",
                  "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 314
                },
                {
                  "LessonId": 63,
                  "Name": "Lists",
                  "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 315
                },
                {
                  "LessonId": 63,
                  "Name": "Dicts",
                  "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 316
                },
                {
                  "LessonId": 63,
                  "Name": "Function and Classes",
                  "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 317
                },
                {
                  "LessonId": 63,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 318
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 63
            }
          ],
          "Id": 27
        },
        "Name": "Numpy",
        "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 3,
        "Slides": [
          {
            "LessonId": 64,
            "Name": "Math",
            "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 320
          },
          {
            "LessonId": 64,
            "Name": "Indexing",
            "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 321
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 64
      },
      "Name": "Arrays",
      "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 319
    },
    {
      "LessonId": 64,
      "Lesson": {
        "ModuleId": 27,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 28
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 29
              }
            ],
            "MigrationVersion": 2,
            "ProductTemplateId": 18,
            "Locked": false,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 27,
              "Name": "Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 63,
                  "Name": "Variables",
                  "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 312
                },
                {
                  "LessonId": 63,
                  "Name": "Conditions",
                  "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 313
                },
                {
                  "LessonId": 63,
                  "Name": "Looping",
                  "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 314
                },
                {
                  "LessonId": 63,
                  "Name": "Lists",
                  "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 315
                },
                {
                  "LessonId": 63,
                  "Name": "Dicts",
                  "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 316
                },
                {
                  "LessonId": 63,
                  "Name": "Function and Classes",
                  "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 317
                },
                {
                  "LessonId": 63,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 318
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 63
            }
          ],
          "Id": 27
        },
        "Name": "Numpy",
        "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 3,
        "Slides": [
          {
            "LessonId": 64,
            "Name": "Arrays",
            "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 319
          },
          {
            "LessonId": 64,
            "Name": "Indexing",
            "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 321
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 64
      },
      "Name": "Math",
      "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
      "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 320
    },
    {
      "LessonId": 64,
      "Lesson": {
        "ModuleId": 27,
        "Module": {
          "SubTrackId": 10,
          "SubTrack": {
            "Level": 1,
            "TrackId": 4,
            "Track": null,
            "Name": "Ready",
            "Modules": [
              {
                "SubTrackId": 10,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 28
              },
              {
                "SubTrackId": 10,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 29
              }
            ],
            "MigrationVersion": 2,
            "ProductTemplateId": 18,
            "Locked": false,
            "Id": 10
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 27,
              "Name": "Python",
              "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 63,
                  "Name": "Variables",
                  "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 312
                },
                {
                  "LessonId": 63,
                  "Name": "Conditions",
                  "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 313
                },
                {
                  "LessonId": 63,
                  "Name": "Looping",
                  "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                  "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 314
                },
                {
                  "LessonId": 63,
                  "Name": "Lists",
                  "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 315
                },
                {
                  "LessonId": 63,
                  "Name": "Dicts",
                  "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 316
                },
                {
                  "LessonId": 63,
                  "Name": "Function and Classes",
                  "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 317
                },
                {
                  "LessonId": 63,
                  "Name": "Mini Project",
                  "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 318
                }
              ],
              "Quizzes": null,
              "Progress": 0.0,
              "Id": 63
            }
          ],
          "Id": 27
        },
        "Name": "Numpy",
        "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 3,
        "Slides": [
          {
            "LessonId": 64,
            "Name": "Arrays",
            "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 319
          },
          {
            "LessonId": 64,
            "Name": "Math",
            "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
            "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 320
          }
        ],
        "Quizzes": null,
        "Progress": 0.0,
        "Id": 64
      },
      "Name": "Indexing",
      "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 321
    }
  ],
  "Modules": [
    {
      "SubTrackId": 10,
      "SubTrack": {
        "Level": 1,
        "TrackId": 4,
        "Track": null,
        "Name": "Ready",
        "Modules": [
          {
            "SubTrackId": 10,
            "Name": "Power Up",
            "Color": "#2ecc71",
            "OrderIndicator": 3,
            "Lessons": [],
            "Id": 28
          },
          {
            "SubTrackId": 10,
            "Name": "Launch",
            "Color": "#3498db",
            "OrderIndicator": 6,
            "Lessons": [],
            "Id": 29
          }
        ],
        "MigrationVersion": 2,
        "ProductTemplateId": 18,
        "Locked": false,
        "Id": 10
      },
      "Name": "Kickstart",
      "Color": "#1abc9c",
      "OrderIndicator": 0,
      "Lessons": [
        {
          "ModuleId": 27,
          "Name": "Python",
          "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "Slides": [
            {
              "LessonId": 63,
              "Name": "Variables",
              "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 312
            },
            {
              "LessonId": 63,
              "Name": "Conditions",
              "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 313
            },
            {
              "LessonId": 63,
              "Name": "Looping",
              "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 314
            },
            {
              "LessonId": 63,
              "Name": "Lists",
              "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 315
            },
            {
              "LessonId": 63,
              "Name": "Dicts",
              "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 316
            },
            {
              "LessonId": 63,
              "Name": "Function and Classes",
              "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 317
            },
            {
              "LessonId": 63,
              "Name": "Mini Project",
              "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 318
            }
          ],
          "Quizzes": null,
          "Progress": 0.0,
          "Id": 63
        },
        {
          "ModuleId": 27,
          "Name": "Numpy",
          "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "Slides": [
            {
              "LessonId": 64,
              "Name": "Arrays",
              "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 319
            },
            {
              "LessonId": 64,
              "Name": "Math",
              "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
              "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 320
            },
            {
              "LessonId": 64,
              "Name": "Indexing",
              "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 321
            }
          ],
          "Quizzes": null,
          "Progress": 0.0,
          "Id": 64
        }
      ],
      "Id": 27
    },
    {
      "SubTrackId": 10,
      "SubTrack": {
        "Level": 1,
        "TrackId": 4,
        "Track": null,
        "Name": "Ready",
        "Modules": [
          {
            "SubTrackId": 10,
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 27,
                "Name": "Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "Slides": [
                  {
                    "LessonId": 63,
                    "Name": "Variables",
                    "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 312
                  },
                  {
                    "LessonId": 63,
                    "Name": "Conditions",
                    "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 313
                  },
                  {
                    "LessonId": 63,
                    "Name": "Looping",
                    "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 314
                  },
                  {
                    "LessonId": 63,
                    "Name": "Lists",
                    "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 315
                  },
                  {
                    "LessonId": 63,
                    "Name": "Dicts",
                    "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 316
                  },
                  {
                    "LessonId": 63,
                    "Name": "Function and Classes",
                    "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "IsRead": null,
                    "Id": 317
                  },
                  {
                    "LessonId": 63,
                    "Name": "Mini Project",
                    "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "IsRead": null,
                    "Id": 318
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 63
              },
              {
                "ModuleId": 27,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 64,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 319
                  },
                  {
                    "LessonId": 64,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 320
                  },
                  {
                    "LessonId": 64,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 321
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 64
              }
            ],
            "Id": 27
          },
          {
            "SubTrackId": 10,
            "Name": "Launch",
            "Color": "#3498db",
            "OrderIndicator": 6,
            "Lessons": [],
            "Id": 29
          }
        ],
        "MigrationVersion": 2,
        "ProductTemplateId": 18,
        "Locked": false,
        "Id": 10
      },
      "Name": "Power Up",
      "Color": "#2ecc71",
      "OrderIndicator": 3,
      "Lessons": [],
      "Id": 28
    },
    {
      "SubTrackId": 10,
      "SubTrack": {
        "Level": 1,
        "TrackId": 4,
        "Track": null,
        "Name": "Ready",
        "Modules": [
          {
            "SubTrackId": 10,
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 27,
                "Name": "Python",
                "Content": "<h1 id=\"python\">Python</h1>\n<p>Python is a \"high-level\" programming language and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code” created by Guido van Rossum.</p>\n<p>In this course we will use an online code editor so no installation required.</p>\n<h2 id=\"hello-world\">Hello World</h2>\n<p>In our academy page, switch to code view and type</p>\n<pre><code class=\"language-python\">print(\"Hello Python!\")\n</code></pre>\n<p><a href=\"https://repl.it/@mokhleselheni/HelloPython?lite=true\">https://repl.it/@mokhleselheni/HelloPython?lite=true</a></p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "Slides": [
                  {
                    "LessonId": 63,
                    "Name": "Variables",
                    "Content": "<h3 id=\"variables\">Variables</h3>\n<p>You can think about variables as a box that stores a value. Simple as that.</p>\n<pre><code class=\"language-python\"># booleans\ntrue_boolean = True # T (uppercase) not t!\nfalse_boolean = False # F not f!\n\n# string\nmy_name = \"Leandro Tk\"\n\n# float\nbook_price = 15.80\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 312
                  },
                  {
                    "LessonId": 63,
                    "Name": "Conditions",
                    "Content": "<h3 id=\"control-flow-conditional-statements\">Control Flow: conditional statements</h3>\n<p>If a condition is True do something otherwise do another thing else.</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelse:\n  print(\"1 is not greater than 2\")\n</code></pre>\n<p>You can also use “elif” statement. Like that:</p>\n<pre><code class=\"language-python\">if 1 &gt; 2:\n  print(\"1 is greater than 2\")\nelif 2 &gt; 1:\n  print(\"1 is not greater than 2\")\nelse:\n  print(\"1 is equal to 2\")\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 313
                  },
                  {
                    "LessonId": 63,
                    "Name": "Looping",
                    "Content": "<p>Execute n lines of code until the condition turn to False</p>\n<pre><code class=\"language-python\">num = 1\n\nwhile num &lt;= 10:\n  print(num)\n  num += 1\n</code></pre>\n<p>For each element of a list do something</p>\n<pre><code class=\"language-python\">for i in range(1, 11):\n  print(i)\n</code></pre>\n<ul>\n<li>range is a function that return a list from the first arg to 2nd (the 2nd not included).</li>\n</ul>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Ask the user to enter two integers (x and y) both should be greater than 0.\nPrint which integer is bigger x or y.</p>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/WhichIntegerIsBigger?lite=true",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 314
                  },
                  {
                    "LessonId": 63,
                    "Name": "Lists",
                    "Content": "<h3 id=\"list-collection-array\">List: Collection | Array</h3>\n<pre><code class=\"language-python\">my_integers = [5, 7, 3, 4, 4]\n</code></pre>\n<p>To take an element of the array and manipulate it we use indexes like this</p>\n<pre><code class=\"language-python\">print(my_integers[0]) # 5\nprint(my_integers[1] + my_integers[4]) # 7 + 4 = 11\n</code></pre>\n<p>To add an element to our list we use append()</p>\n<pre><code class=\"language-python\">bookshelf = []\nbookshelf.append(\"The Effective Engineer\")\nbookshelf.append(\"The 4 Hour Work Week\")\nprint(bookshelf[0]) # The Effective Engineer\nprint(bookshelf[1]) # The 4 Hour Work Week\n</code></pre>\n<h3 id=\"tuples\">Tuples</h3>\n<p>Lists that cannot be changed, just another thing () in place of [].</p>\n<pre><code class=\"language-python\">  a = (1, 2, \"string\", [])\n  print(a[2])\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 315
                  },
                  {
                    "LessonId": 63,
                    "Name": "Dicts",
                    "Content": "<h3 id=\"dictionary-key-value-data-structure\">Dictionary: Key-Value Data Structure</h3>\n<pre><code class=\"language-python\">dictionary_example = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n</code></pre>\n<p>Now we manipulate an element of our Dictionary using its key:</p>\n<pre><code class=\"language-Python\">print(\"My name is %s\" %(dictionary_tk[\"name\"])) # My name is Leandro\n</code></pre>\n<h3 id=\"looping-a-dictionary\">Looping a Dictionary</h3>\n<pre><code class=\"language-python\">for key, value in dictionary.items():\n    print(\"%s --&gt; %s\" %(key, value))\n</code></pre>\n<h3 id=\"exercise\">Exercise:</h3>\n<p>Create a French to English Translator.</p>\n<p><a href=\"https://repl.it/@mokhleselheni/DictFrToEn?lite=true\">https://repl.it/@mokhleselheni/DictFrToEn?lite=true</a></p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 316
                  },
                  {
                    "LessonId": 63,
                    "Name": "Function and Classes",
                    "Content": "<h3 id=\"functions\">Functions</h3>\n<pre><code class=\"language-python\">def sum_of_2(arg1, arg2):\n  result = arg1 * arg2\n  return result\n\nres = sum_of_2(2, 3)\nprint(res)\n</code></pre>\n<h3 id=\"oop\">OOP</h3>\n<pre><code class=\"language-python\">class Vehicle:\n  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n    self.number_of_wheels = number_of_wheels\n    self.type_of_tank = type_of_tank\n    self.seating_capacity = seating_capacity\n    self.maximum_velocity = maximum_velocity\n\n  def number_of_wheels(self):\n    return self.number_of_wheels\n\n  def set_number_of_wheels(self, number):\n    self.number_of_wheels = number\n\n  def make_noise(self):\n    print('VRUUUUUUUM')\n</code></pre>\n<p>Using this class</p>\n<pre><code class=\"language-python\">tesla_model_s = Vehicle(4, 'electric', 5, 250)\ntesla_model_s.make_noise() # VRUUUUUUUM\n</code></pre>\n<h3 id=\"exercise\">Exercise</h3>\n<p>Write a student class (Name, Mark) with one method which return if the student pass/fail the test (mark &gt;=? 10)</p>\n<p><a href=\"https://repl.it/@mokhleselheni/Student?lite=true\">https://repl.it/@mokhleselheni/Student?lite=true</a></p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "IsRead": null,
                    "Id": 317
                  },
                  {
                    "LessonId": 63,
                    "Name": "Mini Project",
                    "Content": "<h1 id=\"your-work\">Your work</h1>\n<p>Complete the code to make a simple AI that can play with the user the game of Tic Tac Toe.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "IsRead": null,
                    "Id": 318
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 63
              },
              {
                "ModuleId": 27,
                "Name": "Numpy",
                "Content": "<h1 id=\"numpy\">Numpy</h1>\n<p>Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 64,
                    "Name": "Arrays",
                    "Content": "<h2 id=\"arrays\">Arrays</h2>\n<ul>\n<li>A numpy array is a list of values, all of the same type, and is indexed by a tuple of nonnegative integers.</li>\n<li>The number of dimensions is the rank of the array (Vector =&gt; 1, Matrix n x m =&gt; 2 etc.)</li>\n</ul>\n<p>Let's create our first Numpy array</p>\n<pre><code class=\"language-python\">import numpy as np\n\na = np.array([1, 2, 3])   # Create a rank 1 array\nprint(a.shape)            # Prints \"(3,)\"\n\nprint(a[0], a[1], a[2])   # Prints \"1 2 3\"\n\na[0] = 5                  # Change an element of the array\nprint(a)                  # Prints \"[5, 2, 3]\"\n</code></pre>\n<p>Let's add a dimension to our array</p>\n<pre><code class=\"language-python\">b = np.array(\n  [[1,2,3],\n   [4,5,6]])    # Create a 2 dim array\n\nprint(b.shape)                     # Prints \"(2, 3)\" =&gt; 2 lines 3 cols\nprint(b[0, 0], b[0, 1], b[1, 0])   # Prints \"1 2 4\"\n</code></pre>\n<h2 id=\"create-arrays\">Create arrays</h2>\n<p>Numpy comes with a lot of methods to create arrays, zeros, ones and others.</p>\n<pre><code class=\"language-python\">a = np.zeros((2,2))\n\nb = np.ones((1,2))\n\nc = np.full((2,2), 7) # Create a constant array\nd = np.eye(2)         # Create a 2x2 identity\n\ne = np.random.random((2,2))\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 319
                  },
                  {
                    "LessonId": 64,
                    "Name": "Math",
                    "Content": "<h2 id=\"array-math\">Array math</h2>\n<p>Let's create 2 arrays to test the operations possible with numpy.</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n</code></pre>\n<h2 id=\"adding-2-arrays\">Adding 2 arrays</h2>\n<pre><code class=\"language-python\">print(x + y)\nprint(np.add(x, y))\n</code></pre>\n<h2 id=\"x-y\">X-Y</h2>\n<pre><code class=\"language-python\">print(x - y)\nprint(np.subtract(x, y))\n</code></pre>\n<h2 id=\"multiplication\">Multiplication</h2>\n<pre><code class=\"language-python\">print(x * y)\nprint(np.multiply(x, y))\n</code></pre>\n<p>Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of matrix:</p>\n<pre><code class=\"language-python\">x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nprint(x.dot(y))\nprint(np.dot(x, y))\n</code></pre>\n<h2 id=\"devision\">Devision</h2>\n<pre><code class=\"language-python\">print(x / y)\nprint(np.divide(x, y))\n</code></pre>\n<h2 id=\"square-root\">Square root</h2>\n<pre><code class=\"language-python\">print(np.sqrt(x))\n</code></pre>\n",
                    "SandboxUrl": "https://repl.it/@mokhleselheni/Numpy",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 320
                  },
                  {
                    "LessonId": 64,
                    "Name": "Indexing",
                    "Content": "<h2 id=\"indexing\">Indexing</h2>\n<p>As we did see we can access an element with it's (row, col) combination, numpy has other cool method to access elements:</p>\n<pre><code class=\"language-python\">a = np.array([2, 3, 4, 1])\na[a&gt;=2] = 2\n</code></pre>\n<h2 id=\"handling-non-existing-values\">Handling non-existing values</h2>\n<pre><code class=\"language-python\">c = np.array([1, 2, np.NAN, 3, 4])\nc[np.isnan(c)] =  np.mean(c[~np.isnan(c)])\n</code></pre>\n<h2 id=\"cheat-sheet\">Cheat Sheet</h2>\n<p>This document has a good summary of what numpy offer go back to it whenever your forget something.</p>\n<p><a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf\">Check the Numpy Cheat Sheet</a></p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 321
                  }
                ],
                "Quizzes": null,
                "Progress": 0.0,
                "Id": 64
              }
            ],
            "Id": 27
          },
          {
            "SubTrackId": 10,
            "Name": "Power Up",
            "Color": "#2ecc71",
            "OrderIndicator": 3,
            "Lessons": [],
            "Id": 28
          }
        ],
        "MigrationVersion": 2,
        "ProductTemplateId": 18,
        "Locked": false,
        "Id": 10
      },
      "Name": "Launch",
      "Color": "#3498db",
      "OrderIndicator": 6,
      "Lessons": [],
      "Id": 29
    }
  ],
  "Quizzes": [],
  "Questions": [],
  "Choices": []
}